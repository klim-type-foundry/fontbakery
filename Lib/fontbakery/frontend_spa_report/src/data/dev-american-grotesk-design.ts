const data: Pick<FontBakeryData, 'result' | 'sections' | 'reportTitle'> = {
    reportTitle: 'Design report',
    result: { FAIL: 105, PASS: 244, SKIP: 154, WARN: 253 },
    sections: [
        {
            checks: [
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 0]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 0]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=429.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=241.0,Y=1.5 (should be at baseline 0?)\n\n\t* Q (U+0051): X=236.0,Y=-2.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=109.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=174.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=-33.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=32.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=180.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=204.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=-33.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=-12.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=222.5,Y=723.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=210.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2085 (U+2085): X=98.5,Y=1.0 (should be at baseline 0?)\n\n\t* uni2087 (U+2087): X=137.5,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=210.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=210.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=-18.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=61.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=230.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=341.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 0]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* j (U+006A) contains a short segment B<<-86.0,-77.0>-<-82.0,-78.0>-<-76.0,-79.0>>\n\n\t* j (U+006A) contains a short segment B<<-76.0,-79.0>-<-70.0,-80.0>-<-66.0,-80.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<43.0,384.0>--<49.0,384.0>>\n\n\t* braceright (U+007D) contains a short segment L<<235.0,298.0>--<229.0,298.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<218.0,352.0>--<205.0,352.0>>\n\n\t* ij (U+0133) contains a short segment B<<101.0,-77.0>-<105.0,-78.0>-<111.0,-79.0>>\n\n\t* ij (U+0133) contains a short segment B<<111.0,-79.0>-<117.0,-80.0>-<121.0,-80.0>>\n\n\t* Eng (U+014A) contains a short segment B<<161.0,-75.0>-<173.0,-78.0>-<185.0,-78.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<56.0,230.0>-<56.0,238.0>-<56.0,246.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 0]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 0]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<262.0,270.0>--<318.0,629.0>>/L<<318.0,629.0>--<177.0,270.0>> = 12.576745496018571\n\n\t* AEacute (U+01FC): L<<262.0,270.0>--<318.0,629.0>>/L<<318.0,629.0>--<177.0,270.0>> = 12.576745496018571\n\n\t* M (U+004D): L<<176.0,0.0>--<185.0,533.0>>/L<<185.0,533.0>--<100.0,0.0>> = 8.093547710025998\n\n\t* M (U+004D): L<<334.0,0.0>--<419.0,533.0>>/L<<419.0,533.0>--<254.0,0.0>> = 8.139950142678202\n\n\t* W (U+0057): L<<199.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<297.0,722.0>> = 12.16620891570391\n\n\t* W (U+0057): L<<285.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<174.0,0.0>> = 13.506237479962078\n\n\t* W (U+0057): L<<399.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<496.0,722.0>> = 12.046910965736274\n\n\t* Wacute (U+1E82): L<<199.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<297.0,722.0>> = 12.16620891570391\n\n\t* Wacute (U+1E82): L<<285.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<174.0,0.0>> = 13.506237479962078\n\n\t* Wacute (U+1E82): L<<399.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<496.0,722.0>> = 12.046910965736274\n\n\t* Wcircumflex (U+0174): L<<199.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<297.0,722.0>> = 12.16620891570391\n\n\t* Wcircumflex (U+0174): L<<285.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<174.0,0.0>> = 13.506237479962078\n\n\t* Wcircumflex (U+0174): L<<399.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<496.0,722.0>> = 12.046910965736274\n\n\t* Wdieresis (U+1E84): L<<199.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<297.0,722.0>> = 12.16620891570391\n\n\t* Wdieresis (U+1E84): L<<285.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<174.0,0.0>> = 13.506237479962078\n\n\t* Wdieresis (U+1E84): L<<399.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<496.0,722.0>> = 12.046910965736274\n\n\t* Wgrave (U+1E80): L<<199.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<297.0,722.0>> = 12.16620891570391\n\n\t* Wgrave (U+1E80): L<<285.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<174.0,0.0>> = 13.506237479962078\n\n\t* Wgrave (U+1E80): L<<399.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<496.0,722.0>> = 12.046910965736274\n\n\t* trademark (U+2122): L<<333.0,420.0>--<326.0,656.0>>/L<<326.0,656.0>--<289.0,420.0>> = 10.609233822577973\n\n\t* trademark (U+2122): L<<419.0,420.0>--<456.0,656.0>>/L<<456.0,656.0>--<376.0,420.0>> = 9.81550699414058\n\n\t* won (U+20A9): L<<206.0,722.0>--<174.0,283.0>>/L<<174.0,283.0>--<284.0,722.0>> = 9.89786441004578\n\n\t* won (U+20A9): L<<255.0,0.0>--<283.0,448.0>>/L<<283.0,448.0>--<173.0,0.0>> = 10.218918802126382 \n\n\t* won (U+20A9): L<<380.0,722.0>--<347.0,282.0>>/L<<347.0,282.0>--<452.0,722.0>> = 9.13268173906718 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 0]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* at (U+0040): X=478.0,Y=2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=223.0,Y=724.0 (should be at cap-height 722?)\n\n\t* braceleft (U+007B): X=175.5,Y=0.5 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=59.5,Y=0.5 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=125.0,Y=2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=225.0,Y=-1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=324.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=19.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2083 (U+2083): X=93.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<24.0,375.0>--<31.0,375.0>>\n\n\t* braceright (U+007D) contains a short segment L<<211.0,307.0>--<204.0,307.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<200.0,359.0>--<190.0,359.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<166.0,71.0>-<174.0,69.0>-<182.5,68.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<182.5,68.0>-<191.0,67.0>-<198.0,67.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<339.0,-102.0>-<344.0,-102.0>-<350.5,-101.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<350.5,-101.0>-<357.0,-100.0>-<364.0,-98.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<296.0,-102.0>-<301.0,-102.0>-<307.5,-101.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<307.5,-101.0>-<314.0,-100.0>-<321.0,-98.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<271.0,-102.0>-<276.0,-102.0>-<282.5,-101.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<282.5,-101.0>-<289.0,-100.0>-<296.0,-98.0>>\n\n\t* Iogonek (U+012E) contains a short segment B<<118.0,-102.0>-<123.0,-102.0>-<129.5,-101.0>>\n\n\t* Eng (U+014A) contains a short segment B<<195.0,-90.0>-<206.0,-91.0>-<213.0,-92.0>>\n\n\t* Eng (U+014A) contains a short segment B<<213.0,-92.0>-<220.0,-93.0>-<229.0,-93.0>>\n\n\t* eng (U+014B) contains a short segment B<<186.5,-92.0>-<193.0,-93.0>-<203.0,-93.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<239.0,-102.0>-<244.0,-102.0>-<250.5,-101.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<250.5,-101.0>-<257.0,-100.0>-<263.0,-98.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<323.0,-102.0>-<328.0,-102.0>-<334.5,-101.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<334.5,-101.0>-<341.0,-100.0>-<348.0,-98.0>>\n\n\t* Germandbls (U+1E9E) contains a short segment B<<193.5,84.0>-<204.0,81.0>-<214.0,81.0>>\n\n\t* Euro (U+20AC) contains a short segment L<<157.0,391.0>--<157.0,386.0>> \n\n\t* Euro (U+20AC) contains a short segment L<<157.0,337.0>--<157.0,336.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Euro (U+20AC): L<<157.0,386.0>--<157.0,337.0>> -> L<<157.0,337.0>--<157.0,336.0>> \n\n\t* Euro (U+20AC): L<<157.0,391.0>--<157.0,386.0>> -> L<<157.0,386.0>--<157.0,337.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<249.0,271.0>--<249.0,635.0>>/L<<249.0,635.0>--<157.0,271.0>> = 14.184294248270824\n\n\t* AEacute (U+01FC): L<<249.0,271.0>--<249.0,635.0>>/L<<249.0,635.0>--<157.0,271.0>> = 14.184294248270824\n\n\t* M (U+004D): L<<207.0,0.0>--<125.0,575.0>>/L<<125.0,575.0>--<125.0,0.0>> = 8.116151592436747\n\n\t* M (U+004D): L<<359.0,0.0>--<359.0,575.0>>/L<<359.0,575.0>--<272.0,0.0>> = 8.603840707873099\n\n\t* W (U+0057): L<<108.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<218.0,722.0>> = 12.705791617430796\n\n\t* W (U+0057): L<<305.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<414.0,722.0>> = 12.590950612672483\n\n\t* W (U+0057): L<<315.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<193.0,0.0>> = 13.802030578276192\n\n\t* Wacute (U+1E82): L<<108.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<218.0,722.0>> = 12.705791617430796\n\n\t* Wacute (U+1E82): L<<305.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<414.0,722.0>> = 12.590950612672483\n\n\t* Wacute (U+1E82): L<<315.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<193.0,0.0>> = 13.802030578276192\n\n\t* Wcircumflex (U+0174): L<<108.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<218.0,722.0>> = 12.705791617430796\n\n\t* Wcircumflex (U+0174): L<<305.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<414.0,722.0>> = 12.590950612672483\n\n\t* Wcircumflex (U+0174): L<<315.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<193.0,0.0>> = 13.802030578276192\n\n\t* Wdieresis (U+1E84): L<<108.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<218.0,722.0>> = 12.705791617430796\n\n\t* Wdieresis (U+1E84): L<<305.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<414.0,722.0>> = 12.590950612672483\n\n\t* Wdieresis (U+1E84): L<<315.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<193.0,0.0>> = 13.802030578276192\n\n\t* Wgrave (U+1E80): L<<108.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<218.0,722.0>> = 12.705791617430796\n\n\t* Wgrave (U+1E80): L<<305.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<414.0,722.0>> = 12.590950612672483\n\n\t* Wgrave (U+1E80): L<<315.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<193.0,0.0>> = 13.802030578276192\n\n\t* naira (U+20A6): L<<172.0,722.0>--<261.0,335.0>>/L<<261.0,335.0>--<261.0,722.0>> = 12.951358378457568\n\n\t* naira (U+20A6): L<<266.0,0.0>--<145.0,515.0>>/L<<145.0,515.0>--<145.0,0.0>> = 13.221915376546848\n\n\t* trademark (U+2122): L<<307.0,423.0>--<259.0,670.0>>/L<<259.0,670.0>--<259.0,423.0>> = 10.997331946321593\n\n\t* trademark (U+2122): L<<393.0,423.0>--<393.0,670.0>>/L<<393.0,670.0>--<346.0,423.0>> = 10.77363818777617\n\n\t* won (U+20A9): L<<117.0,722.0>--<158.0,243.0>>/L<<158.0,243.0>--<202.0,722.0>> = 10.140656326673257\n\n\t* won (U+20A9): L<<283.0,0.0>--<238.0,490.0>>/L<<238.0,490.0>--<195.0,0.0>> = 10.262288392288676 \n\n\t* won (U+20A9): L<<290.0,722.0>--<331.0,243.0>>/L<<331.0,243.0>--<371.0,722.0>> = 9.665847824296105 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 2]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 2]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* g (U+0067): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=218.5,Y=2.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=241.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=115.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=115.0,Y=2.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=222.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=370.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 2]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<527.5,157.5>-<531.0,143.0>-<544.0,143.0>>\n\n\t* R (U+0052) contains a short segment L<<226.0,295.0>--<210.0,295.0>>\n\n\t* f (U+0066) contains a short segment B<<279.0,609.0>-<273.0,610.0>-<268.5,610.5>>\n\n\t* f (U+0066) contains a short segment B<<268.5,610.5>-<264.0,611.0>-<257.0,611.0>>\n\n\t* j (U+006A) contains a short segment L<<-30.0,-50.0>--<-27.0,-50.0>>\n\n\t* m (U+006D) contains a short segment B<<471.0,402.0>-<460.0,402.0>-<450.5,395.5>>\n\n\t* m (U+006D) contains a short segment B<<450.5,395.5>-<441.0,389.0>-<434.0,380.0>>\n\n\t* m (U+006D) contains a short segment B<<231.0,402.0>-<220.0,402.0>-<210.5,395.5>>\n\n\t* m (U+006D) contains a short segment B<<210.5,395.5>-<201.0,389.0>-<194.0,380.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<20.0,401.0>--<27.0,401.0>>\n\n\t* braceright (U+007D) contains a short segment L<<264.0,281.0>--<257.0,281.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<210.0,337.0>--<192.0,337.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<212.0,118.0>-<224.0,115.0>-<231.0,115.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<450.0,-77.0>-<457.0,-77.0>-<466.0,-74.0>>\n\n\t* ij (U+0133) contains a short segment L<<184.0,-50.0>--<187.0,-50.0>>\n\n\t* jcircumflex (U+0135) contains a short segment L<<-30.0,-50.0>--<-27.0,-50.0>>\n\n\t* Eng (U+014A) contains a short segment B<<283.0,-174.0>-<275.0,-174.0>-<267.0,-174.0>>\n\n\t* Eng (U+014A) contains a short segment B<<267.0,-174.0>-<259.0,-174.0>-<251.0,-173.0>>\n\n\t* Eng (U+014A) contains a short segment L<<251.0,-50.0>--<254.0,-50.0>>\n\n\t* eng (U+014B) contains a short segment B<<242.0,-174.0>-<234.0,-174.0>-<226.0,-174.0>>\n\n\t* eng (U+014B) contains a short segment B<<226.0,-174.0>-<218.0,-174.0>-<210.0,-173.0>>\n\n\t* eng (U+014B) contains a short segment L<<210.0,-50.0>--<213.0,-50.0>>\n\n\t* Racute (U+0154) contains a short segment L<<226.0,295.0>--<210.0,295.0>>\n\n\t* Rcommaaccent (U+0156) contains a short segment L<<226.0,295.0>--<210.0,295.0>>\n\n\t* Rcaron (U+0158) contains a short segment L<<226.0,295.0>--<210.0,295.0>>\n\n\t* tbar (U+0167) contains a short segment B<<258.0,114.0>-<264.0,114.0>-<270.5,114.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<295.0,-77.0>-<302.0,-77.0>-<311.0,-74.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<418.0,-77.0>-<425.0,-77.0>-<434.0,-74.0>>\n\n\t* uni0237 (U+0237) contains a short segment L<<-30.0,-50.0>--<-27.0,-50.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<34.0,346.0>-<34.0,353.0>-<34.0,361.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<34.0,361.0>-<34.0,369.0>-<34.0,376.0>> \n\n\t* peso (U+20B1) contains a short segment B<<501.0,495.0>-<501.0,488.0>-<501.0,481.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 2]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 2]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<279.0,267.0>--<279.0,584.0>>/L<<279.0,584.0>--<203.0,267.0>> = 13.48206050226687\n\n\t* AEacute (U+01FC): L<<279.0,267.0>--<279.0,584.0>>/L<<279.0,584.0>--<203.0,267.0>> = 13.48206050226687\n\n\t* M (U+004D): L<<237.0,0.0>--<171.0,455.0>>/L<<171.0,455.0>--<171.0,0.0>> = 8.2534704983513\n\n\t* M (U+004D): L<<405.0,0.0>--<405.0,455.0>>/L<<405.0,455.0>--<338.0,0.0>> = 8.376761627763987\n\n\t* W (U+0057): L<<178.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<252.0,722.0>> = 11.607397546892544\n\n\t* W (U+0057): L<<346.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<257.0,0.0>> = 13.714878684894954\n\n\t* W (U+0057): L<<383.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<456.0,722.0>> = 11.420996560924731\n\n\t* Wacute (U+1E82): L<<178.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<252.0,722.0>> = 11.607397546892544\n\n\t* Wacute (U+1E82): L<<346.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<257.0,0.0>> = 13.714878684894954\n\n\t* Wacute (U+1E82): L<<383.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<456.0,722.0>> = 11.420996560924731\n\n\t* Wcircumflex (U+0174): L<<178.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<252.0,722.0>> = 11.607397546892544\n\n\t* Wcircumflex (U+0174): L<<346.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<257.0,0.0>> = 13.714878684894954\n\n\t* Wcircumflex (U+0174): L<<383.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<456.0,722.0>> = 11.420996560924731\n\n\t* Wdieresis (U+1E84): L<<178.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<252.0,722.0>> = 11.607397546892544\n\n\t* Wdieresis (U+1E84): L<<346.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<257.0,0.0>> = 13.714878684894954\n\n\t* Wdieresis (U+1E84): L<<383.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<456.0,722.0>> = 11.420996560924731\n\n\t* Wgrave (U+1E80): L<<178.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<252.0,722.0>> = 11.607397546892544\n\n\t* Wgrave (U+1E80): L<<346.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<257.0,0.0>> = 13.714878684894954\n\n\t* Wgrave (U+1E80): L<<383.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<456.0,722.0>> = 11.420996560924731\n\n\t* trademark (U+2122): L<<307.0,413.0>--<270.0,631.0>>/L<<270.0,631.0>--<270.0,413.0>> = 9.632718075968034\n\n\t* trademark (U+2122): L<<392.0,413.0>--<392.0,631.0>>/L<<392.0,631.0>--<357.0,413.0>> = 9.12102599453198\n\n\t* won (U+20A9): L<<170.0,722.0>--<200.0,358.0>>/L<<200.0,358.0>--<237.0,722.0>> = 10.51561724975861\n\n\t* won (U+20A9): L<<309.0,0.0>--<272.0,370.0>>/L<<272.0,370.0>--<240.0,0.0>> = 10.653603856113174 \n\n\t* won (U+20A9): L<<347.0,722.0>--<374.0,357.0>>/L<<374.0,357.0>--<403.0,722.0>> = 8.773337209527071 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 2]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 3]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 3]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=517.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=253.0,Y=723.0 (should be at cap-height 722?)\n\n\t* r (U+0072): X=216.5,Y=511.0 (should be at x-height 510?)\n\n\t* onesuperior (U+00B9): X=106.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=144.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=106.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=144.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=106.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=144.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=221.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=141.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=141.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=170.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=170.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=153.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=153.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aogonek (U+0105): X=281.0,Y=-2.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=45.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=45.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=167.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=167.0,Y=723.0 (should be at cap-height 722?)\n\n\t* florin (U+0192): X=358.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=251.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=251.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=106.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=144.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=106.0,Y=724.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=144.0,Y=724.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 3]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* e (U+0065) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<197.0,384.0>--<187.0,384.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<208.0,44.0>-<218.0,43.0>-<228.0,43.0>>\n\n\t* ae (U+00E6) contains a short segment L<<321.0,251.0>--<321.0,243.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* emacron (U+0113) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<96.0,251.0>--<96.0,243.0>>\n\n\t* Iogonek (U+012E) contains a short segment L<<65.0,-7.0>--<65.0,-7.0>>\n\n\t* Eng (U+014A) contains a short segment B<<289.5,-122.0>-<301.0,-123.0>-<313.0,-123.0>>\n\n\t* oe (U+0153) contains a short segment L<<369.0,251.0>--<369.0,243.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<239.0,-10.0>-<236.0,-10.0>-<233.0,-10.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<321.0,251.0>--<321.0,243.0>>\n\n\t* uni2079 (U+2079) contains a short segment L<<192.0,516.0>--<192.0,516.0>>\n\n\t* uni2089 (U+2089) contains a short segment L<<192.0,74.0>--<192.0,74.0>>\n\n\t* uni20B9 (U+20B9) contains a short segment L<<331.0,531.0>--<331.0,530.0>> \n\n\t* uni20B9 (U+20B9) contains a short segment B<<266.0,530.0>-<266.0,531.0>-<266.0,531.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 3]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 3]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<268.0,0.0>--<123.0,647.0>>/L<<123.0,647.0>--<123.0,0.0>> = 12.631908133557197 \n\n\t* M (U+004D): L<<458.0,0.0>--<458.0,647.0>>/L<<458.0,647.0>--<311.0,0.0>> = 12.800438436224821 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 3]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* comma (U+002C): X=25.0,Y=-1.0 (should be at baseline 0?)\n\n\t* semicolon (U+003B): X=25.0,Y=-1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=-37.0,Y=1.0 (should be at baseline 0?)\n\n\t* t (U+0074): X=97.5,Y=-1.0 (should be at baseline 0?)\n\n\t* paragraph (U+00B6): X=231.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=222.0,Y=720.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=153.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=153.0,Y=724.0 (should be at cap-height 722?)\n\n\t* aring (U+00E5): X=131.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aring (U+00E5): X=245.5,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=178.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=178.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=165.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=165.0,Y=724.0 (should be at cap-height 722?)\n\n\t* gcircumflex (U+011D): X=-37.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=-37.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=-37.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=-37.0,Y=1.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=90.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=90.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=1.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=97.5,Y=-1.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=97.5,Y=-1.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=107.5,Y=-1.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=178.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=178.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uring (U+016F): X=156.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uring (U+016F): X=270.5,Y=723.0 (should be at cap-height 722?)\n\n\t* Uogonek (U+0172): X=161.0,Y=1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=309.0,Y=724.0 (should be at cap-height 722?)\n\n\t* florin (U+0192): X=325.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uni021B (U+021B): X=97.5,Y=-1.0 (should be at baseline 0?)\n\n\t* ring (U+02DA): X=307.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ring (U+02DA): X=421.5,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=329.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=329.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=97.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=211.0,Y=720.0 (should be at cap-height 722?) \n\n\t* Germandbls (U+1E9E): X=101.5,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<319.0,70.5>-<324.0,55.0>-<341.0,55.0>>\n\n\t* M (U+004D) contains a short segment L<<161.0,0.0>--<132.0,0.0>>\n\n\t* y (U+0079) contains a short segment B<<-29.0,-136.5>-<-21.0,-138.0>-<-14.0,-138.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<208.0,440.0>--<200.0,440.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<102.0,-5.0>-<91.0,-2.0>-<84.0,4.0>>\n\n\t* ae (U+00E6) contains a short segment L<<210.0,268.0>--<208.0,254.0>>\n\n\t* yacute (U+00FD) contains a short segment B<<-29.0,-136.5>-<-21.0,-138.0>-<-14.0,-138.0>>\n\n\t* ydieresis (U+00FF) contains a short segment B<<-29.0,-136.5>-<-21.0,-138.0>-<-14.0,-138.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<114.0,-8.0>-<110.0,-8.0>-<106.0,-8.0>>\n\n\t* Eng (U+014A) contains a short segment B<<97.0,-131.0>-<105.0,-132.0>-<113.5,-133.5>>\n\n\t* Eng (U+014A) contains a short segment B<<113.5,-133.5>-<122.0,-135.0>-<130.0,-135.0>>\n\n\t* eng (U+014B) contains a short segment B<<81.0,-131.0>-<89.0,-132.0>-<97.5,-133.5>>\n\n\t* eng (U+014B) contains a short segment B<<97.5,-133.5>-<106.0,-135.0>-<114.0,-135.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<91.5,-108.0>-<100.0,-114.0>-<110.0,-114.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<110.0,-114.0>-<117.0,-114.0>-<126.0,-111.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<126.0,-111.5>-<135.0,-109.0>-<142.0,-105.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<169.0,-114.0>-<176.0,-114.0>-<185.0,-111.5>>\n\n\t* uogonek (U+0173) contains a short segment B<<185.0,-111.5>-<194.0,-109.0>-<201.0,-105.0>>\n\n\t* ycircumflex (U+0177) contains a short segment B<<-29.0,-136.5>-<-21.0,-138.0>-<-14.0,-138.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<210.0,268.0>--<208.0,254.0>> \n\n\t* ygrave (U+1EF3) contains a short segment B<<-29.0,-136.5>-<-21.0,-138.0>-<-14.0,-138.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* paragraph (U+00B6): L<<231.0,723.0>--<292.0,722.0>> -> L<<292.0,722.0>--<398.0,722.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<214.0,255.0>--<282.0,687.0>>/L<<282.0,687.0>--<104.0,255.0>> = 13.448093329824056\n\n\t* AEacute (U+01FC): L<<214.0,255.0>--<282.0,687.0>>/L<<282.0,687.0>--<104.0,255.0>> = 13.448093329824056\n\n\t* Eng (U+014A): L<<171.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<306.0,722.0>> = 13.97639586911254\n\n\t* Eng (U+014A): L<<196.0,19.0>--<141.0,654.0>>/L<<141.0,654.0>--<37.0,0.0>> = 13.985871104659793\n\n\t* G (U+0047): L<<196.0,0.0>--<207.0,101.0>>/B<<207.0,101.0>-<200.0,75.0>-<187.0,49.5>> = 8.85285225978955\n\n\t* Gbreve (U+011E): L<<196.0,0.0>--<207.0,101.0>>/B<<207.0,101.0>-<200.0,75.0>-<187.0,49.5>> = 8.85285225978955\n\n\t* Gcircumflex (U+011C): L<<196.0,0.0>--<207.0,101.0>>/B<<207.0,101.0>-<200.0,75.0>-<187.0,49.5>> = 8.85285225978955\n\n\t* Gcommaaccent (U+0122): L<<196.0,0.0>--<207.0,101.0>>/B<<207.0,101.0>-<200.0,75.0>-<187.0,49.5>> = 8.85285225978955\n\n\t* Gdotaccent (U+0120): L<<196.0,0.0>--<207.0,101.0>>/B<<207.0,101.0>-<200.0,75.0>-<187.0,49.5>> = 8.85285225978955\n\n\t* M (U+004D): L<<132.0,0.0>--<138.0,635.0>>/L<<138.0,635.0>--<37.0,0.0>> = 8.49612140758109\n\n\t* M (U+004D): L<<259.0,0.0>--<360.0,635.0>>/L<<360.0,635.0>--<161.0,0.0>> = 8.362768869809218\n\n\t* N (U+004E): L<<171.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<306.0,722.0>> = 13.97639586911254\n\n\t* N (U+004E): L<<198.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<37.0,0.0>> = 14.016680805676431\n\n\t* Nacute (U+0143): L<<171.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<306.0,722.0>> = 13.97639586911254\n\n\t* Nacute (U+0143): L<<198.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<37.0,0.0>> = 14.016680805676431\n\n\t* Ncaron (U+0147): L<<171.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<306.0,722.0>> = 13.97639586911254\n\n\t* Ncaron (U+0147): L<<198.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<37.0,0.0>> = 14.016680805676431\n\n\t* Ncommaaccent (U+0145): L<<171.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<306.0,722.0>> = 13.97639586911254\n\n\t* Ncommaaccent (U+0145): L<<198.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<37.0,0.0>> = 14.016680805676431\n\n\t* Ntilde (U+00D1): L<<171.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<306.0,722.0>> = 13.97639586911254\n\n\t* Ntilde (U+00D1): L<<198.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<37.0,0.0>> = 14.016680805676431\n\n\t* W (U+0057): L<<125.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<240.0,722.0>> = 10.760782576323427\n\n\t* W (U+0057): L<<215.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<84.0,0.0>> = 11.674856427669592\n\n\t* W (U+0057): L<<286.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<404.0,722.0>> = 11.099573105048746\n\n\t* Wacute (U+1E82): L<<125.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<240.0,722.0>> = 10.760782576323427\n\n\t* Wacute (U+1E82): L<<215.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<84.0,0.0>> = 11.674856427669592\n\n\t* Wacute (U+1E82): L<<286.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<404.0,722.0>> = 11.099573105048746\n\n\t* Wcircumflex (U+0174): L<<125.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<240.0,722.0>> = 10.760782576323427\n\n\t* Wcircumflex (U+0174): L<<215.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<84.0,0.0>> = 11.674856427669592\n\n\t* Wcircumflex (U+0174): L<<286.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<404.0,722.0>> = 11.099573105048746\n\n\t* Wdieresis (U+1E84): L<<125.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<240.0,722.0>> = 10.760782576323427\n\n\t* Wdieresis (U+1E84): L<<215.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<84.0,0.0>> = 11.674856427669592\n\n\t* Wdieresis (U+1E84): L<<286.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<404.0,722.0>> = 11.099573105048746\n\n\t* Wgrave (U+1E80): L<<125.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<240.0,722.0>> = 10.760782576323427\n\n\t* Wgrave (U+1E80): L<<215.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<84.0,0.0>> = 11.674856427669592\n\n\t* Wgrave (U+1E80): L<<286.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<404.0,722.0>> = 11.099573105048746\n\n\t* a (U+0061): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* aacute (U+00E1): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* abreve (U+0103): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* acircumflex (U+00E2): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* adieresis (U+00E4): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* agrave (U+00E0): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* amacron (U+0101): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* aring (U+00E5): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* atilde (U+00E3): B<<146.0,0.0>-<149.0,31.0>-<153.0,54.0>>/B<<153.0,54.0>-<143.0,30.0>-<121.0,11.0>> = 12.754058004956034\n\n\t* four (U+0034): L<<152.0,232.0>--<220.0,661.0>>/L<<220.0,661.0>--<44.0,232.0>> = 13.29929012602368\n\n\t* naira (U+20A6): L<<191.0,0.0>--<164.0,658.0>>/L<<164.0,658.0>--<60.0,0.0>> = 11.331293738145234\n\n\t* naira (U+20A6): L<<195.0,722.0>--<215.0,187.0>>/L<<215.0,187.0>--<299.0,722.0>> = 11.064026024100045\n\n\t* onequarter (U+00BC): L<<315.0,132.0>--<349.0,346.0>>/L<<349.0,346.0>--<263.0,132.0>> = 12.866060191013302\n\n\t* threequarters (U+00BE): L<<320.0,132.0>--<354.0,346.0>>/L<<354.0,346.0>--<268.0,132.0>> = 12.866060191013302\n\n\t* trademark (U+2122): L<<283.0,427.0>--<273.0,693.0>>/L<<273.0,693.0>--<231.0,427.0>> = 11.125589403996878\n\n\t* trademark (U+2122): L<<358.0,427.0>--<400.0,693.0>>/L<<400.0,693.0>--<306.0,427.0>> = 10.48993899446728\n\n\t* uni2074 (U+2074): L<<130.0,454.0>--<164.0,668.0>>/L<<164.0,668.0>--<78.0,454.0>> = 12.866060191013302\n\n\t* uni2084 (U+2084): L<<60.0,12.0>--<94.0,226.0>>/L<<94.0,226.0>--<8.0,12.0>> = 12.866060191013302\n\n\t* won (U+20A9): L<<141.0,722.0>--<90.0,140.0>>/L<<90.0,140.0>--<233.0,722.0>> = 8.796399998694884\n\n\t* won (U+20A9): L<<188.0,0.0>--<233.0,600.0>>/L<<233.0,600.0>--<86.0,0.0>> = 9.47714735664722 \n\n\t* won (U+20A9): L<<271.0,722.0>--<228.0,140.0>>/L<<228.0,140.0>--<360.0,722.0>> = 8.55321733469361 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 5]],
                    ],
                    logs: [
                        {
                            message:
                                'This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: asterisk\tContours detected: 3\tExpected: 1 or 4 \n\n\t- Glyph name: asterisk\tContours detected: 3\tExpected: 1 or 4\n [code: contour-count]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'WARN',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 5]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* f (U+0066): X=243.0,Y=723.0 (should be at cap-height 722?)\n\n\t* t (U+0074): X=188.0,Y=-2.0 (should be at baseline 0?)\n\n\t* onesuperior (U+00B9): X=104.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=127.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=104.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=127.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=104.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=127.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=208.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=130.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=130.0,Y=724.0 (should be at cap-height 722?)\n\n\t* aring (U+00E5): X=174.0,Y=720.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=162.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=162.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=145.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=145.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=41.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=41.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=66.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=188.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=188.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=203.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=159.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=159.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uring (U+016F): X=203.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uogonek (U+0173): X=302.0,Y=1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=341.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni021B (U+021B): X=188.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ring (U+02DA): X=300.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=256.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=256.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=248.0,Y=2.0 (should be at baseline 0?)\n\n\t* quotesinglbase (U+201A): X=94.0,Y=-1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=94.0,Y=-1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=206.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=104.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=127.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=104.0,Y=724.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=127.0,Y=724.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 5]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* asterisk (U+002A) contains a short segment L<<144.0,542.0>--<146.0,543.0>>\n\n\t* asterisk (U+002A) contains a short segment L<<129.0,630.0>--<128.0,628.0>>\n\n\t* asterisk (U+002A) contains a short segment L<<180.0,622.0>--<180.0,624.0>>\n\n\t* asterisk (U+002A) contains a short segment L<<106.0,580.0>--<107.0,579.0>>\n\n\t* M (U+004D) contains a short segment L<<285.0,0.0>--<255.0,0.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<199.0,419.0>--<189.0,419.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<173.0,33.0>-<184.0,31.0>-<193.5,29.5>>\n\n\t* germandbls (U+00DF) contains a short segment B<<193.5,29.5>-<203.0,28.0>-<213.0,28.0>>\n\n\t* ae (U+00E6) contains a short segment L<<293.0,261.0>--<293.0,245.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<365.0,-135.0>-<373.0,-135.0>-<381.0,-133.0>>\n\n\t* Eng (U+014A) contains a short segment B<<308.0,-175.0>-<293.0,-175.0>-<282.0,-174.0>>\n\n\t* Eng (U+014A) contains a short segment B<<282.0,-174.0>-<271.0,-173.0>-<257.0,-169.0>>\n\n\t* Eng (U+014A) contains a short segment B<<257.0,-134.0>-<272.0,-137.0>-<282.0,-138.0>>\n\n\t* Eng (U+014A) contains a short segment B<<282.0,-138.0>-<292.0,-139.0>-<302.0,-139.0>>\n\n\t* oe (U+0153) contains a short segment L<<341.0,261.0>--<341.0,245.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<253.0,-135.0>-<261.0,-135.0>-<269.5,-133.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<269.5,-133.0>-<278.0,-131.0>-<288.0,-128.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<265.0,-162.0>-<254.0,-165.0>-<243.0,-165.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<229.0,-10.0>-<225.0,-10.0>-<220.0,-10.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<314.0,-135.0>-<322.0,-135.0>-<330.0,-133.0>> \n\n\t* aeacute (U+01FD) contains a short segment L<<293.0,261.0>--<293.0,245.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 5]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 5]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<255.0,0.0>--<104.0,661.0>>/L<<104.0,661.0>--<104.0,0.0>> = 12.867940501498474\n\n\t* M (U+004D): L<<437.0,0.0>--<437.0,661.0>>/L<<437.0,661.0>--<285.0,0.0>> = 12.95029472576656 \n\n\t* eth (U+00F0): B<<241.0,504.5>-<265.0,489.0>-<282.0,461.0>>/B<<282.0,461.0>-<264.0,514.0>-<237.5,558.5>> = 12.505081346535185 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 5]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 6]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 6]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=530.0,Y=-2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=261.0,Y=723.0 (should be at cap-height 722?)\n\n\t* y (U+0079): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* y (U+0079): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=196.0,Y=1.0 (should be at baseline 0?)\n\n\t* yacute (U+00FD): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* yacute (U+00FD): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ycircumflex (U+0177): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ycircumflex (U+0177): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=372.0,Y=720.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=441.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=338.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ygrave (U+1EF3): X=163.0,Y=-1.0 (should be at baseline 0?) \n\n\t* ygrave (U+1EF3): X=163.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 6]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* e (U+0065) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<195.0,355.0>--<186.0,355.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<220.0,56.5>-<230.0,56.0>-<240.0,56.0>>\n\n\t* ae (U+00E6) contains a short segment L<<345.0,243.0>--<345.0,242.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* emacron (U+0113) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<111.0,243.0>--<111.0,242.0>>\n\n\t* oe (U+0153) contains a short segment L<<391.0,243.0>--<391.0,242.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<345.0,243.0>--<345.0,242.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<157.0,344.0>-<157.0,333.0>-<157.0,323.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 6]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 6]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<279.0,0.0>--<139.0,636.0>>/L<<139.0,636.0>--<139.0,0.0>> = 12.414292646085597\n\n\t* M (U+004D): L<<476.0,0.0>--<476.0,636.0>>/L<<476.0,636.0>--<333.0,0.0>> = 12.671808525817601\n\n\t* trademark (U+2122): L<<372.0,413.0>--<305.0,677.0>>/L<<305.0,677.0>--<305.0,413.0>> = 14.2403237429406 \n\n\t* trademark (U+2122): L<<485.0,413.0>--<485.0,677.0>>/L<<485.0,677.0>--<418.0,413.0>> = 14.2403237429406 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 6]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 7]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 7]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* bracketleft (U+005B): X=226.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=329.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=15.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=118.0,Y=1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=368.0,Y=720.0 (should be at cap-height 722?)\n\n\t* t (U+0074): X=166.5,Y=-2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=322.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=367.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=15.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=60.0,Y=1.0 (should be at baseline 0?)\n\n\t* questiondown (U+00BF): X=544.0,Y=2.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=331.0,Y=940.5 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=329.0,Y=940.5 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=353.0,Y=940.5 (should be at ascender 940?)\n\n\t* Oslash (U+00D8): X=276.5,Y=1.5 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=483.5,Y=720.5 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=283.0,Y=2.0 (should be at baseline 0?)\n\n\t* Itilde (U+0128): X=130.0,Y=940.5 (should be at ascender 940?)\n\n\t* oe (U+0153): X=518.0,Y=2.0 (should be at baseline 0?)\n\n\t* oe (U+0153): X=371.5,Y=2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=166.5,Y=-2.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=166.5,Y=-2.0 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=329.0,Y=940.5 (should be at ascender 940?)\n\n\t* Uring (U+016E): X=215.0,Y=942.0 (should be at ascender 940?)\n\n\t* Uring (U+016E): X=497.0,Y=942.0 (should be at ascender 940?)\n\n\t* Uring (U+016E): X=356.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=276.5,Y=1.5 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=483.5,Y=720.5 (should be at cap-height 722?)\n\n\t* uni021B (U+021B): X=166.5,Y=-2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=418.0,Y=721.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=418.0,Y=1.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=40.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=682.0,Y=721.0 (should be at cap-height 722?) \n\n\t* uni2085 (U+2085): X=218.5,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 7]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<665.5,159.5>-<673.0,147.0>-<690.0,147.0>>\n\n\t* g (U+0067) contains a short segment B<<509.0,361.0>-<509.0,358.0>-<509.0,354.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<220.0,316.0>--<212.0,316.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<283.0,149.0>-<293.0,148.0>-<300.5,147.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<300.5,147.0>-<308.0,146.0>-<317.0,146.0>>\n\n\t* ae (U+00E6) contains a short segment L<<506.0,220.0>--<506.0,219.0>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<509.0,361.0>-<509.0,358.0>-<509.0,354.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<509.0,361.0>-<509.0,358.0>-<509.0,354.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<509.0,361.0>-<509.0,358.0>-<509.0,354.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<509.0,361.0>-<509.0,358.0>-<509.0,354.0>>\n\n\t* Eng (U+014A) contains a short segment B<<389.0,-29.0>-<400.0,-31.0>-<406.5,-31.5>>\n\n\t* Eng (U+014A) contains a short segment B<<406.5,-31.5>-<413.0,-32.0>-<421.0,-32.0>>\n\n\t* Eng (U+014A) contains a short segment B<<421.0,-32.0>-<430.0,-32.0>-<442.5,-28.5>>\n\n\t* eng (U+014B) contains a short segment B<<255.0,-29.0>-<266.0,-31.0>-<272.5,-31.5>>\n\n\t* eng (U+014B) contains a short segment B<<272.5,-31.5>-<279.0,-32.0>-<287.0,-32.0>>\n\n\t* tbar (U+0167) contains a short segment L<<302.0,209.0>--<302.0,194.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<421.0,-84.0>-<431.0,-84.0>-<444.0,-81.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<506.0,220.0>--<506.0,219.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<55.0,348.0>-<55.0,351.0>-<55.0,355.0>> \n\n\t* peso (U+20B1) contains a short segment B<<709.0,489.0>-<709.0,480.0>-<709.0,471.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 7]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 7]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 7]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 8]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 8]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=580.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=293.0,Y=723.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=19.5,Y=-1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=119.5,Y=1.5 (should be at baseline 0?)\n\n\t* t (U+0074): X=130.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=123.5,Y=720.0 (should be at cap-height 722?)\n\n\t* braceright (U+007D): X=182.5,Y=720.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=166.0,Y=-2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=294.0,Y=1.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=265.0,Y=724.0 (should be at cap-height 722?)\n\n\t* gcircumflex (U+011D): X=19.5,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=119.5,Y=1.5 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=19.5,Y=-1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=119.5,Y=1.5 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=19.5,Y=-1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=119.5,Y=1.5 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=19.5,Y=-1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=119.5,Y=1.5 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=130.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=130.0,Y=1.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=144.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni021B (U+021B): X=130.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=304.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=304.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=107.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=107.0,Y=-1.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=91.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 8]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<548.0,137.5>-<554.0,121.0>-<574.0,121.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<205.0,340.0>--<194.0,340.0>>\n\n\t* Eng (U+014A) contains a short segment B<<293.0,-71.0>-<304.0,-73.0>-<312.5,-73.5>>\n\n\t* Eng (U+014A) contains a short segment B<<312.5,-73.5>-<321.0,-74.0>-<330.0,-74.0>>\n\n\t* eng (U+014B) contains a short segment B<<236.5,-73.5>-<245.0,-74.0>-<254.0,-74.0>>\n\n\t* uni2076 (U+2076) contains a short segment L<<120.0,471.0>--<120.0,471.0>> \n\n\t* uni2086 (U+2086) contains a short segment L<<120.0,39.0>--<120.0,39.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 8]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 8]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<288.0,0.0>--<169.0,547.0>>/L<<169.0,547.0>--<169.0,0.0>> = 12.273470719251376\n\n\t* M (U+004D): L<<491.0,0.0>--<491.0,547.0>>/L<<491.0,547.0>--<371.0,0.0>> = 12.37344475211061\n\n\t* trademark (U+2122): L<<402.0,401.0>--<343.0,643.0>>/L<<343.0,643.0>--<343.0,401.0>> = 13.701510492346522 \n\n\t* trademark (U+2122): L<<514.0,401.0>--<514.0,643.0>>/L<<514.0,643.0>--<456.0,401.0>> = 13.477822753241302 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 8]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 9]],
                    ],
                    logs: [
                        {
                            message:
                                'This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: peso\tContours detected: 3\tExpected: 1, 2 or 4\n [code: contour-count]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'WARN',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 9]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=489.0,Y=-2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=335.0,Y=721.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=3.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=405.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=512.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=3.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=250.0,Y=2.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=209.5,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=30.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=225.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=225.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 9]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* sterling (U+00A3) contains a short segment B<<191.0,423.0>-<191.0,416.0>-<191.0,405.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<210.0,355.0>--<202.0,355.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<343.0,-121.0>-<351.0,-121.0>-<359.0,-119.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<359.0,-119.0>-<367.0,-117.0>-<375.0,-114.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<191.0,-10.0>-<188.0,-10.0>-<184.0,-10.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<239.0,-121.0>-<247.0,-121.0>-<255.5,-119.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<255.5,-119.0>-<264.0,-117.0>-<272.0,-114.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<305.0,-121.0>-<313.0,-121.0>-<321.5,-119.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<321.5,-119.0>-<330.0,-117.0>-<338.0,-114.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<181.0,402.0>-<181.0,398.0>-<180.0,393.0>>\n\n\t* peso (U+20B1) contains a short segment L<<58.0,477.0>--<58.0,477.0>> \n\n\t* peso (U+20B1) contains a short segment L<<550.0,477.0>--<550.0,477.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 9]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 9]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<238.0,0.0>--<200.0,636.0>>/L<<200.0,636.0>--<99.0,0.0>> = 12.442774663428873\n\n\t* M (U+004D): L<<435.0,0.0>--<536.0,636.0>>/L<<536.0,636.0>--<292.0,0.0>> = 11.965694091207004 \n\n\t* trademark (U+2122): L<<510.0,413.0>--<551.0,677.0>>/L<<551.0,677.0>--<443.0,413.0>> = 13.421336436139283 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 9]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 10]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 10]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=514.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=426.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=350.0,Y=720.0 (should be at cap-height 722?)\n\n\t* braceright (U+007D): X=233.5,Y=723.5 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=125.0,Y=2.0 (should be at baseline 0?)\n\n\t* oslash (U+00F8): X=-12.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=303.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tcaron (U+0165): X=417.0,Y=724.0 (should be at cap-height 722?)\n\n\t* oslashacute (U+01FF): X=-12.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=243.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=243.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 10]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* sterling (U+00A3) contains a short segment B<<106.0,410.0>-<106.0,419.0>-<106.0,427.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<218.0,427.0>-<218.0,420.0>-<218.0,410.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<214.0,348.0>--<204.0,348.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<389.0,-111.0>-<396.0,-111.0>-<403.5,-109.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<403.5,-109.0>-<411.0,-107.0>-<418.0,-105.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<307.0,-111.0>-<314.0,-111.0>-<321.5,-109.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<321.5,-109.0>-<329.0,-107.0>-<336.0,-105.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<270.0,-111.0>-<277.0,-111.0>-<284.5,-109.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<205.0,-10.0>-<200.0,-10.0>-<195.0,-10.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<256.0,-111.0>-<263.0,-111.0>-<270.5,-109.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<270.5,-109.0>-<278.0,-107.0>-<285.0,-105.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<335.0,-111.0>-<342.0,-111.0>-<349.5,-109.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<349.5,-109.0>-<357.0,-107.0>-<364.0,-105.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<195.0,345.0>-<194.0,336.0>-<192.0,328.0>> \n\n\t* peso (U+20B1) contains a short segment B<<534.0,540.0>-<534.0,536.0>-<534.0,530.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 10]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 10]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<243.0,0.0>--<207.0,590.0>>/L<<207.0,590.0>--<114.0,0.0>> = 12.449350278610689\n\n\t* M (U+004D): L<<442.0,0.0>--<536.0,590.0>>/L<<536.0,590.0>--<311.0,0.0>> = 11.822248902828317 \n\n\t* trademark (U+2122): L<<524.0,407.0>--<564.0,660.0>>/L<<564.0,660.0>--<461.0,407.0>> = 13.167701575243628 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 10]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 11]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 11]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=561.0,Y=-1.0 (should be at baseline 0?)\n\n\t* at (U+0040): X=595.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* t (U+0074): X=104.5,Y=1.5 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=273.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=358.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=403.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=350.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=67.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=0.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=104.5,Y=1.5 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=104.5,Y=1.5 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=119.0,Y=1.5 (should be at baseline 0?)\n\n\t* uni021B (U+021B): X=104.5,Y=1.5 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=309.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=166.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 11]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* sterling (U+00A3) contains a short segment B<<97.0,418.0>-<97.0,426.0>-<97.0,433.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<267.0,434.0>-<267.0,426.0>-<267.0,418.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<222.0,334.0>--<210.0,334.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<477.0,-91.0>-<482.0,-91.0>-<487.5,-89.5>>\n\n\t* Aogonek (U+0104) contains a short segment B<<487.5,-89.5>-<493.0,-88.0>-<499.0,-87.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<363.0,-91.0>-<368.0,-91.0>-<374.0,-89.5>>\n\n\t* aogonek (U+0105) contains a short segment B<<374.0,-89.5>-<380.0,-88.0>-<386.0,-87.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<325.0,-91.0>-<330.0,-91.0>-<335.0,-89.5>>\n\n\t* eogonek (U+0119) contains a short segment B<<335.0,-89.5>-<340.0,-88.0>-<347.0,-87.0>>\n\n\t* Iogonek (U+012E) contains a short segment B<<142.0,-91.0>-<147.0,-91.0>-<152.5,-89.5>>\n\n\t* Iogonek (U+012E) contains a short segment B<<152.5,-89.5>-<158.0,-88.0>-<165.0,-87.0>>\n\n\t* iogonek (U+012F) contains a short segment B<<127.0,-91.0>-<132.0,-91.0>-<137.5,-89.5>>\n\n\t* Eng (U+014A) contains a short segment B<<256.0,-55.0>-<264.0,-57.0>-<272.0,-58.0>>\n\n\t* Eng (U+014A) contains a short segment B<<272.0,-58.0>-<280.0,-59.0>-<286.0,-59.0>>\n\n\t* eng (U+014B) contains a short segment B<<175.0,-55.0>-<183.0,-57.0>-<191.0,-58.0>>\n\n\t* eng (U+014B) contains a short segment B<<191.0,-58.0>-<199.0,-59.0>-<205.0,-59.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<287.0,-91.0>-<292.0,-91.0>-<297.5,-89.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<297.5,-89.5>-<303.0,-88.0>-<309.0,-87.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<391.0,-91.0>-<396.0,-91.0>-<401.5,-89.5>>\n\n\t* uogonek (U+0173) contains a short segment B<<401.5,-89.5>-<407.0,-88.0>-<413.0,-87.0>> \n\n\t* peso (U+20B1) contains a short segment L<<602.0,512.0>--<602.0,509.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 11]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 11]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<252.0,0.0>--<222.0,503.0>>/L<<222.0,503.0>--<142.0,0.0>> = 12.450157884406833\n\n\t* M (U+004D): L<<456.0,0.0>--<536.0,503.0>>/L<<536.0,503.0>--<347.0,0.0>> = 11.556527408919342\n\n\t* trademark (U+2122): L<<439.0,396.0>--<420.0,628.0>>/L<<420.0,628.0>--<383.0,396.0>> = 13.74325681761742 \n\n\t* trademark (U+2122): L<<551.0,396.0>--<588.0,628.0>>/L<<588.0,628.0>--<497.0,396.0>> = 12.355787771723229 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 11]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message:
                                'This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: peso\tContours detected: 3\tExpected: 1, 2 or 4\n [code: contour-count]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'WARN',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=477.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=394.0,Y=2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=326.0,Y=721.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=217.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=217.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=217.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=305.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=208.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=208.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=237.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=237.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=220.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=220.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aogonek (U+0105): X=239.0,Y=1.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=112.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=112.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=26.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=25.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=21.0,Y=-1.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=234.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=234.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uogonek (U+0173): X=267.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tilde (U+02DC): X=318.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=318.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=231.0,Y=1.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=190.0,Y=-2.0 (should be at baseline 0?)\n\n\t* quotesinglbase (U+201A): X=82.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=82.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=221.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=217.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=179.0,Y=724.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=217.0,Y=724.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* e (U+0065) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<215.0,375.0>--<207.0,375.0>>\n\n\t* ae (U+00E6) contains a short segment L<<321.0,251.0>--<321.0,250.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* emacron (U+0113) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<188.0,-9.0>-<181.0,-10.0>-<174.0,-10.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<95.0,251.0>--<95.0,250.0>>\n\n\t* oe (U+0153) contains a short segment L<<367.0,251.0>--<367.0,250.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<220.0,-128.0>-<228.0,-128.0>-<237.0,-125.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<237.0,-125.5>-<246.0,-123.0>-<254.0,-119.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<281.0,-128.0>-<289.0,-128.0>-<298.0,-125.5>>\n\n\t* aeacute (U+01FD) contains a short segment L<<321.0,251.0>--<321.0,250.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<170.0,403.0>-<169.0,396.0>-<168.0,389.0>>\n\n\t* peso (U+20B1) contains a short segment L<<545.0,513.0>--<545.0,513.0>>\n\n\t* peso (U+20B1) contains a short segment L<<545.0,513.0>--<544.0,508.0>>\n\n\t* peso (U+20B1) contains a short segment L<<544.0,508.0>--<544.0,507.0>> \n\n\t* peso (U+20B1) contains a short segment L<<544.0,507.0>--<544.0,507.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* peso (U+20B1): L<<57.0,460.0>--<65.0,508.0>> -> L<<65.0,508.0>--<73.0,560.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<227.0,0.0>--<186.0,647.0>>/L<<186.0,647.0>--<83.0,0.0>> = 12.671322218682986\n\n\t* M (U+004D): L<<418.0,0.0>--<520.0,647.0>>/L<<520.0,647.0>--<271.0,0.0>> = 12.090394739400868 \n\n\t* trademark (U+2122): L<<483.0,415.0>--<525.0,685.0>>/L<<525.0,685.0>--<413.0,415.0>> = 13.687583442745158 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 13]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 13]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=327.0,Y=724.0 (should be at cap-height 722?)\n\n\t* dollar (U+0024): X=327.0,Y=724.0 (should be at cap-height 722?)\n\n\t* dollar (U+0024): X=372.0,Y=720.0 (should be at cap-height 722?)\n\n\t* dollar (U+0024): X=258.0,Y=-2.0 (should be at baseline 0?)\n\n\t* h (U+0068): X=275.0,Y=498.0 (should be at x-height 500?)\n\n\t* m (U+006D): X=272.5,Y=498.0 (should be at x-height 500?)\n\n\t* m (U+006D): X=399.0,Y=498.0 (should be at x-height 500?)\n\n\t* n (U+006E): X=275.0,Y=498.0 (should be at x-height 500?)\n\n\t* u (U+0075): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=243.5,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=211.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=236.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=211.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=236.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=211.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=236.0,Y=723.0 (should be at cap-height 722?)\n\n\t* questiondown (U+00BF): X=51.0,Y=-1.5 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=433.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=289.0,Y=720.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=244.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=244.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=282.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=282.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=262.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=262.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ugrave (U+00F9): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* uacute (U+00FA): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* ucircumflex (U+00FB): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* udieresis (U+00FC): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=129.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=129.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=276.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=276.0,Y=724.0 (should be at cap-height 722?)\n\n\t* umacron (U+016B): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* ubreve (U+016D): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* Uring (U+016E): X=387.0,Y=941.0 (should be at ascender 940?)\n\n\t* uring (U+016F): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* uhungarumlaut (U+0171): X=241.0,Y=2.0 (should be at baseline 0?)\n\n\t* Uogonek (U+0172): X=356.0,Y=2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=243.0,Y=2.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=501.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=320.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=320.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=395.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2089 (U+2089): X=243.5,Y=0.5 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=211.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=236.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=211.0,Y=723.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=236.0,Y=723.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 13]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* dollar (U+0024) contains a short segment L<<327.0,724.0>--<327.0,724.0>>\n\n\t* M (U+004D) contains a short segment L<<328.0,0.0>--<296.0,0.0>>\n\n\t* e (U+0065) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<236.0,358.0>--<227.0,358.0>>\n\n\t* ae (U+00E6) contains a short segment L<<380.0,254.0>--<379.0,247.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* emacron (U+0113) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<93.0,254.0>--<92.0,247.0>>\n\n\t* oe (U+0153) contains a short segment L<<439.0,254.0>--<438.0,247.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<380.0,254.0>--<379.0,247.0>>\n\n\t* naira (U+20A6) contains a short segment L<<454.0,0.0>--<425.0,0.0>> \n\n\t* peseta (U+20A7) contains a short segment B<<594.0,556.0>-<594.0,552.0>-<594.0,549.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 13]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 13]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 13]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 14]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 14]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=308.0,Y=720.0 (should be at cap-height 722?)\n\n\t* ampersand (U+0026): X=533.0,Y=1.5 (should be at baseline 0?)\n\n\t* at (U+0040): X=80.0,Y=-1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=-12.5,Y=1.5 (should be at baseline 0?)\n\n\t* g (U+0067): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* r (U+0072): X=330.0,Y=501.5 (should be at x-height 503?)\n\n\t* t (U+0074): X=125.5,Y=1.5 (should be at baseline 0?)\n\n\t* onesuperior (U+00B9): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=394.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=449.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=-12.5,Y=1.5 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=-12.5,Y=1.5 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=-12.5,Y=1.5 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=-12.5,Y=1.5 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=125.5,Y=1.5 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=125.5,Y=1.5 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=145.5,Y=1.5 (should be at baseline 0?)\n\n\t* florin (U+0192): X=45.0,Y=-1.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=482.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=626.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni021B (U+021B): X=125.5,Y=1.5 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=346.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=281.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=279.5,Y=0.5 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=808.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=365.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=510.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=68.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 14]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* paragraph (U+00B6) contains a short segment L<<213.0,336.0>--<203.0,336.0>> \n\n\t* eogonek (U+0119) contains a short segment B<<249.0,-12.0>-<244.0,-12.0>-<238.0,-12.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 14]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 14]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 14]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* t (U+0074): X=109.5,Y=1.5 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=297.0,Y=2.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=325.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=482.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=600.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=325.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=325.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=482.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=600.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=325.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=345.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=502.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=620.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=345.0,Y=941.0 (should be at ascender 940?)\n\n\t* eogonek (U+0119): X=342.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Itilde (U+0128): X=167.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=324.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=442.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=167.0,Y=941.0 (should be at ascender 940?)\n\n\t* oe (U+0153): X=305.5,Y=2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=109.5,Y=1.5 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=109.5,Y=1.5 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=123.5,Y=1.5 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=319.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=476.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=594.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=319.0,Y=941.0 (should be at ascender 940?)\n\n\t* uni021B (U+021B): X=109.5,Y=1.5 (should be at baseline 0?) \n\n\t* baht (U+0E3F): X=327.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<586.0,157.0>-<593.0,145.0>-<606.0,145.0>>\n\n\t* f (U+0066) contains a short segment B<<363.5,596.5>-<357.0,597.0>-<351.0,597.0>>\n\n\t* g (U+0067) contains a short segment B<<159.0,171.0>-<159.0,161.0>-<168.5,157.0>>\n\n\t* j (U+006A) contains a short segment B<<-86.0,-39.0>-<-80.0,-40.0>-<-75.0,-40.5>>\n\n\t* j (U+006A) contains a short segment B<<-75.0,-40.5>-<-70.0,-41.0>-<-66.0,-41.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<47.0,391.0>--<59.0,391.0>>\n\n\t* braceright (U+007D) contains a short segment L<<310.0,271.0>--<298.0,271.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<105.0,276.0>-<105.0,283.0>-<105.0,290.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<92.0,423.0>-<92.0,429.0>-<92.0,436.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<294.0,438.0>-<294.0,431.0>-<294.0,423.0>>\n\n\t* sterling (U+00A3) contains a short segment L<<298.0,290.0>--<298.0,285.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<226.0,327.0>--<213.0,327.0>>\n\n\t* oslash (U+00F8) contains a short segment B<<318.0,277.0>-<318.0,277.0>-<318.0,277.5>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<159.0,171.0>-<159.0,161.0>-<168.5,157.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<159.0,171.0>-<159.0,161.0>-<168.5,157.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<159.0,171.0>-<159.0,161.0>-<168.5,157.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<159.0,171.0>-<159.0,161.0>-<168.5,157.0>>\n\n\t* ij (U+0133) contains a short segment B<<166.0,-39.0>-<172.0,-40.0>-<177.0,-40.5>>\n\n\t* ij (U+0133) contains a short segment B<<177.0,-40.5>-<182.0,-41.0>-<186.0,-41.0>>\n\n\t* jcircumflex (U+0135) contains a short segment B<<-86.0,-39.0>-<-80.0,-40.0>-<-75.0,-40.5>>\n\n\t* jcircumflex (U+0135) contains a short segment B<<-75.0,-40.5>-<-70.0,-41.0>-<-66.0,-41.0>>\n\n\t* Eng (U+014A) contains a short segment B<<273.0,-39.0>-<280.0,-40.0>-<284.5,-40.5>>\n\n\t* Eng (U+014A) contains a short segment B<<284.5,-40.5>-<289.0,-41.0>-<293.0,-41.0>>\n\n\t* eng (U+014B) contains a short segment B<<186.0,-39.0>-<192.0,-40.0>-<197.0,-40.5>>\n\n\t* eng (U+014B) contains a short segment B<<197.0,-40.5>-<202.0,-41.0>-<206.0,-41.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<281.0,-59.0>-<281.0,-67.0>-<286.5,-73.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<286.5,-73.5>-<292.0,-80.0>-<304.0,-80.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<304.0,-80.0>-<311.0,-80.0>-<323.0,-77.0>>\n\n\t* oslashacute (U+01FF) contains a short segment B<<318.0,277.0>-<318.0,277.0>-<318.0,277.5>>\n\n\t* uni0237 (U+0237) contains a short segment B<<-86.0,-39.0>-<-80.0,-40.0>-<-75.0,-40.5>> \n\n\t* uni0237 (U+0237) contains a short segment B<<-75.0,-40.5>-<-70.0,-41.0>-<-66.0,-41.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* oslash (U+00F8): L<<197.0,287.0>--<190.0,240.0>> -> L<<190.0,240.0>--<189.0,235.0>> \n\n\t* oslashacute (U+01FF): L<<197.0,287.0>--<190.0,240.0>> -> L<<190.0,240.0>--<189.0,235.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<257.0,0.0>--<230.0,458.0>>/L<<230.0,458.0>--<158.0,0.0>> = 12.307872269398747\n\n\t* M (U+004D): L<<464.0,0.0>--<536.0,458.0>>/L<<536.0,458.0>--<366.0,0.0>> = 11.429792134541183\n\n\t* trademark (U+2122): L<<454.0,391.0>--<437.0,612.0>>/L<<437.0,612.0>--<402.0,391.0>> = 13.397956400834797 \n\n\t* trademark (U+2122): L<<565.0,391.0>--<601.0,612.0>>/L<<601.0,612.0>--<516.0,391.0>> = 11.78552480171275 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 16]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 16]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* t (U+0074): X=130.0,Y=1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=264.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=130.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=130.0,Y=1.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=150.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni021B (U+021B): X=130.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=471.0,Y=720.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=357.0,Y=1.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=138.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=705.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=298.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=296.5,Y=2.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=39.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 16]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* sterling (U+00A3) contains a short segment B<<122.0,418.0>-<122.0,424.0>-<122.0,430.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<273.0,429.0>-<273.0,424.0>-<273.0,418.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<219.0,329.0>--<210.0,329.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<258.0,-12.0>-<252.0,-12.0>-<246.0,-12.0>>\n\n\t* Eng (U+014A) contains a short segment B<<350.5,-69.0>-<364.0,-71.0>-<376.0,-71.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<311.0,-78.0>-<311.0,-90.0>-<319.0,-98.5>>\n\n\t* Euro (U+20AC) contains a short segment B<<243.0,334.0>-<243.0,332.0>-<243.0,331.0>> \n\n\t* peso (U+20B1) contains a short segment B<<670.0,523.0>-<670.0,516.0>-<670.0,509.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 16]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 16]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 16]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 17]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 17]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=470.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=277.0,Y=1.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=161.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=150.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=214.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=8.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=72.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=222.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=245.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=7.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=30.0,Y=2.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=17.0,Y=1.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=420.0,Y=721.0 (should be at cap-height 722?)\n\n\t* gcircumflex (U+011D): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=17.0,Y=1.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=420.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=151.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2087 (U+2087): X=181.0,Y=0.5 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=25.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=106.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=212.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=323.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 17]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<481.0,131.0>-<486.0,117.0>-<500.0,117.0>>\n\n\t* j (U+006A) contains a short segment B<<-22.0,-80.5>-<-18.0,-81.0>-<-12.0,-81.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<22.0,384.0>--<30.0,384.0>>\n\n\t* braceright (U+007D) contains a short segment L<<230.0,298.0>--<222.0,298.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<203.0,352.0>--<191.0,352.0>>\n\n\t* ij (U+0133) contains a short segment B<<165.0,-80.5>-<169.0,-81.0>-<175.0,-81.0>>\n\n\t* Eng (U+014A) contains a short segment B<<214.0,-76.0>-<222.0,-77.0>-<226.5,-77.5>>\n\n\t* Eng (U+014A) contains a short segment B<<226.5,-77.5>-<231.0,-78.0>-<238.0,-78.0>>\n\n\t* eng (U+014B) contains a short segment B<<183.0,-76.0>-<191.0,-77.0>-<195.5,-77.5>>\n\n\t* eng (U+014B) contains a short segment B<<195.5,-77.5>-<200.0,-78.0>-<206.0,-78.0>> \n\n\t* Germandbls (U+1E9E) contains a short segment B<<215.5,103.0>-<225.0,100.0>-<234.0,100.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 17]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 17]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<260.0,270.0>--<260.0,621.0>>/L<<260.0,621.0>--<173.0,270.0>> = 13.920960364920752\n\n\t* AEacute (U+01FC): L<<260.0,270.0>--<260.0,621.0>>/L<<260.0,621.0>--<173.0,270.0>> = 13.920960364920752\n\n\t* M (U+004D): L<<217.0,0.0>--<141.0,533.0>>/L<<141.0,533.0>--<141.0,0.0>> = 8.115052241680186\n\n\t* M (U+004D): L<<375.0,0.0>--<375.0,533.0>>/L<<375.0,533.0>--<295.0,0.0>> = 8.53602210346667\n\n\t* W (U+0057): L<<132.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<230.0,722.0>> = 12.456243808909337\n\n\t* W (U+0057): L<<326.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<215.0,0.0>> = 13.81831636493715\n\n\t* W (U+0057): L<<332.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<429.0,722.0>> = 12.33010806468861\n\n\t* Wacute (U+1E82): L<<132.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<230.0,722.0>> = 12.456243808909337\n\n\t* Wacute (U+1E82): L<<326.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<215.0,0.0>> = 13.81831636493715\n\n\t* Wacute (U+1E82): L<<332.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<429.0,722.0>> = 12.33010806468861\n\n\t* Wcircumflex (U+0174): L<<132.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<230.0,722.0>> = 12.456243808909337\n\n\t* Wcircumflex (U+0174): L<<326.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<215.0,0.0>> = 13.81831636493715\n\n\t* Wcircumflex (U+0174): L<<332.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<429.0,722.0>> = 12.33010806468861\n\n\t* Wdieresis (U+1E84): L<<132.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<230.0,722.0>> = 12.456243808909337\n\n\t* Wdieresis (U+1E84): L<<326.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<215.0,0.0>> = 13.81831636493715\n\n\t* Wdieresis (U+1E84): L<<332.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<429.0,722.0>> = 12.33010806468861\n\n\t* Wgrave (U+1E80): L<<132.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<230.0,722.0>> = 12.456243808909337\n\n\t* Wgrave (U+1E80): L<<326.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<215.0,0.0>> = 13.81831636493715\n\n\t* Wgrave (U+1E80): L<<332.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<429.0,722.0>> = 12.33010806468861\n\n\t* trademark (U+2122): L<<307.0,420.0>--<263.0,656.0>>/L<<263.0,656.0>--<263.0,420.0>> = 10.561010691196401\n\n\t* trademark (U+2122): L<<393.0,420.0>--<393.0,656.0>>/L<<393.0,656.0>--<350.0,420.0>> = 10.326209547385703\n\n\t* won (U+20A9): L<<136.0,722.0>--<173.0,283.0>>/L<<173.0,283.0>--<214.0,722.0>> = 10.15325253947916\n\n\t* won (U+20A9): L<<292.0,0.0>--<250.0,448.0>>/L<<250.0,448.0>--<210.0,0.0>> = 10.457990295213316 \n\n\t* won (U+20A9): L<<310.0,722.0>--<346.0,282.0>>/L<<346.0,282.0>--<382.0,722.0>> = 9.35483571776353 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 17]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* f (U+0066): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=122.0,Y=1.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=150.0,Y=1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=292.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=176.5,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2085 (U+2085): X=18.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2085 (U+2085): X=81.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* R (U+0052) contains a short segment B<<174.0,344.0>-<172.0,344.0>-<159.5,343.5>>\n\n\t* R (U+0052) contains a short segment B<<135.0,343.0>-<123.0,343.0>-<120.0,343.0>>\n\n\t* e (U+0065) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<25.0,366.0>--<33.0,366.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<208.0,709.0>--<196.0,709.0>>\n\n\t* braceright (U+007D) contains a short segment L<<193.0,316.0>--<185.0,316.0>>\n\n\t* braceright (U+007D) contains a short segment L<<10.0,-27.0>--<22.0,-27.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<196.0,367.0>--<189.0,367.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<190.0,-5.0>-<181.0,-5.0>-<171.0,-4.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<150.0,55.0>-<159.0,52.0>-<168.5,51.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<168.5,51.0>-<178.0,50.0>-<186.0,50.0>>\n\n\t* ae (U+00E6) contains a short segment L<<272.0,250.0>--<272.0,248.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* emacron (U+0113) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<185.0,-7.0>-<179.0,-8.0>-<172.0,-8.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<96.0,250.0>--<96.0,248.0>>\n\n\t* Eng (U+014A) contains a short segment B<<175.0,-104.0>-<190.0,-106.0>-<199.0,-107.0>>\n\n\t* Eng (U+014A) contains a short segment B<<199.0,-107.0>-<208.0,-108.0>-<220.0,-108.0>>\n\n\t* oe (U+0153) contains a short segment L<<312.0,250.0>--<312.0,248.0>>\n\n\t* Racute (U+0154) contains a short segment B<<174.0,344.0>-<172.0,344.0>-<159.5,343.5>>\n\n\t* Racute (U+0154) contains a short segment B<<135.0,343.0>-<123.0,343.0>-<120.0,343.0>>\n\n\t* Rcommaaccent (U+0156) contains a short segment B<<174.0,344.0>-<172.0,344.0>-<159.5,343.5>>\n\n\t* Rcommaaccent (U+0156) contains a short segment B<<135.0,343.0>-<123.0,343.0>-<120.0,343.0>>\n\n\t* Rcaron (U+0158) contains a short segment B<<174.0,344.0>-<172.0,344.0>-<159.5,343.5>>\n\n\t* Rcaron (U+0158) contains a short segment B<<135.0,343.0>-<123.0,343.0>-<120.0,343.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<272.0,250.0>--<272.0,248.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<135.0,396.0>-<135.0,389.0>-<135.0,380.0>> \n\n\t* Euro (U+20AC) contains a short segment L<<135.0,342.0>--<135.0,332.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Euro (U+20AC): L<<135.0,380.0>--<135.0,342.0>> -> L<<135.0,342.0>--<135.0,332.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<196.0,0.0>--<109.0,616.0>>/L<<109.0,616.0>--<109.0,0.0>> = 8.038929333453654\n\n\t* M (U+004D): L<<343.0,0.0>--<343.0,616.0>>/L<<343.0,616.0>--<249.0,0.0>> = 8.676255294422278\n\n\t* W (U+0057): L<<278.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<400.0,722.0>> = 12.913280530069352\n\n\t* W (U+0057): L<<304.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<171.0,0.0>> = 13.76343619762098\n\n\t* W (U+0057): L<<84.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<206.0,722.0>> = 12.913280530069352\n\n\t* Wacute (U+1E82): L<<278.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<400.0,722.0>> = 12.913280530069352\n\n\t* Wacute (U+1E82): L<<304.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<171.0,0.0>> = 13.76343619762098\n\n\t* Wacute (U+1E82): L<<84.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<206.0,722.0>> = 12.913280530069352\n\n\t* Wcircumflex (U+0174): L<<278.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<400.0,722.0>> = 12.913280530069352\n\n\t* Wcircumflex (U+0174): L<<304.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<171.0,0.0>> = 13.76343619762098\n\n\t* Wcircumflex (U+0174): L<<84.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<206.0,722.0>> = 12.913280530069352\n\n\t* Wdieresis (U+1E84): L<<278.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<400.0,722.0>> = 12.913280530069352\n\n\t* Wdieresis (U+1E84): L<<304.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<171.0,0.0>> = 13.76343619762098\n\n\t* Wdieresis (U+1E84): L<<84.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<206.0,722.0>> = 12.913280530069352\n\n\t* Wgrave (U+1E80): L<<278.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<400.0,722.0>> = 12.913280530069352\n\n\t* Wgrave (U+1E80): L<<304.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<171.0,0.0>> = 13.76343619762098\n\n\t* Wgrave (U+1E80): L<<84.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<206.0,722.0>> = 12.913280530069352\n\n\t* four (U+0034): L<<165.0,242.0>--<165.0,612.0>>/L<<165.0,612.0>--<74.0,242.0>> = 13.817419148634897\n\n\t* naira (U+20A6): L<<158.0,722.0>--<250.0,289.0>>/L<<250.0,289.0>--<250.0,722.0>> = 11.995316726454712\n\n\t* naira (U+20A6): L<<250.0,0.0>--<127.0,571.0>>/L<<127.0,571.0>--<127.0,0.0>> = 12.15641698572287\n\n\t* trademark (U+2122): L<<307.0,427.0>--<255.0,683.0>>/L<<255.0,683.0>--<255.0,427.0>> = 11.481991354748077\n\n\t* trademark (U+2122): L<<394.0,427.0>--<394.0,683.0>>/L<<394.0,683.0>--<342.0,427.0>> = 11.481991354748077\n\n\t* won (U+20A9): L<<270.0,722.0>--<316.0,203.0>>/L<<316.0,203.0>--<360.0,722.0>> = 9.910861542520875\n\n\t* won (U+20A9): L<<274.0,0.0>--<226.0,531.0>>/L<<226.0,531.0>--<179.0,0.0>> = 10.223437038066319 \n\n\t* won (U+20A9): L<<99.0,722.0>--<144.0,203.0>>/L<<144.0,203.0>--<190.0,722.0>> = 10.020452327929746 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 19]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 19]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=353.0,Y=-1.0 (should be at baseline 0?)\n\n\t* comma (U+002C): X=66.0,Y=-1.0 (should be at baseline 0?)\n\n\t* semicolon (U+003B): X=66.0,Y=-1.0 (should be at baseline 0?)\n\n\t* J (U+004A): X=27.5,Y=-2.0 (should be at baseline 0?)\n\n\t* J (U+004A): X=7.0,Y=1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=172.0,Y=723.0 (should be at cap-height 722?)\n\n\t* r (U+0072): X=151.5,Y=522.0 (should be at x-height 520?)\n\n\t* t (U+0074): X=135.0,Y=-1.5 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=140.0,Y=720.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=124.0,Y=-2.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=86.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=86.0,Y=724.0 (should be at cap-height 722?)\n\n\t* aring (U+00E5): X=67.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aring (U+00E5): X=181.5,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=111.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=111.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=98.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=98.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=23.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=23.0,Y=724.0 (should be at cap-height 722?)\n\n\t* IJ (U+0132): X=153.5,Y=-2.0 (should be at baseline 0?)\n\n\t* IJ (U+0132): X=133.0,Y=1.0 (should be at baseline 0?)\n\n\t* Jcircumflex (U+0134): X=27.5,Y=-2.0 (should be at baseline 0?)\n\n\t* Jcircumflex (U+0134): X=7.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=135.0,Y=-1.5 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=135.0,Y=-1.5 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=145.0,Y=-1.5 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=111.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=111.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uring (U+016F): X=92.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uring (U+016F): X=206.5,Y=723.0 (should be at cap-height 722?)\n\n\t* florin (U+0192): X=252.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni021B (U+021B): X=135.0,Y=-1.5 (should be at baseline 0?)\n\n\t* ring (U+02DA): X=243.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ring (U+02DA): X=357.5,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=262.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=262.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=138.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=138.0,Y=720.0 (should be at cap-height 722?)\n\n\t* quotesinglbase (U+201A): X=66.0,Y=-1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=66.0,Y=-1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=138.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2086 (U+2086): X=173.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2086 (U+2086): X=173.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 19]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* M (U+004D) contains a short segment L<<202.0,0.0>--<173.0,0.0>>\n\n\t* f (U+0066) contains a short segment B<<172.0,692.0>-<167.0,693.0>-<161.0,693.5>>\n\n\t* y (U+0079) contains a short segment B<<33.5,-137.5>-<39.0,-138.0>-<44.0,-138.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<179.0,420.0>--<168.0,420.0>>\n\n\t* yacute (U+00FD) contains a short segment B<<33.5,-137.5>-<39.0,-138.0>-<44.0,-138.0>>\n\n\t* ydieresis (U+00FF) contains a short segment B<<33.5,-137.5>-<39.0,-138.0>-<44.0,-138.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<239.0,-114.0>-<247.0,-114.0>-<254.0,-112.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<254.0,-112.0>-<261.0,-110.0>-<268.0,-107.0>>\n\n\t* iogonek (U+012F) contains a short segment L<<41.0,-5.0>--<41.0,-5.0>>\n\n\t* Eng (U+014A) contains a short segment B<<195.0,-170.0>-<184.0,-170.0>-<176.5,-169.0>>\n\n\t* Eng (U+014A) contains a short segment B<<176.5,-169.0>-<169.0,-168.0>-<160.0,-167.0>>\n\n\t* Eng (U+014A) contains a short segment B<<160.0,-133.0>-<167.0,-134.0>-<173.5,-134.5>>\n\n\t* Eng (U+014A) contains a short segment B<<173.5,-134.5>-<180.0,-135.0>-<186.0,-135.0>>\n\n\t* eng (U+014B) contains a short segment B<<159.5,-169.0>-<152.0,-168.0>-<143.0,-167.0>>\n\n\t* eng (U+014B) contains a short segment B<<143.0,-133.0>-<150.0,-134.0>-<156.5,-134.5>>\n\n\t* eng (U+014B) contains a short segment B<<156.5,-134.5>-<163.0,-135.0>-<169.0,-135.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<158.0,-114.0>-<166.0,-114.0>-<173.0,-112.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<173.0,-112.0>-<180.0,-110.0>-<187.0,-107.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<228.0,-114.0>-<236.0,-114.0>-<243.0,-112.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<243.0,-112.0>-<250.0,-110.0>-<257.0,-107.0>>\n\n\t* ycircumflex (U+0177) contains a short segment B<<33.5,-137.5>-<39.0,-138.0>-<44.0,-138.0>>\n\n\t* florin (U+0192) contains a short segment B<<250.0,689.0>-<245.0,691.0>-<238.5,692.0>>\n\n\t* florin (U+0192) contains a short segment B<<12.0,-37.0>-<17.0,-38.0>-<24.0,-39.5>>\n\n\t* ygrave (U+1EF3) contains a short segment B<<33.5,-137.5>-<39.0,-138.0>-<44.0,-138.0>>\n\n\t* uni2076 (U+2076) contains a short segment L<<60.0,534.0>--<60.0,534.0>>\n\n\t* uni2079 (U+2079) contains a short segment L<<133.0,510.0>--<133.0,510.0>>\n\n\t* uni2086 (U+2086) contains a short segment L<<60.0,92.0>--<60.0,92.0>>\n\n\t* uni2089 (U+2089) contains a short segment L<<133.0,68.0>--<133.0,68.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<108.0,392.0>-<108.0,383.0>-<108.0,374.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 19]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 19]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* Eng (U+014A): L<<234.0,20.0>--<78.0,649.0>>/L<<78.0,649.0>--<78.0,0.0>> = 13.92902843679343\n\n\t* Eng (U+014A): L<<98.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<233.0,722.0>> = 13.937073026911046\n\n\t* G (U+0047): L<<237.0,0.0>--<232.0,108.0>>/B<<232.0,108.0>-<223.0,49.0>-<203.5,20.5>> = 11.323863731301566\n\n\t* Gbreve (U+011E): L<<237.0,0.0>--<232.0,108.0>>/B<<232.0,108.0>-<223.0,49.0>-<203.5,20.5>> = 11.323863731301566\n\n\t* Gcircumflex (U+011C): L<<237.0,0.0>--<232.0,108.0>>/B<<232.0,108.0>-<223.0,49.0>-<203.5,20.5>> = 11.323863731301566\n\n\t* Gcommaaccent (U+0122): L<<237.0,0.0>--<232.0,108.0>>/B<<232.0,108.0>-<223.0,49.0>-<203.5,20.5>> = 11.323863731301566\n\n\t* Gdotaccent (U+0120): L<<237.0,0.0>--<232.0,108.0>>/B<<232.0,108.0>-<223.0,49.0>-<203.5,20.5>> = 11.323863731301566\n\n\t* M (U+004D): L<<173.0,0.0>--<78.0,635.0>>/L<<78.0,635.0>--<78.0,0.0>> = 8.508703316270283\n\n\t* M (U+004D): L<<300.0,0.0>--<300.0,635.0>>/L<<300.0,635.0>--<202.0,0.0>> = 8.773281313666025\n\n\t* N (U+004E): L<<239.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<78.0,0.0>> = 13.932333934561301\n\n\t* N (U+004E): L<<98.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<233.0,722.0>> = 13.937073026911046\n\n\t* Nacute (U+0143): L<<239.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<78.0,0.0>> = 13.932333934561301\n\n\t* Nacute (U+0143): L<<98.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<233.0,722.0>> = 13.937073026911046\n\n\t* Ncaron (U+0147): L<<239.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<78.0,0.0>> = 13.932333934561301\n\n\t* Ncaron (U+0147): L<<98.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<233.0,722.0>> = 13.937073026911046\n\n\t* Ncommaaccent (U+0145): L<<239.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<78.0,0.0>> = 13.932333934561301\n\n\t* Ncommaaccent (U+0145): L<<98.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<233.0,722.0>> = 13.937073026911046\n\n\t* Ntilde (U+00D1): L<<239.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<78.0,0.0>> = 13.932333934561301\n\n\t* Ntilde (U+00D1): L<<98.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<233.0,722.0>> = 13.937073026911046\n\n\t* W (U+0057): L<<215.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<333.0,722.0>> = 11.343988449273166\n\n\t* W (U+0057): L<<256.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<125.0,0.0>> = 11.965509515089952\n\n\t* W (U+0057): L<<54.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<169.0,722.0>> = 11.057229599161321\n\n\t* Wacute (U+1E82): L<<215.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<333.0,722.0>> = 11.343988449273166\n\n\t* Wacute (U+1E82): L<<256.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<125.0,0.0>> = 11.965509515089952\n\n\t* Wacute (U+1E82): L<<54.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<169.0,722.0>> = 11.057229599161321\n\n\t* Wcircumflex (U+0174): L<<215.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<333.0,722.0>> = 11.343988449273166\n\n\t* Wcircumflex (U+0174): L<<256.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<125.0,0.0>> = 11.965509515089952\n\n\t* Wcircumflex (U+0174): L<<54.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<169.0,722.0>> = 11.057229599161321\n\n\t* Wdieresis (U+1E84): L<<215.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<333.0,722.0>> = 11.343988449273166\n\n\t* Wdieresis (U+1E84): L<<256.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<125.0,0.0>> = 11.965509515089952\n\n\t* Wdieresis (U+1E84): L<<54.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<169.0,722.0>> = 11.057229599161321\n\n\t* Wgrave (U+1E80): L<<215.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<333.0,722.0>> = 11.343988449273166\n\n\t* Wgrave (U+1E80): L<<256.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<125.0,0.0>> = 11.965509515089952\n\n\t* Wgrave (U+1E80): L<<54.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<169.0,722.0>> = 11.057229599161321\n\n\t* eth (U+00F0): B<<134.0,528.0>-<171.0,528.0>-<194.0,484.0>>/B<<194.0,484.0>-<169.0,574.0>-<117.0,642.0>> = 12.073184871889426\n\n\t* four (U+0034): L<<156.0,232.0>--<156.0,677.0>>/L<<156.0,677.0>--<45.0,232.0>> = 14.00594427481588\n\n\t* naira (U+20A6): L<<122.0,722.0>--<226.0,200.0>>/L<<226.0,200.0>--<226.0,722.0>> = 11.267710094402245\n\n\t* naira (U+20A6): L<<232.0,0.0>--<101.0,649.0>>/L<<101.0,649.0>--<101.0,0.0>> = 11.411761358832946\n\n\t* onequarter (U+00BC): L<<329.0,132.0>--<329.0,352.0>>/L<<329.0,352.0>--<276.0,132.0>> = 13.544973367945545\n\n\t* threequarters (U+00BE): L<<331.0,132.0>--<331.0,352.0>>/L<<331.0,352.0>--<278.0,132.0>> = 13.544973367945545\n\n\t* trademark (U+2122): L<<256.0,427.0>--<204.0,693.0>>/L<<204.0,693.0>--<204.0,427.0>> = 11.061182461591784\n\n\t* trademark (U+2122): L<<331.0,427.0>--<331.0,693.0>>/L<<331.0,693.0>--<279.0,427.0>> = 11.061182461591784\n\n\t* uni2074 (U+2074): L<<98.0,454.0>--<98.0,674.0>>/L<<98.0,674.0>--<45.0,454.0>> = 13.544973367945545\n\n\t* uni2084 (U+2084): L<<98.0,12.0>--<98.0,232.0>>/L<<98.0,232.0>--<45.0,12.0>> = 13.544973367945545\n\n\t* won (U+20A9): L<<198.0,722.0>--<247.0,140.0>>/L<<247.0,140.0>--<287.0,722.0>> = 8.744193391660843\n\n\t* won (U+20A9): L<<229.0,0.0>--<179.0,606.0>>/L<<179.0,606.0>--<127.0,0.0>> = 9.621146496256879 \n\n\t* won (U+20A9): L<<70.0,722.0>--<110.0,140.0>>/L<<110.0,140.0>--<159.0,722.0>> = 8.744193391660843 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 19]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 20]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 20]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=602.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=333.0,Y=1.5 (should be at baseline 0?)\n\n\t* f (U+0066): X=307.0,Y=723.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* t (U+0074): X=134.0,Y=1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=167.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=279.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=446.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=381.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=332.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=287.0,Y=-2.0 (should be at baseline 0?)\n\n\t* eogonek (U+0119): X=358.5,Y=0.5 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=113.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=41.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=134.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=134.0,Y=1.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=148.0,Y=1.5 (should be at baseline 0?)\n\n\t* uni021B (U+021B): X=134.0,Y=1.0 (should be at baseline 0?) \n\n\t* uni2083 (U+2083): X=303.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 20]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* paragraph (U+00B6) contains a short segment L<<210.0,334.0>--<198.0,334.0>>\n\n\t* Eng (U+014A) contains a short segment B<<305.0,-56.0>-<314.0,-57.0>-<320.5,-58.0>>\n\n\t* Eng (U+014A) contains a short segment B<<320.5,-58.0>-<327.0,-59.0>-<334.0,-59.0>>\n\n\t* eng (U+014B) contains a short segment B<<224.0,-56.0>-<233.0,-57.0>-<239.0,-58.0>>\n\n\t* eng (U+014B) contains a short segment B<<239.0,-58.0>-<245.0,-59.0>-<252.0,-59.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<52.0,341.0>-<52.0,350.0>-<52.0,359.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 20]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 20]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<293.0,0.0>--<183.0,508.0>>/L<<183.0,508.0>--<183.0,0.0>> = 12.217940503474646\n\n\t* M (U+004D): L<<498.0,0.0>--<498.0,508.0>>/L<<498.0,508.0>--<387.0,0.0>> = 12.325632037685137\n\n\t* trademark (U+2122): L<<416.0,396.0>--<360.0,628.0>>/L<<360.0,628.0>--<360.0,396.0>> = 13.570434385161475 \n\n\t* trademark (U+2122): L<<528.0,396.0>--<528.0,628.0>>/L<<528.0,628.0>--<474.0,396.0>> = 13.102789941262442 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 20]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 21]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 21]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* one (U+0031): X=241.0,Y=724.0 (should be at cap-height 722?)\n\n\t* one (U+0031): X=297.0,Y=724.0 (should be at cap-height 722?)\n\n\t* d (U+0064): X=297.0,Y=0.5 (should be at baseline 0?)\n\n\t* m (U+006D): X=556.0,Y=498.0 (should be at x-height 500?)\n\n\t* onesuperior (U+00B9): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=296.0,Y=723.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=242.0,Y=1.0 (should be at baseline 0?)\n\n\t* dcaron (U+010F): X=297.0,Y=0.5 (should be at baseline 0?)\n\n\t* dcroat (U+0111): X=297.0,Y=0.5 (should be at baseline 0?)\n\n\t* florin (U+0192): X=143.0,Y=1.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=527.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=419.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=361.0,Y=720.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=361.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=744.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=310.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=474.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=40.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 21]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* e (U+0065) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<193.0,343.0>--<183.0,343.0>>\n\n\t* ae (U+00E6) contains a short segment L<<417.0,236.0>--<417.0,235.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* emacron (U+0113) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<126.0,236.0>--<126.0,235.0>>\n\n\t* oe (U+0153) contains a short segment L<<470.0,236.0>--<470.0,235.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<323.0,-12.0>-<317.0,-12.0>-<312.0,-12.0>> \n\n\t* aeacute (U+01FD) contains a short segment L<<417.0,236.0>--<417.0,235.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 21]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 21]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 21]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 22]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 22]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=568.5,Y=-2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=344.0,Y=721.0 (should be at cap-height 722?)\n\n\t* t (U+0074): X=158.5,Y=-0.5 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=336.0,Y=-1.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=263.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=158.5,Y=-0.5 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=158.5,Y=-0.5 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=176.0,Y=1.5 (should be at baseline 0?)\n\n\t* uni021B (U+021B): X=158.5,Y=-0.5 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=390.0,Y=721.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=390.0,Y=1.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=64.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=632.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=339.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=116.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=116.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=76.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 22]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* Q (U+0051) contains a short segment B<<366.0,-12.0>-<358.0,-12.0>-<350.0,-12.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<207.0,329.0>--<198.0,329.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<286.0,105.5>-<295.0,105.0>-<306.0,105.0>>\n\n\t* ae (U+00E6) contains a short segment L<<463.0,228.0>--<463.0,227.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<457.0,-107.0>-<464.0,-107.0>-<471.0,-106.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<408.0,-107.0>-<416.0,-107.0>-<422.5,-106.0>>\n\n\t* Eng (U+014A) contains a short segment B<<399.0,-70.0>-<411.0,-71.0>-<423.0,-71.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<484.0,-107.0>-<492.0,-107.0>-<499.0,-106.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<499.0,-106.0>-<506.0,-105.0>-<516.0,-104.0>> \n\n\t* aeacute (U+01FD) contains a short segment L<<463.0,228.0>--<463.0,227.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 22]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 22]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 22]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 23]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 23]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=219.0,Y=2.0 (should be at baseline 0?)\n\n\t* at (U+0040): X=458.0,Y=2.0 (should be at baseline 0?)\n\n\t* J (U+004A): X=4.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=117.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=134.0,Y=0.5 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=19.0,Y=0.5 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=319.5,Y=720.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=115.5,Y=2.0 (should be at baseline 0?)\n\n\t* IJ (U+0132): X=184.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Jcircumflex (U+0134): X=4.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=319.5,Y=720.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=115.5,Y=2.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=-25.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2083 (U+2083): X=48.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 23]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<445.0,116.5>-<451.0,103.0>-<465.0,103.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<42.0,375.0>--<48.0,375.0>>\n\n\t* braceright (U+007D) contains a short segment L<<219.0,307.0>--<213.0,307.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<84.0,406.0>-<84.0,411.0>-<84.0,416.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<186.0,415.0>-<186.0,411.0>-<186.0,406.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<215.0,359.0>--<205.0,359.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<137.0,75.0>-<146.0,71.0>-<154.0,68.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<154.0,68.0>-<162.0,65.0>-<170.0,65.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<231.0,-100.0>-<237.0,-98.0>-<243.0,-95.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<160.0,-9.0>-<156.0,-9.0>-<151.0,-9.0>>\n\n\t* Eng (U+014A) contains a short segment B<<140.0,-89.0>-<148.0,-90.0>-<156.5,-91.5>>\n\n\t* Eng (U+014A) contains a short segment B<<156.5,-91.5>-<165.0,-93.0>-<173.0,-93.0>>\n\n\t* eng (U+014B) contains a short segment B<<113.0,-89.0>-<121.0,-90.0>-<130.0,-91.5>>\n\n\t* eng (U+014B) contains a short segment B<<130.0,-91.5>-<139.0,-93.0>-<147.0,-93.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<169.0,344.0>-<168.0,340.0>-<168.0,336.0>> \n\n\t* peso (U+20B1) contains a short segment L<<435.0,540.0>--<435.0,539.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 23]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 23]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<251.0,271.0>--<310.0,644.0>>/L<<310.0,644.0>--<160.0,271.0>> = 12.91886573485628\n\n\t* AEacute (U+01FC): L<<251.0,271.0>--<310.0,644.0>>/L<<310.0,644.0>--<160.0,271.0>> = 12.91886573485628\n\n\t* M (U+004D): L<<166.0,0.0>--<175.0,575.0>>/L<<175.0,575.0>--<84.0,0.0>> = 8.096362767085473\n\n\t* M (U+004D): L<<318.0,0.0>--<409.0,575.0>>/L<<409.0,575.0>--<231.0,0.0>> = 8.207613219003136\n\n\t* W (U+0057): L<<176.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<286.0,722.0>> = 12.395163918463934\n\n\t* W (U+0057): L<<274.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<152.0,0.0>> = 13.486655085432961\n\n\t* W (U+0057): L<<373.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<482.0,722.0>> = 12.3093778647886\n\n\t* Wacute (U+1E82): L<<176.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<286.0,722.0>> = 12.395163918463934\n\n\t* Wacute (U+1E82): L<<274.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<152.0,0.0>> = 13.486655085432961\n\n\t* Wacute (U+1E82): L<<373.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<482.0,722.0>> = 12.3093778647886\n\n\t* Wcircumflex (U+0174): L<<176.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<286.0,722.0>> = 12.395163918463934\n\n\t* Wcircumflex (U+0174): L<<274.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<152.0,0.0>> = 13.486655085432961\n\n\t* Wcircumflex (U+0174): L<<373.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<482.0,722.0>> = 12.3093778647886\n\n\t* Wdieresis (U+1E84): L<<176.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<286.0,722.0>> = 12.395163918463934\n\n\t* Wdieresis (U+1E84): L<<274.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<152.0,0.0>> = 13.486655085432961\n\n\t* Wdieresis (U+1E84): L<<373.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<482.0,722.0>> = 12.3093778647886\n\n\t* Wgrave (U+1E80): L<<176.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<286.0,722.0>> = 12.395163918463934\n\n\t* Wgrave (U+1E80): L<<274.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<152.0,0.0>> = 13.486655085432961\n\n\t* Wgrave (U+1E80): L<<373.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<482.0,722.0>> = 12.3093778647886\n\n\t* four (U+0034): L<<175.0,250.0>--<226.0,573.0>>/L<<226.0,573.0>--<89.0,250.0>> = 14.011534587327978\n\n\t* naira (U+20A6): L<<226.0,0.0>--<187.0,525.0>>/L<<187.0,525.0>--<104.0,0.0>> = 13.232289238698645\n\n\t* naira (U+20A6): L<<244.0,722.0>--<272.0,325.0>>/L<<272.0,325.0>--<334.0,722.0>> = 12.910588158944263\n\n\t* trademark (U+2122): L<<333.0,423.0>--<324.0,670.0>>/L<<324.0,670.0>--<285.0,423.0>> = 11.059403890467149\n\n\t* trademark (U+2122): L<<420.0,423.0>--<459.0,670.0>>/L<<459.0,670.0>--<372.0,423.0>> = 10.430999122959385\n\n\t* won (U+20A9): L<<188.0,722.0>--<153.0,243.0>>/L<<153.0,243.0>--<273.0,722.0>> = 9.8852725535169\n\n\t* won (U+20A9): L<<245.0,0.0>--<277.0,490.0>>/L<<277.0,490.0>--<157.0,0.0>> = 10.024325753612938 \n\n\t* won (U+20A9): L<<360.0,722.0>--<326.0,243.0>>/L<<326.0,243.0>--<442.0,722.0>> = 9.553185812730508 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 23]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 24]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 24]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=539.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=299.0,Y=1.5 (should be at baseline 0?)\n\n\t* at (U+0040): X=180.0,Y=-0.5 (should be at baseline 0?)\n\n\t* f (U+0066): X=366.0,Y=720.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=76.5,Y=-2.0 (should be at baseline 0?)\n\n\t* t (U+0074): X=101.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=192.0,Y=721.0 (should be at cap-height 722?)\n\n\t* braceleft (U+007B): X=179.0,Y=1.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=346.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=374.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=343.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=76.5,Y=-2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=76.5,Y=-2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=76.5,Y=-2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=76.5,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=56.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=7.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=101.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=101.0,Y=2.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=116.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni021B (U+021B): X=101.0,Y=2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=293.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=50.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 24]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* six (U+0036) contains a short segment L<<190.0,395.0>--<190.0,395.0>>\n\n\t* nine (U+0039) contains a short segment L<<342.0,329.0>--<342.0,329.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<101.0,414.0>-<101.0,422.0>-<101.0,430.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<244.0,430.0>-<244.0,423.0>-<244.0,414.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<218.0,340.0>--<207.0,340.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<337.0,-100.0>-<343.0,-100.0>-<349.5,-98.5>>\n\n\t* aogonek (U+0105) contains a short segment B<<349.5,-98.5>-<356.0,-97.0>-<363.0,-95.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<219.0,-10.0>-<212.0,-11.0>-<205.0,-11.0>> \n\n\t* peso (U+20B1) contains a short segment B<<570.0,528.0>-<570.0,524.0>-<570.0,519.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 24]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 24]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<248.0,0.0>--<215.0,544.0>>/L<<215.0,544.0>--<129.0,0.0>> = 12.454852439691463\n\n\t* M (U+004D): L<<450.0,0.0>--<536.0,544.0>>/L<<536.0,544.0>--<330.0,0.0>> = 11.757054534252838\n\n\t* trademark (U+2122): L<<426.0,401.0>--<405.0,643.0>>/L<<405.0,643.0>--<367.0,401.0>> = 13.883512378070892 \n\n\t* trademark (U+2122): L<<538.0,401.0>--<577.0,643.0>>/L<<577.0,643.0>--<480.0,401.0>> = 12.68731530400583 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 24]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 25]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 25]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=505.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=301.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=9.0,Y=-1.5 (should be at baseline 0?)\n\n\t* g (U+0067): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=216.0,Y=724.0 (should be at cap-height 722?)\n\n\t* aogonek (U+0105): X=282.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=238.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=9.0,Y=-1.5 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=9.0,Y=-1.5 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=9.0,Y=-1.5 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=9.0,Y=-1.5 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=85.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=25.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=255.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=314.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2087 (U+2087): X=194.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=106.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=106.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=217.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=345.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 25]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<502.5,143.5>-<507.0,129.0>-<521.0,129.0>>\n\n\t* R (U+0052) contains a short segment B<<213.0,308.0>-<209.0,307.0>-<200.0,307.0>>\n\n\t* R (U+0052) contains a short segment B<<200.0,307.0>-<191.0,307.0>-<187.0,307.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<21.0,392.0>--<29.0,392.0>>\n\n\t* braceright (U+007D) contains a short segment L<<246.0,290.0>--<238.0,290.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<206.0,345.0>--<191.0,345.0>>\n\n\t* jcircumflex (U+0135) contains a short segment B<<-34.0,-64.0>-<-29.0,-65.0>-<-26.5,-65.0>>\n\n\t* jcircumflex (U+0135) contains a short segment B<<-26.5,-65.0>-<-24.0,-65.0>-<-21.0,-65.0>>\n\n\t* Eng (U+014A) contains a short segment B<<271.0,-173.0>-<261.0,-173.0>-<251.5,-172.5>>\n\n\t* Eng (U+014A) contains a short segment B<<251.5,-172.5>-<242.0,-172.0>-<231.0,-171.0>>\n\n\t* Eng (U+014A) contains a short segment B<<231.0,-64.0>-<237.0,-65.0>-<245.0,-65.0>>\n\n\t* eng (U+014B) contains a short segment B<<196.0,-64.0>-<200.0,-65.0>-<203.0,-65.0>>\n\n\t* eng (U+014B) contains a short segment B<<203.0,-65.0>-<206.0,-65.0>-<209.0,-65.0>>\n\n\t* Racute (U+0154) contains a short segment B<<213.0,308.0>-<209.0,307.0>-<200.0,307.0>>\n\n\t* Racute (U+0154) contains a short segment B<<200.0,307.0>-<191.0,307.0>-<187.0,307.0>>\n\n\t* Rcommaaccent (U+0156) contains a short segment B<<213.0,308.0>-<209.0,307.0>-<200.0,307.0>>\n\n\t* Rcommaaccent (U+0156) contains a short segment B<<200.0,307.0>-<191.0,307.0>-<187.0,307.0>>\n\n\t* Rcaron (U+0158) contains a short segment B<<213.0,308.0>-<209.0,307.0>-<200.0,307.0>>\n\n\t* Rcaron (U+0158) contains a short segment B<<200.0,307.0>-<191.0,307.0>-<187.0,307.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<275.0,-86.0>-<284.0,-86.0>-<295.0,-82.0>>\n\n\t* uni0237 (U+0237) contains a short segment B<<-34.0,-64.0>-<-29.0,-65.0>-<-26.5,-65.0>> \n\n\t* uni0237 (U+0237) contains a short segment B<<-26.5,-65.0>-<-24.0,-65.0>-<-21.0,-65.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 25]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 25]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<269.0,269.0>--<269.0,604.0>>/L<<269.0,604.0>--<187.0,269.0>> = 13.754199011525623\n\n\t* AEacute (U+01FC): L<<269.0,269.0>--<269.0,604.0>>/L<<269.0,604.0>--<187.0,269.0>> = 13.754199011525623\n\n\t* M (U+004D): L<<226.0,0.0>--<155.0,496.0>>/L<<155.0,496.0>--<155.0,0.0>> = 8.146273897478473\n\n\t* M (U+004D): L<<389.0,0.0>--<389.0,496.0>>/L<<389.0,496.0>--<315.0,0.0>> = 8.485570762675497\n\n\t* W (U+0057): L<<154.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<240.0,722.0>> = 12.003356816475646\n\n\t* W (U+0057): L<<335.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<235.0,0.0>> = 13.674019650782396\n\n\t* W (U+0057): L<<356.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<442.0,722.0>> = 11.974293586128676\n\n\t* Wacute (U+1E82): L<<154.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<240.0,722.0>> = 12.003356816475646\n\n\t* Wacute (U+1E82): L<<335.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<235.0,0.0>> = 13.674019650782396\n\n\t* Wacute (U+1E82): L<<356.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<442.0,722.0>> = 11.974293586128676\n\n\t* Wcircumflex (U+0174): L<<154.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<240.0,722.0>> = 12.003356816475646\n\n\t* Wcircumflex (U+0174): L<<335.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<235.0,0.0>> = 13.674019650782396\n\n\t* Wcircumflex (U+0174): L<<356.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<442.0,722.0>> = 11.974293586128676\n\n\t* Wdieresis (U+1E84): L<<154.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<240.0,722.0>> = 12.003356816475646\n\n\t* Wdieresis (U+1E84): L<<335.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<235.0,0.0>> = 13.674019650782396\n\n\t* Wdieresis (U+1E84): L<<356.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<442.0,722.0>> = 11.974293586128676\n\n\t* Wgrave (U+1E80): L<<154.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<240.0,722.0>> = 12.003356816475646\n\n\t* Wgrave (U+1E80): L<<335.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<235.0,0.0>> = 13.674019650782396\n\n\t* Wgrave (U+1E80): L<<356.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<442.0,722.0>> = 11.974293586128676\n\n\t* trademark (U+2122): L<<307.0,417.0>--<266.0,644.0>>/L<<266.0,644.0>--<266.0,417.0>> = 10.238197666512988\n\n\t* trademark (U+2122): L<<393.0,417.0>--<393.0,644.0>>/L<<393.0,644.0>--<353.0,417.0>> = 9.993580259268196\n\n\t* won (U+20A9): L<<152.0,722.0>--<186.0,318.0>>/L<<186.0,318.0>--<225.0,722.0>> = 10.32452874019058\n\n\t* won (U+20A9): L<<300.0,0.0>--<260.0,411.0>>/L<<260.0,411.0>--<224.0,0.0>> = 10.564557714869844 \n\n\t* won (U+20A9): L<<327.0,722.0>--<359.0,317.0>>/L<<359.0,317.0>--<392.0,722.0>> = 9.175942411370093 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 25]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 26]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 26]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=379.5,Y=1.0 (should be at baseline 0?)\n\n\t* J (U+004A): X=228.5,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=355.0,Y=721.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* j (U+006A): X=47.0,Y=2.0 (should be at baseline 0?)\n\n\t* t (U+0074): X=162.0,Y=-1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=265.0,Y=1.5 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=105.0,Y=1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=354.0,Y=1.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=269.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=436.0,Y=942.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=549.0,Y=942.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=269.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=279.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=446.0,Y=942.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=559.0,Y=942.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=279.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=291.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=458.0,Y=942.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=571.0,Y=942.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=291.0,Y=941.0 (should be at ascender 940?)\n\n\t* Oslash (U+00D8): X=267.0,Y=1.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=461.0,Y=721.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=272.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Itilde (U+0128): X=78.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=245.0,Y=942.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=358.0,Y=942.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=78.0,Y=941.0 (should be at ascender 940?)\n\n\t* IJ (U+0132): X=531.5,Y=-1.0 (should be at baseline 0?)\n\n\t* ij (U+0133): X=325.0,Y=2.0 (should be at baseline 0?)\n\n\t* Jcircumflex (U+0134): X=228.5,Y=-1.0 (should be at baseline 0?)\n\n\t* jcircumflex (U+0135): X=47.0,Y=2.0 (should be at baseline 0?)\n\n\t* Eng (U+014A): X=478.0,Y=2.0 (should be at baseline 0?)\n\n\t* eng (U+014B): X=351.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=162.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=162.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=181.0,Y=0.5 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=272.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=439.0,Y=942.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=552.0,Y=942.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=272.0,Y=941.0 (should be at ascender 940?)\n\n\t* Oslashacute (U+01FE): X=267.0,Y=1.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=461.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni021B (U+021B): X=162.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni0237 (U+0237): X=47.0,Y=2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=403.0,Y=721.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=403.0,Y=1.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=53.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=655.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2080 (U+2080): X=176.5,Y=-1.5 (should be at baseline 0?)\n\n\t* uni2080 (U+2080): X=248.5,Y=-1.5 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=354.0,Y=1.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=213.0,Y=1.5 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 26]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* paragraph (U+00B6) contains a short segment L<<213.0,323.0>--<205.0,323.0>>\n\n\t* ae (U+00E6) contains a short segment L<<483.0,224.0>--<483.0,223.0>>\n\n\t* Eng (U+014A) contains a short segment B<<379.0,-48.0>-<393.0,-51.0>-<402.5,-52.0>>\n\n\t* Eng (U+014A) contains a short segment B<<402.5,-52.0>-<412.0,-53.0>-<422.0,-53.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<483.0,224.0>--<483.0,223.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<64.0,339.0>-<64.0,348.0>-<64.0,357.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 26]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 26]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 26]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* at (U+0040): X=721.0,Y=-1.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=186.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=289.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=-25.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=78.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=279.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=327.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=-25.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=19.0,Y=1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=335.0,Y=-1.0 (should be at baseline 0?)\n\n\t* questiondown (U+00BF): X=505.0,Y=2.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=432.0,Y=939.5 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=430.0,Y=939.5 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=454.0,Y=939.5 (should be at ascender 940?)\n\n\t* germandbls (U+00DF): X=287.5,Y=-2.0 (should be at baseline 0?)\n\n\t* oslash (U+00F8): X=178.5,Y=-1.5 (should be at baseline 0?)\n\n\t* Itilde (U+0128): X=231.0,Y=939.5 (should be at ascender 940?)\n\n\t* oe (U+0153): X=497.5,Y=1.5 (should be at baseline 0?)\n\n\t* oe (U+0153): X=350.5,Y=1.5 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=430.0,Y=939.5 (should be at ascender 940?)\n\n\t* Uring (U+016E): X=313.0,Y=942.0 (should be at ascender 940?)\n\n\t* Uring (U+016E): X=595.0,Y=942.0 (should be at ascender 940?)\n\n\t* Uring (U+016E): X=454.0,Y=720.0 (should be at cap-height 722?)\n\n\t* oslashacute (U+01FF): X=178.5,Y=-1.5 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=492.0,Y=721.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=378.0,Y=1.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=114.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=756.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=173.0,Y=-0.5 (should be at baseline 0?)\n\n\t* uni2086 (U+2086): X=140.5,Y=0.5 (should be at baseline 0?)\n\n\t* uni2086 (U+2086): X=198.0,Y=1.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=79.5,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<655.0,159.0>-<664.0,147.0>-<679.0,147.0>>\n\n\t* f (U+0066) contains a short segment B<<420.0,581.0>-<414.0,582.0>-<407.0,582.5>>\n\n\t* g (U+0067) contains a short segment B<<188.0,173.0>-<188.0,164.0>-<198.0,160.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<122.0,268.0>-<122.0,275.0>-<122.0,283.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<230.0,316.0>--<222.0,316.0>>\n\n\t* Oslash (U+00D8) contains a short segment L<<275.0,304.0>--<274.0,301.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<622.0,-60.0>-<622.0,-70.0>-<628.0,-77.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<273.0,-12.0>-<268.0,-12.0>-<262.0,-12.0>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<188.0,173.0>-<188.0,164.0>-<198.0,160.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<188.0,173.0>-<188.0,164.0>-<198.0,160.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<188.0,173.0>-<188.0,164.0>-<198.0,160.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<188.0,173.0>-<188.0,164.0>-<198.0,160.0>>\n\n\t* Eng (U+014A) contains a short segment B<<344.0,-28.0>-<355.0,-30.0>-<363.5,-31.0>>\n\n\t* Eng (U+014A) contains a short segment B<<363.5,-31.0>-<372.0,-32.0>-<378.0,-32.0>>\n\n\t* eng (U+014B) contains a short segment B<<229.5,-31.0>-<238.0,-32.0>-<244.0,-32.0>>\n\n\t* tbar (U+0167) contains a short segment L<<295.0,209.0>--<293.0,194.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<341.0,-61.0>-<341.0,-69.0>-<347.0,-76.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<347.0,-76.5>-<353.0,-84.0>-<368.0,-84.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<368.0,-84.0>-<378.0,-84.0>-<391.0,-81.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<450.0,-60.0>-<450.0,-70.0>-<456.0,-77.0>>\n\n\t* Oslashacute (U+01FE) contains a short segment L<<275.0,304.0>--<274.0,301.0>> \n\n\t* peso (U+20B1) contains a short segment L<<738.0,489.0>--<738.0,485.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Oslash (U+00D8): L<<497.0,287.0>--<520.0,417.0>> -> L<<520.0,417.0>--<521.0,422.0>> \n\n\t* Oslashacute (U+01FE): L<<497.0,287.0>--<520.0,417.0>> -> L<<520.0,417.0>--<521.0,422.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* g (U+0067): B<<-9.5,-20.5>-<20.0,-8.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<28.0,2.0>-<7.0,25.5>> = 11.986903339745814\n\n\t* gbreve (U+011F): B<<-9.5,-20.5>-<20.0,-8.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<28.0,2.0>-<7.0,25.5>> = 11.986903339745814\n\n\t* gcircumflex (U+011D): B<<-9.5,-20.5>-<20.0,-8.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<28.0,2.0>-<7.0,25.5>> = 11.986903339745814\n\n\t* gcommaaccent (U+0123): B<<-9.5,-20.5>-<20.0,-8.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<28.0,2.0>-<7.0,25.5>> = 11.986903339745814 \n\n\t* gdotaccent (U+0121): B<<-9.5,-20.5>-<20.0,-8.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<28.0,2.0>-<7.0,25.5>> = 11.986903339745814 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=252.0,Y=720.0 (should be at cap-height 722?)\n\n\t* dollar (U+0024): X=181.0,Y=2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=317.0,Y=721.0 (should be at cap-height 722?)\n\n\t* t (U+0074): X=153.0,Y=-2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=122.0,Y=-1.0 (should be at baseline 0?)\n\n\t* paragraph (U+00B6): X=258.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=202.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=202.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=202.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=292.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=199.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=199.0,Y=724.0 (should be at cap-height 722?)\n\n\t* aring (U+00E5): X=239.0,Y=720.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=231.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=231.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=214.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=214.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=110.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=110.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tcommaaccent (U+0163): X=153.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=153.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=168.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=228.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=228.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uring (U+016F): X=268.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Uogonek (U+0172): X=259.0,Y=2.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=413.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uni021B (U+021B): X=153.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ring (U+02DA): X=365.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=325.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=325.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=208.0,Y=1.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=168.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=202.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=179.0,Y=724.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=202.0,Y=724.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* M (U+004D) contains a short segment L<<245.0,0.0>--<214.0,0.0>>\n\n\t* e (U+0065) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<222.0,399.0>--<214.0,399.0>>\n\n\t* ae (U+00E6) contains a short segment L<<296.0,261.0>--<294.0,251.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* emacron (U+0113) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<80.0,261.0>--<78.0,251.0>>\n\n\t* oe (U+0153) contains a short segment L<<343.0,261.0>--<341.0,251.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<296.0,261.0>--<294.0,251.0>>\n\n\t* baht (U+0E3F) contains a short segment B<<277.0,722.0>-<279.0,722.0>-<281.0,722.0>>\n\n\t* peseta (U+20A7) contains a short segment B<<466.0,562.0>-<466.0,555.0>-<466.0,549.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<159.0,406.0>-<157.0,396.0>-<155.0,385.0>>\n\n\t* peso (U+20B1) contains a short segment B<<470.0,566.0>-<470.0,560.0>-<470.0,554.0>> \n\n\t* uni20B9 (U+20B9) contains a short segment L<<363.0,560.0>--<363.0,559.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* paragraph (U+00B6): L<<258.0,723.0>--<317.0,722.0>> -> L<<317.0,722.0>--<436.0,722.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* G (U+0047): L<<327.0,0.0>--<340.0,115.0>>/B<<340.0,115.0>-<321.0,64.0>-<285.5,27.0>> = 13.983293975556402\n\n\t* Gbreve (U+011E): L<<327.0,0.0>--<340.0,115.0>>/B<<340.0,115.0>-<321.0,64.0>-<285.5,27.0>> = 13.983293975556402\n\n\t* Gcircumflex (U+011C): L<<327.0,0.0>--<340.0,115.0>>/B<<340.0,115.0>-<321.0,64.0>-<285.5,27.0>> = 13.983293975556402\n\n\t* Gcommaaccent (U+0122): L<<327.0,0.0>--<340.0,115.0>>/B<<340.0,115.0>-<321.0,64.0>-<285.5,27.0>> = 13.983293975556402\n\n\t* Gdotaccent (U+0120): L<<327.0,0.0>--<340.0,115.0>>/B<<340.0,115.0>-<321.0,64.0>-<285.5,27.0>> = 13.983293975556402\n\n\t* M (U+004D): L<<214.0,0.0>--<169.0,661.0>>/L<<169.0,661.0>--<64.0,0.0>> = 12.920643656569672\n\n\t* M (U+004D): L<<397.0,0.0>--<502.0,661.0>>/L<<502.0,661.0>--<245.0,0.0>> = 12.220289778392148 \n\n\t* trademark (U+2122): L<<450.0,418.0>--<494.0,695.0>>/L<<494.0,695.0>--<378.0,418.0>> = 13.696870634351301 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 29]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 29]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* g (U+0067): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=205.5,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=75.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=75.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=249.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=397.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 29]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* g (U+0067) contains a short segment B<<412.0,390.0>-<412.0,385.0>-<412.0,379.0>>\n\n\t* j (U+006A) contains a short segment L<<-79.0,-50.0>--<-73.0,-50.0>>\n\n\t* m (U+006D) contains a short segment B<<512.5,393.0>-<505.0,402.0>-<493.0,402.0>>\n\n\t* m (U+006D) contains a short segment B<<272.5,393.0>-<265.0,402.0>-<253.0,402.0>>\n\n\t* t (U+0074) contains a short segment B<<241.0,114.5>-<247.0,115.0>-<252.0,116.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<43.0,401.0>--<50.0,401.0>>\n\n\t* braceright (U+007D) contains a short segment L<<267.0,281.0>--<260.0,281.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<87.0,284.0>-<87.0,290.0>-<87.0,297.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<222.0,337.0>--<204.0,337.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<397.0,-76.0>-<403.0,-76.0>-<412.0,-73.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<332.0,-76.0>-<338.0,-76.0>-<347.0,-73.0>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<412.0,390.0>-<412.0,385.0>-<412.0,379.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<412.0,390.0>-<412.0,385.0>-<412.0,379.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<412.0,390.0>-<412.0,385.0>-<412.0,379.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<412.0,390.0>-<412.0,385.0>-<412.0,379.0>>\n\n\t* ij (U+0133) contains a short segment L<<135.0,-50.0>--<141.0,-50.0>>\n\n\t* jcircumflex (U+0135) contains a short segment L<<-79.0,-50.0>--<-73.0,-50.0>>\n\n\t* Eng (U+014A) contains a short segment B<<203.5,-173.5>-<192.0,-173.0>-<183.0,-172.0>>\n\n\t* Eng (U+014A) contains a short segment L<<202.0,-50.0>--<208.0,-50.0>>\n\n\t* eng (U+014B) contains a short segment L<<161.0,-50.0>--<167.0,-50.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<241.0,114.5>-<247.0,115.0>-<252.0,116.0>>\n\n\t* tcaron (U+0165) contains a short segment B<<241.0,114.5>-<247.0,115.0>-<252.0,116.0>>\n\n\t* tbar (U+0167) contains a short segment B<<238.0,114.0>-<244.0,114.0>-<250.0,114.5>>\n\n\t* tbar (U+0167) contains a short segment B<<250.0,114.5>-<256.0,115.0>-<261.0,116.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<239.0,-76.0>-<245.0,-76.0>-<254.0,-73.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<364.0,-76.0>-<370.0,-76.0>-<379.0,-73.0>>\n\n\t* uni021B (U+021B) contains a short segment B<<241.0,114.5>-<247.0,115.0>-<252.0,116.0>> \n\n\t* uni0237 (U+0237) contains a short segment L<<-79.0,-50.0>--<-73.0,-50.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 29]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 29]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<280.0,267.0>--<332.0,593.0>>/L<<332.0,593.0>--<207.0,267.0>> = 11.915745020760903\n\n\t* AEacute (U+01FC): L<<280.0,267.0>--<332.0,593.0>>/L<<332.0,593.0>--<207.0,267.0>> = 11.915745020760903\n\n\t* M (U+004D): L<<196.0,0.0>--<202.0,455.0>>/L<<202.0,455.0>--<130.0,0.0>> = 8.236519850791057\n\n\t* M (U+004D): L<<364.0,0.0>--<436.0,455.0>>/L<<436.0,455.0>--<297.0,0.0>> = 7.995599217471563\n\n\t* W (U+0057): L<<243.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<317.0,722.0>> = 11.362284692395885\n\n\t* W (U+0057): L<<305.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<216.0,0.0>> = 13.421120853146176\n\n\t* W (U+0057): L<<448.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<521.0,722.0>> = 11.139647461358305\n\n\t* Wacute (U+1E82): L<<243.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<317.0,722.0>> = 11.362284692395885\n\n\t* Wacute (U+1E82): L<<305.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<216.0,0.0>> = 13.421120853146176\n\n\t* Wacute (U+1E82): L<<448.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<521.0,722.0>> = 11.139647461358305\n\n\t* Wcircumflex (U+0174): L<<243.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<317.0,722.0>> = 11.362284692395885\n\n\t* Wcircumflex (U+0174): L<<305.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<216.0,0.0>> = 13.421120853146176\n\n\t* Wcircumflex (U+0174): L<<448.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<521.0,722.0>> = 11.139647461358305\n\n\t* Wdieresis (U+1E84): L<<243.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<317.0,722.0>> = 11.362284692395885\n\n\t* Wdieresis (U+1E84): L<<305.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<216.0,0.0>> = 13.421120853146176\n\n\t* Wdieresis (U+1E84): L<<448.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<521.0,722.0>> = 11.139647461358305\n\n\t* Wgrave (U+1E80): L<<243.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<317.0,722.0>> = 11.362284692395885\n\n\t* Wgrave (U+1E80): L<<305.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<216.0,0.0>> = 13.421120853146176\n\n\t* Wgrave (U+1E80): L<<448.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<521.0,722.0>> = 11.139647461358305\n\n\t* r (U+0072): L<<236.0,522.0>--<222.0,437.0>>/B<<222.0,437.0>-<244.0,489.0>-<277.5,509.5>> = 13.579121187496538\n\n\t* racute (U+0155): L<<236.0,522.0>--<222.0,437.0>>/B<<222.0,437.0>-<244.0,489.0>-<277.5,509.5>> = 13.579121187496538\n\n\t* rcaron (U+0159): L<<236.0,522.0>--<222.0,437.0>>/B<<222.0,437.0>-<244.0,489.0>-<277.5,509.5>> = 13.579121187496538\n\n\t* rcommaaccent (U+0157): L<<236.0,522.0>--<222.0,437.0>>/B<<222.0,437.0>-<244.0,489.0>-<277.5,509.5>> = 13.579121187496538\n\n\t* trademark (U+2122): L<<332.0,413.0>--<330.0,631.0>>/L<<330.0,631.0>--<295.0,413.0>> = 9.64666060098961\n\n\t* trademark (U+2122): L<<417.0,413.0>--<452.0,631.0>>/L<<452.0,631.0>--<382.0,413.0>> = 8.68084605695882\n\n\t* won (U+20A9): L<<239.0,722.0>--<212.0,358.0>>/L<<212.0,358.0>--<306.0,722.0>> = 10.23762204103771\n\n\t* won (U+20A9): L<<274.0,0.0>--<296.0,370.0>>/L<<296.0,370.0>--<205.0,0.0>> = 10.41464937757311 \n\n\t* won (U+20A9): L<<416.0,722.0>--<386.0,357.0>>/L<<386.0,357.0>--<472.0,722.0>> = 8.559336963235705 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 29]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 30]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 30]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=253.0,Y=-2.0 (should be at baseline 0?)\n\n\t* dollar (U+0024): X=253.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ampersand (U+0026): X=546.0,Y=0.5 (should be at baseline 0?)\n\n\t* f (U+0066): X=313.0,Y=723.0 (should be at cap-height 722?)\n\n\t* h (U+0068): X=242.5,Y=498.0 (should be at x-height 500?)\n\n\t* m (U+006D): X=240.0,Y=498.0 (should be at x-height 500?)\n\n\t* n (U+006E): X=242.5,Y=498.0 (should be at x-height 500?)\n\n\t* u (U+0075): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* y (U+0079): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* y (U+0079): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=172.0,Y=723.0 (should be at cap-height 722?)\n\n\t* braceright (U+007D): X=173.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=136.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=161.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=136.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=161.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=136.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=161.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=348.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=204.0,Y=720.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=222.0,Y=1.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=212.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=212.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=192.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=192.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ugrave (U+00F9): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* uacute (U+00FA): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* ucircumflex (U+00FB): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* udieresis (U+00FC): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* yacute (U+00FD): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* yacute (U+00FD): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* eogonek (U+0119): X=306.0,Y=-2.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=59.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=59.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=90.0,Y=1.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* umacron (U+016B): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* ubreve (U+016D): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* Uring (U+016E): X=294.0,Y=941.0 (should be at ascender 940?)\n\n\t* uring (U+016F): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* uhungarumlaut (U+0171): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=274.5,Y=2.0 (should be at baseline 0?)\n\n\t* ycircumflex (U+0177): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* ycircumflex (U+0177): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=430.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=250.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=250.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ygrave (U+1EF3): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* ygrave (U+1EF3): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=136.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=161.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=136.0,Y=723.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=161.0,Y=723.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 30]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* M (U+004D) contains a short segment L<<368.0,0.0>--<336.0,0.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<219.0,418.0>--<210.0,418.0>>\n\n\t* ae (U+00E6) contains a short segment L<<377.0,254.0>--<377.0,239.0>>\n\n\t* ae (U+00E6) contains a short segment B<<332.0,250.0>-<332.0,253.0>-<332.0,254.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<91.0,254.0>--<91.0,239.0>>\n\n\t* Eng (U+014A) contains a short segment B<<391.0,-141.5>-<405.0,-143.0>-<418.0,-143.0>>\n\n\t* oe (U+0153) contains a short segment L<<437.0,254.0>--<437.0,239.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<310.0,-11.0>-<302.0,-12.0>-<294.0,-12.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<377.0,254.0>--<377.0,239.0>>\n\n\t* aeacute (U+01FD) contains a short segment B<<332.0,250.0>-<332.0,253.0>-<332.0,254.0>> \n\n\t* uni20B9 (U+20B9) contains a short segment L<<391.0,531.0>--<391.0,529.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 30]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 30]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 30]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=334.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=271.0,Y=-1.0 (should be at baseline 0?)\n\n\t* J (U+004A): X=-3.0,Y=-1.5 (should be at baseline 0?)\n\n\t* Q (U+0051): X=107.0,Y=-2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=-39.0,Y=0.5 (should be at baseline 0?)\n\n\t* g (U+0067): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* t (U+0074): X=121.0,Y=-2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=136.0,Y=-1.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=170.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=170.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=191.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=191.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=179.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=179.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=200.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=-39.0,Y=0.5 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=-39.0,Y=0.5 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=-39.0,Y=0.5 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=-39.0,Y=0.5 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=96.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=96.0,Y=723.0 (should be at cap-height 722?)\n\n\t* iogonek (U+012F): X=-1.0,Y=-1.0 (should be at baseline 0?)\n\n\t* IJ (U+0132): X=142.0,Y=-1.5 (should be at baseline 0?)\n\n\t* Jcircumflex (U+0134): X=-3.0,Y=-1.5 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=121.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=121.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=131.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=191.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=191.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uogonek (U+0173): X=189.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni021B (U+021B): X=121.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tilde (U+02DC): X=325.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=325.0,Y=723.0 (should be at cap-height 722?)\n\n\t* quotesinglbase (U+201A): X=48.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=48.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=146.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=153.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=153.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<374.5,89.0>-<380.0,74.0>-<396.0,74.0>>\n\n\t* e (U+0065) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<48.0,362.0>--<57.0,362.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<155.0,-79.0>--<143.0,-79.0>>\n\n\t* braceright (U+007D) contains a short segment L<<200.0,320.0>--<191.0,320.0>>\n\n\t* braceright (U+007D) contains a short segment L<<93.0,761.0>--<105.0,761.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<91.0,394.0>-<91.0,401.0>-<91.0,408.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<148.0,407.0>-<148.0,401.0>-<148.0,394.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<211.0,400.0>--<203.0,400.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<105.0,47.0>-<114.0,43.0>-<122.5,40.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<122.5,40.0>-<131.0,37.0>-<140.0,37.0>>\n\n\t* ae (U+00E6) contains a short segment L<<243.0,258.0>--<243.0,255.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* emacron (U+0113) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<81.0,258.0>--<81.0,255.0>>\n\n\t* Lslash (U+0141) contains a short segment L<<180.0,465.0>--<178.0,455.0>>\n\n\t* Lslash (U+0141) contains a short segment L<<178.0,455.0>--<185.0,462.0>>\n\n\t* oe (U+0153) contains a short segment L<<280.0,258.0>--<280.0,255.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<117.0,-106.0>-<125.0,-112.0>-<136.0,-112.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<243.0,258.0>--<243.0,255.0>>\n\n\t* baht (U+0E3F) contains a short segment B<<200.0,722.0>-<207.0,722.0>-<213.0,722.0>>\n\n\t* uni2079 (U+2079) contains a short segment L<<184.0,547.0>--<184.0,547.0>>\n\n\t* uni2089 (U+2089) contains a short segment L<<114.0,105.0>--<114.0,105.0>>\n\n\t* peseta (U+20A7) contains a short segment B<<372.0,557.0>-<372.0,554.0>-<372.0,553.0>>\n\n\t* Euro (U+20AC) contains a short segment L<<145.0,394.0>--<144.0,390.0>> \n\n\t* peso (U+20B1) contains a short segment L<<372.0,560.0>--<372.0,557.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Euro (U+20AC): L<<145.0,394.0>--<144.0,390.0>> -> L<<144.0,390.0>--<138.0,355.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<229.0,265.0>--<293.0,674.0>>/L<<293.0,674.0>--<126.0,265.0>> = 13.317351203966137\n\n\t* AEacute (U+01FC): L<<229.0,265.0>--<293.0,674.0>>/L<<293.0,674.0>--<126.0,265.0>> = 13.317351203966137\n\n\t* G (U+0047): L<<220.0,0.0>--<227.0,92.0>>/B<<227.0,92.0>-<213.0,49.0>-<188.0,20.5>> = 13.683207615555968\n\n\t* Gbreve (U+011E): L<<220.0,0.0>--<227.0,92.0>>/B<<227.0,92.0>-<213.0,49.0>-<188.0,20.5>> = 13.683207615555968\n\n\t* Gcircumflex (U+011C): L<<220.0,0.0>--<227.0,92.0>>/B<<227.0,92.0>-<213.0,49.0>-<188.0,20.5>> = 13.683207615555968\n\n\t* Gcommaaccent (U+0122): L<<220.0,0.0>--<227.0,92.0>>/B<<227.0,92.0>-<213.0,49.0>-<188.0,20.5>> = 13.683207615555968\n\n\t* Gdotaccent (U+0120): L<<220.0,0.0>--<227.0,92.0>>/B<<227.0,92.0>-<213.0,49.0>-<188.0,20.5>> = 13.683207615555968\n\n\t* M (U+004D): L<<145.0,0.0>--<153.0,625.0>>/L<<153.0,625.0>--<54.0,0.0>> = 8.267523755943031\n\n\t* M (U+004D): L<<283.0,0.0>--<382.0,625.0>>/L<<382.0,625.0>--<187.0,0.0>> = 8.32705209224667\n\n\t* W (U+0057): L<<140.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<259.0,722.0>> = 11.734465007872998\n\n\t* W (U+0057): L<<241.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<109.0,0.0>> = 12.583147336067777\n\n\t* W (U+0057): L<<320.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<440.0,722.0>> = 11.880005445926896\n\n\t* Wacute (U+1E82): L<<140.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<259.0,722.0>> = 11.734465007872998\n\n\t* Wacute (U+1E82): L<<241.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<109.0,0.0>> = 12.583147336067777\n\n\t* Wacute (U+1E82): L<<320.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<440.0,722.0>> = 11.880005445926896\n\n\t* Wcircumflex (U+0174): L<<140.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<259.0,722.0>> = 11.734465007872998\n\n\t* Wcircumflex (U+0174): L<<241.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<109.0,0.0>> = 12.583147336067777\n\n\t* Wcircumflex (U+0174): L<<320.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<440.0,722.0>> = 11.880005445926896\n\n\t* Wdieresis (U+1E84): L<<140.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<259.0,722.0>> = 11.734465007872998\n\n\t* Wdieresis (U+1E84): L<<241.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<109.0,0.0>> = 12.583147336067777\n\n\t* Wdieresis (U+1E84): L<<320.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<440.0,722.0>> = 11.880005445926896\n\n\t* Wgrave (U+1E80): L<<140.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<259.0,722.0>> = 11.734465007872998\n\n\t* Wgrave (U+1E80): L<<241.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<109.0,0.0>> = 12.583147336067777\n\n\t* Wgrave (U+1E80): L<<320.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<440.0,722.0>> = 11.880005445926896\n\n\t* four (U+0034): L<<158.0,238.0>--<220.0,629.0>>/L<<220.0,629.0>--<61.0,238.0>> = 13.118851498529795\n\n\t* naira (U+20A6): L<<201.0,0.0>--<172.0,616.0>>/L<<172.0,616.0>--<74.0,0.0>> = 11.73485894052247\n\n\t* naira (U+20A6): L<<215.0,722.0>--<236.0,238.0>>/L<<236.0,238.0>--<312.0,722.0>> = 11.408404112930848\n\n\t* onequarter (U+00BC): L<<347.0,137.0>--<377.0,324.0>>/L<<377.0,324.0>--<298.0,137.0>> = 13.787932829520054\n\n\t* threequarters (U+00BE): L<<358.0,137.0>--<388.0,324.0>>/L<<388.0,324.0>--<309.0,137.0>> = 13.787932829520054\n\n\t* trademark (U+2122): L<<311.0,427.0>--<300.0,688.0>>/L<<300.0,688.0>--<259.0,427.0>> = 11.340866024777961\n\n\t* trademark (U+2122): L<<393.0,427.0>--<434.0,688.0>>/L<<434.0,688.0>--<341.0,427.0>> = 10.684564116976007\n\n\t* uni2074 (U+2074): L<<138.0,459.0>--<168.0,646.0>>/L<<168.0,646.0>--<89.0,459.0>> = 13.787932829520054\n\n\t* uni2084 (U+2084): L<<68.0,17.0>--<98.0,204.0>>/L<<98.0,204.0>--<19.0,17.0>> = 13.787932829520054\n\n\t* won (U+20A9): L<<157.0,722.0>--<114.0,175.0>>/L<<114.0,175.0>--<248.0,722.0>> = 9.270006216072353\n\n\t* won (U+20A9): L<<214.0,0.0>--<253.0,562.0>>/L<<253.0,562.0>--<116.0,0.0>> = 9.730242319695066 \n\n\t* won (U+20A9): L<<310.0,722.0>--<270.0,175.0>>/L<<270.0,175.0>--<399.0,722.0>> = 9.087332823672032 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 32]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 32]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=464.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=261.0,Y=1.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=260.0,Y=-1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=-34.5,Y=-1.5 (should be at baseline 0?)\n\n\t* g (U+0067): X=65.0,Y=-0.5 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=233.0,Y=2.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=296.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=295.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=242.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=236.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=199.0,Y=-2.0 (should be at baseline 0?)\n\n\t* eogonek (U+0119): X=269.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=-34.5,Y=-1.5 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=65.0,Y=-0.5 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=-34.5,Y=-1.5 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=65.0,Y=-0.5 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=-34.5,Y=-1.5 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=65.0,Y=-0.5 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=-34.5,Y=-1.5 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=65.0,Y=-0.5 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=52.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=-13.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=38.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=-16.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=267.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=213.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2087 (U+2087): X=151.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=225.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=225.0,Y=2.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=239.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=367.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 32]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* R (U+0052) contains a short segment B<<221.0,308.0>-<214.0,307.0>-<208.0,307.0>>\n\n\t* R (U+0052) contains a short segment B<<208.0,307.0>-<202.0,307.0>-<195.0,307.0>>\n\n\t* f (U+0066) contains a short segment B<<302.0,625.0>-<295.0,626.0>-<290.0,626.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<43.0,392.0>--<49.0,392.0>>\n\n\t* braceright (U+007D) contains a short segment L<<250.0,290.0>--<244.0,290.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<88.0,269.0>-<88.0,278.0>-<87.5,288.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<243.0,308.0>-<243.0,298.0>-<243.0,290.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<220.0,345.0>--<205.0,345.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<357.0,-85.0>-<362.0,-85.0>-<366.5,-83.5>>\n\n\t* Aogonek (U+0104) contains a short segment B<<366.5,-83.5>-<371.0,-82.0>-<376.0,-81.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<300.0,-85.0>-<305.0,-85.0>-<309.5,-83.5>>\n\n\t* aogonek (U+0105) contains a short segment B<<309.5,-83.5>-<314.0,-82.0>-<319.0,-81.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<279.0,-85.0>-<283.0,-85.0>-<288.0,-83.5>>\n\n\t* eogonek (U+0119) contains a short segment B<<288.0,-83.5>-<293.0,-82.0>-<297.0,-81.0>>\n\n\t* Iogonek (U+012E) contains a short segment B<<113.0,-85.0>-<118.0,-85.0>-<123.0,-83.5>>\n\n\t* Iogonek (U+012E) contains a short segment B<<123.0,-83.5>-<128.0,-82.0>-<132.0,-81.0>>\n\n\t* iogonek (U+012F) contains a short segment B<<101.0,-85.0>-<106.0,-85.0>-<110.5,-83.5>>\n\n\t* iogonek (U+012F) contains a short segment B<<110.5,-83.5>-<115.0,-82.0>-<120.0,-81.0>>\n\n\t* Eng (U+014A) contains a short segment B<<180.0,-63.0>-<184.0,-64.0>-<188.0,-64.5>>\n\n\t* Eng (U+014A) contains a short segment B<<188.0,-64.5>-<192.0,-65.0>-<196.0,-65.0>>\n\n\t* eng (U+014B) contains a short segment B<<145.0,-63.0>-<153.0,-65.0>-<160.0,-65.0>>\n\n\t* Racute (U+0154) contains a short segment B<<221.0,308.0>-<214.0,307.0>-<208.0,307.0>>\n\n\t* Racute (U+0154) contains a short segment B<<208.0,307.0>-<202.0,307.0>-<195.0,307.0>>\n\n\t* Rcommaaccent (U+0156) contains a short segment B<<221.0,308.0>-<214.0,307.0>-<208.0,307.0>>\n\n\t* Rcommaaccent (U+0156) contains a short segment B<<208.0,307.0>-<202.0,307.0>-<195.0,307.0>>\n\n\t* Rcaron (U+0158) contains a short segment B<<221.0,308.0>-<214.0,307.0>-<208.0,307.0>>\n\n\t* Rcaron (U+0158) contains a short segment B<<208.0,307.0>-<202.0,307.0>-<195.0,307.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<218.0,-85.0>-<223.0,-85.0>-<227.5,-83.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<227.5,-83.5>-<232.0,-82.0>-<236.0,-81.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<330.0,-85.0>-<335.0,-85.0>-<339.5,-83.5>> \n\n\t* uogonek (U+0173) contains a short segment B<<339.5,-83.5>-<344.0,-82.0>-<349.0,-81.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 32]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 32]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<270.0,269.0>--<325.0,614.0>>/L<<325.0,614.0>--<191.0,269.0>> = 12.168570466309827\n\n\t* AEacute (U+01FC): L<<270.0,269.0>--<325.0,614.0>>/L<<325.0,614.0>--<191.0,269.0>> = 12.168570466309827\n\n\t* M (U+004D): L<<185.0,0.0>--<193.0,496.0>>/L<<193.0,496.0>--<114.0,0.0>> = 8.125679355914215\n\n\t* M (U+004D): L<<348.0,0.0>--<427.0,496.0>>/L<<427.0,496.0>--<274.0,0.0>> = 8.093582001111669\n\n\t* W (U+0057): L<<220.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<306.0,722.0>> = 11.730073686117509\n\n\t* W (U+0057): L<<294.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<194.0,0.0>> = 13.376447353049887\n\n\t* W (U+0057): L<<422.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<508.0,722.0>> = 11.685857208814994\n\n\t* Wacute (U+1E82): L<<220.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<306.0,722.0>> = 11.730073686117509\n\n\t* Wacute (U+1E82): L<<294.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<194.0,0.0>> = 13.376447353049887\n\n\t* Wacute (U+1E82): L<<422.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<508.0,722.0>> = 11.685857208814994\n\n\t* Wcircumflex (U+0174): L<<220.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<306.0,722.0>> = 11.730073686117509\n\n\t* Wcircumflex (U+0174): L<<294.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<194.0,0.0>> = 13.376447353049887\n\n\t* Wcircumflex (U+0174): L<<422.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<508.0,722.0>> = 11.685857208814994\n\n\t* Wdieresis (U+1E84): L<<220.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<306.0,722.0>> = 11.730073686117509\n\n\t* Wdieresis (U+1E84): L<<294.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<194.0,0.0>> = 13.376447353049887\n\n\t* Wdieresis (U+1E84): L<<422.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<508.0,722.0>> = 11.685857208814994\n\n\t* Wgrave (U+1E80): L<<220.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<306.0,722.0>> = 11.730073686117509\n\n\t* Wgrave (U+1E80): L<<294.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<194.0,0.0>> = 13.376447353049887\n\n\t* Wgrave (U+1E80): L<<422.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<508.0,722.0>> = 11.685857208814994\n\n\t* trademark (U+2122): L<<333.0,417.0>--<328.0,644.0>>/L<<328.0,644.0>--<292.0,417.0>> = 10.273323889624251\n\n\t* trademark (U+2122): L<<418.0,417.0>--<454.0,644.0>>/L<<454.0,644.0>--<379.0,417.0>> = 9.271866689515553\n\n\t* won (U+20A9): L<<221.0,722.0>--<192.0,318.0>>/L<<192.0,318.0>--<294.0,722.0>> = 10.063870737610493\n\n\t* won (U+20A9): L<<264.0,0.0>--<289.0,411.0>>/L<<289.0,411.0>--<188.0,0.0>> = 10.325548933596686 \n\n\t* won (U+20A9): L<<397.0,722.0>--<365.0,317.0>>/L<<365.0,317.0>--<461.0,722.0>> = 8.817418039351436 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 32]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=308.0,Y=-1.0 (should be at baseline 0?)\n\n\t* at (U+0040): X=133.5,Y=-2.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=205.0,Y=-2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=189.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=104.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=104.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=125.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=125.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=113.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=113.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=30.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=30.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=125.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=125.0,Y=723.0 (should be at cap-height 722?)\n\n\t* florin (U+0192): X=274.0,Y=721.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=259.0,Y=723.0 (should be at cap-height 722?) \n\n\t* tilde (U+02DC): X=259.0,Y=723.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<386.0,89.0>-<392.0,74.0>-<408.0,74.0>>\n\n\t* e (U+0065) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<32.0,362.0>--<42.0,362.0>>\n\n\t* braceright (U+007D) contains a short segment L<<190.0,320.0>--<180.0,320.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<188.0,391.0>--<180.0,391.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<174.0,-6.0>-<166.0,-6.0>-<157.0,-5.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<157.0,-5.0>-<148.0,-4.0>-<138.0,0.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<138.0,43.0>-<146.0,40.0>-<155.0,39.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<155.0,39.0>-<164.0,38.0>-<171.0,38.0>>\n\n\t* ae (U+00E6) contains a short segment L<<244.0,258.0>--<244.0,249.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* emacron (U+0113) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<82.0,258.0>--<82.0,249.0>>\n\n\t* Lslash (U+0141) contains a short segment L<<147.0,465.0>--<147.0,455.0>>\n\n\t* Lslash (U+0141) contains a short segment L<<147.0,455.0>--<153.0,462.0>>\n\n\t* Eng (U+014A) contains a short segment B<<218.0,-171.0>-<204.0,-171.0>-<193.0,-170.0>>\n\n\t* Eng (U+014A) contains a short segment B<<193.0,-170.0>-<182.0,-169.0>-<168.0,-165.0>>\n\n\t* Eng (U+014A) contains a short segment B<<168.0,-117.0>-<179.0,-118.0>-<187.0,-119.0>>\n\n\t* Eng (U+014A) contains a short segment B<<187.0,-119.0>-<195.0,-120.0>-<205.0,-120.0>>\n\n\t* oe (U+0153) contains a short segment L<<282.0,258.0>--<282.0,249.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<220.0,-146.0>-<210.0,-150.0>-<200.5,-153.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<200.5,-153.0>-<191.0,-156.0>-<180.0,-156.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<244.0,258.0>--<244.0,249.0>>\n\n\t* baht (U+0E3F) contains a short segment L<<140.0,0.0>--<135.0,0.0>>\n\n\t* baht (U+0E3F) contains a short segment B<<131.0,722.0>-<136.0,722.0>-<140.0,722.0>>\n\n\t* uni2076 (U+2076) contains a short segment L<<78.0,495.0>--<78.0,495.0>>\n\n\t* uni2079 (U+2079) contains a short segment L<<141.0,549.0>--<141.0,549.0>>\n\n\t* uni2086 (U+2086) contains a short segment L<<78.0,53.0>--<78.0,53.0>>\n\n\t* uni2089 (U+2089) contains a short segment L<<141.0,107.0>--<141.0,107.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<123.0,394.0>-<123.0,386.0>-<123.0,377.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<123.0,345.0>-<123.0,337.0>-<123.0,330.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* baht (U+0E3F): L<<140.0,0.0>--<135.0,0.0>> -> L<<135.0,0.0>--<41.0,0.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<186.0,0.0>--<95.0,625.0>>/L<<95.0,625.0>--<95.0,0.0>> = 8.284053921443984\n\n\t* M (U+004D): L<<324.0,0.0>--<324.0,625.0>>/L<<324.0,625.0>--<228.0,0.0>> = 8.732384270873432\n\n\t* W (U+0057): L<<250.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<370.0,722.0>> = 12.14431331256619\n\n\t* W (U+0057): L<<282.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<150.0,0.0>> = 12.895699959626839\n\n\t* W (U+0057): L<<71.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<189.0,722.0>> = 11.943382758451724\n\n\t* Wacute (U+1E82): L<<250.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<370.0,722.0>> = 12.14431331256619\n\n\t* Wacute (U+1E82): L<<282.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<150.0,0.0>> = 12.895699959626839\n\n\t* Wacute (U+1E82): L<<71.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<189.0,722.0>> = 11.943382758451724\n\n\t* Wcircumflex (U+0174): L<<250.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<370.0,722.0>> = 12.14431331256619\n\n\t* Wcircumflex (U+0174): L<<282.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<150.0,0.0>> = 12.895699959626839\n\n\t* Wcircumflex (U+0174): L<<71.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<189.0,722.0>> = 11.943382758451724\n\n\t* Wdieresis (U+1E84): L<<250.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<370.0,722.0>> = 12.14431331256619\n\n\t* Wdieresis (U+1E84): L<<282.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<150.0,0.0>> = 12.895699959626839\n\n\t* Wdieresis (U+1E84): L<<71.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<189.0,722.0>> = 11.943382758451724\n\n\t* Wgrave (U+1E80): L<<250.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<370.0,722.0>> = 12.14431331256619\n\n\t* Wgrave (U+1E80): L<<282.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<150.0,0.0>> = 12.895699959626839\n\n\t* Wgrave (U+1E80): L<<71.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<189.0,722.0>> = 11.943382758451724\n\n\t* asterisk (U+002A): L<<150.0,647.0>--<154.0,688.0>>/L<<154.0,688.0>--<153.0,677.0>> = 0.37776889622800824\n\n\t* four (U+0034): L<<161.0,238.0>--<161.0,641.0>>/L<<161.0,641.0>--<61.0,238.0>> = 13.935842087901696\n\n\t* naira (U+20A6): L<<142.0,722.0>--<239.0,249.0>>/L<<239.0,249.0>--<239.0,722.0>> = 11.589194825602867\n\n\t* naira (U+20A6): L<<242.0,0.0>--<115.0,606.0>>/L<<115.0,606.0>--<115.0,0.0>> = 11.836233035572075\n\n\t* trademark (U+2122): L<<284.0,427.0>--<232.0,688.0>>/L<<232.0,688.0>--<232.0,427.0>> = 11.267710094402245\n\n\t* trademark (U+2122): L<<366.0,427.0>--<366.0,688.0>>/L<<366.0,688.0>--<314.0,427.0>> = 11.267710094402245\n\n\t* won (U+20A9): L<<238.0,722.0>--<285.0,175.0>>/L<<285.0,175.0>--<327.0,722.0>> = 9.301671166816673\n\n\t* won (U+20A9): L<<254.0,0.0>--<205.0,565.0>>/L<<205.0,565.0>--<156.0,0.0>> = 9.91322508479597 \n\n\t* won (U+20A9): L<<86.0,722.0>--<129.0,175.0>>/L<<129.0,175.0>--<176.0,722.0>> = 9.40578809419994 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* f (U+0066): X=324.0,Y=723.0 (should be at cap-height 722?)\n\n\t* t (U+0074): X=137.5,Y=0.5 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=168.0,Y=1.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=231.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=373.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=491.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=231.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=231.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=373.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=491.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=231.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=252.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=394.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=512.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=252.0,Y=941.0 (should be at ascender 940?)\n\n\t* germandbls (U+00DF): X=281.5,Y=-2.0 (should be at baseline 0?)\n\n\t* Itilde (U+0128): X=73.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=215.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=333.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=73.0,Y=941.0 (should be at ascender 940?)\n\n\t* oe (U+0153): X=457.0,Y=1.5 (should be at baseline 0?)\n\n\t* oe (U+0153): X=330.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=137.5,Y=0.5 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=137.5,Y=0.5 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=152.5,Y=1.5 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=225.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=367.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=485.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=225.0,Y=941.0 (should be at ascender 940?)\n\n\t* uni021B (U+021B): X=137.5,Y=0.5 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=319.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=6.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=213.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=185.5,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* g (U+0067) contains a short segment B<<452.0,377.0>-<453.0,368.0>-<453.0,359.0>>\n\n\t* j (U+006A) contains a short segment B<<-39.0,-39.0>-<-34.0,-40.0>-<-30.0,-40.5>>\n\n\t* j (U+006A) contains a short segment B<<-30.0,-40.5>-<-26.0,-41.0>-<-22.0,-41.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<25.0,391.0>--<39.0,391.0>>\n\n\t* braceright (U+007D) contains a short segment L<<308.0,271.0>--<294.0,271.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<215.0,327.0>--<202.0,327.0>>\n\n\t* oslash (U+00F8) contains a short segment L<<193.0,235.0>--<193.0,233.0>>\n\n\t* oslash (U+00F8) contains a short segment B<<314.0,277.0>-<314.0,277.0>-<314.0,278.0>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<452.0,377.0>-<453.0,368.0>-<453.0,359.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<452.0,377.0>-<453.0,368.0>-<453.0,359.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<452.0,377.0>-<453.0,368.0>-<453.0,359.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<452.0,377.0>-<453.0,368.0>-<453.0,359.0>>\n\n\t* ij (U+0133) contains a short segment B<<213.0,-39.0>-<218.0,-40.0>-<222.0,-40.5>>\n\n\t* ij (U+0133) contains a short segment B<<222.0,-40.5>-<226.0,-41.0>-<230.0,-41.0>>\n\n\t* jcircumflex (U+0135) contains a short segment B<<-39.0,-39.0>-<-34.0,-40.0>-<-30.0,-40.5>>\n\n\t* jcircumflex (U+0135) contains a short segment B<<-30.0,-40.5>-<-26.0,-41.0>-<-22.0,-41.0>>\n\n\t* Eng (U+014A) contains a short segment B<<343.0,-177.0>-<331.0,-176.0>-<320.0,-175.0>>\n\n\t* Eng (U+014A) contains a short segment B<<320.0,-39.0>-<326.0,-40.0>-<330.0,-40.5>>\n\n\t* Eng (U+014A) contains a short segment B<<330.0,-40.5>-<334.0,-41.0>-<338.0,-41.0>>\n\n\t* eng (U+014B) contains a short segment B<<233.0,-39.0>-<238.0,-40.0>-<242.0,-40.5>>\n\n\t* eng (U+014B) contains a short segment B<<242.0,-40.5>-<246.0,-41.0>-<250.0,-41.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<358.0,-80.0>-<366.0,-80.0>-<378.0,-77.0>>\n\n\t* oslashacute (U+01FF) contains a short segment L<<193.0,235.0>--<193.0,233.0>>\n\n\t* oslashacute (U+01FF) contains a short segment B<<314.0,277.0>-<314.0,277.0>-<314.0,278.0>>\n\n\t* uni0237 (U+0237) contains a short segment B<<-39.0,-39.0>-<-34.0,-40.0>-<-30.0,-40.5>>\n\n\t* uni0237 (U+0237) contains a short segment B<<-30.0,-40.5>-<-26.0,-41.0>-<-22.0,-41.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<45.0,347.0>-<45.0,352.0>-<45.0,358.0>> \n\n\t* peso (U+20B1) contains a short segment B<<605.0,492.0>-<605.0,484.0>-<605.0,476.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* oslash (U+00F8): L<<193.0,282.0>--<193.0,235.0>> -> L<<193.0,235.0>--<193.0,233.0>> \n\n\t* oslashacute (U+01FF): L<<193.0,282.0>--<193.0,235.0>> -> L<<193.0,235.0>--<193.0,233.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<298.0,0.0>--<198.0,464.0>>/L<<198.0,464.0>--<198.0,0.0>> = 12.16220351968183\n\n\t* M (U+004D): L<<506.0,0.0>--<506.0,464.0>>/L<<506.0,464.0>--<407.0,0.0>> = 12.044149894960034\n\n\t* trademark (U+2122): L<<431.0,391.0>--<379.0,612.0>>/L<<379.0,612.0>--<379.0,391.0>> = 13.24051991518721 \n\n\t* trademark (U+2122): L<<543.0,391.0>--<543.0,612.0>>/L<<543.0,612.0>--<493.0,391.0>> = 12.748225610237627 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have semi-vertical/semi-horizontal lines:\n\n\t* ordfeminine (U+00AA): L<<163.0,599.0>--<23.0,600.0>> [code: found-semi-vertical]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=555.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=458.5,Y=-0.5 (should be at baseline 0?)\n\n\t* Q (U+0051): X=336.0,Y=1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=277.0,Y=723.0 (should be at cap-height 722?)\n\n\t* y (U+0079): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* y (U+0079): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=128.5,Y=724.0 (should be at cap-height 722?)\n\n\t* braceright (U+007D): X=163.5,Y=723.5 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=165.0,Y=-2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=271.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=38.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=497.0,Y=723.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=209.0,Y=2.0 (should be at baseline 0?)\n\n\t* yacute (U+00FD): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* yacute (U+00FD): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=233.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tcaron (U+0165): X=342.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ycircumflex (U+0177): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* ycircumflex (U+0177): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=38.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=497.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ygrave (U+1EF3): X=163.0,Y=2.0 (should be at baseline 0?) \n\n\t* ygrave (U+1EF3): X=163.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* paragraph (U+00B6) contains a short segment L<<200.0,348.0>--<190.0,348.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<209.0,79.0>-<221.0,76.0>-<230.0,75.5>>\n\n\t* germandbls (U+00DF) contains a short segment B<<230.0,75.5>-<239.0,75.0>-<249.0,75.0>>\n\n\t* ae (U+00E6) contains a short segment L<<370.0,238.0>--<370.0,237.0>>\n\n\t* Eng (U+014A) contains a short segment B<<278.0,-87.0>-<293.0,-90.0>-<304.0,-91.0>>\n\n\t* Eng (U+014A) contains a short segment B<<304.0,-91.0>-<315.0,-92.0>-<326.0,-92.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<370.0,238.0>--<370.0,237.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<180.0,334.0>-<180.0,330.0>-<180.0,329.0>> \n\n\t* Euro (U+20AC) contains a short segment L<<180.0,397.0>--<180.0,389.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Euro (U+20AC): L<<180.0,397.0>--<180.0,389.0>> -> L<<180.0,389.0>--<180.0,334.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<283.0,0.0>--<154.0,592.0>>/L<<154.0,592.0>--<154.0,0.0>> = 12.292897311398544\n\n\t* M (U+004D): L<<483.0,0.0>--<483.0,592.0>>/L<<483.0,592.0>--<352.0,0.0>> = 12.477559261715635\n\n\t* trademark (U+2122): L<<387.0,407.0>--<324.0,660.0>>/L<<324.0,660.0>--<324.0,407.0>> = 13.982945083753037 \n\n\t* trademark (U+2122): L<<499.0,407.0>--<499.0,660.0>>/L<<499.0,660.0>--<437.0,407.0>> = 13.769505266889137 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 36]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 36]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* j (U+006A): X=7.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=221.5,Y=1.5 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=64.0,Y=1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=161.0,Y=1.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=365.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=546.0,Y=942.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=659.0,Y=942.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=365.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=375.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=556.0,Y=942.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=669.0,Y=942.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=375.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=387.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=568.0,Y=942.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=681.0,Y=942.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=387.0,Y=941.0 (should be at ascender 940?)\n\n\t* germandbls (U+00DF): X=275.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Itilde (U+0128): X=174.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=355.0,Y=942.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=468.0,Y=942.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=174.0,Y=941.0 (should be at ascender 940?)\n\n\t* ij (U+0133): X=285.0,Y=2.0 (should be at baseline 0?)\n\n\t* jcircumflex (U+0135): X=7.0,Y=2.0 (should be at baseline 0?)\n\n\t* Eng (U+014A): X=438.0,Y=2.0 (should be at baseline 0?)\n\n\t* eng (U+014B): X=311.0,Y=2.0 (should be at baseline 0?)\n\n\t* eng (U+014B): X=311.0,Y=2.0 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=368.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=549.0,Y=942.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=662.0,Y=942.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=368.0,Y=941.0 (should be at ascender 940?)\n\n\t* uni0237 (U+0237): X=7.0,Y=2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=481.0,Y=720.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=366.0,Y=1.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=127.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=729.0,Y=721.0 (should be at cap-height 722?) \n\n\t* uni2089 (U+2089): X=311.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 36]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* at (U+0040) contains a short segment B<<628.0,150.0>-<636.0,135.0>-<656.0,135.0>>\n\n\t* g (U+0067) contains a short segment B<<175.0,182.5>-<167.0,175.0>-<167.0,166.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<129.0,258.0>-<129.0,267.0>-<128.5,277.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<128.5,277.0>-<128.0,287.0>-<127.0,297.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<224.0,323.0>--<216.0,323.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<265.0,-12.0>-<259.0,-12.0>-<254.0,-12.0>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<175.0,182.5>-<167.0,175.0>-<167.0,166.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<175.0,182.5>-<167.0,175.0>-<167.0,166.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<175.0,182.5>-<167.0,175.0>-<167.0,166.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<175.0,182.5>-<167.0,175.0>-<167.0,166.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<325.0,-70.0>-<325.0,-80.0>-<332.5,-88.0>> \n\n\t* peso (U+20B1) contains a short segment B<<702.0,512.0>-<702.0,505.0>-<702.0,498.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 36]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 36]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 36]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 37]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 37]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=560.5,Y=2.0 (should be at baseline 0?)\n\n\t* parenright (U+0029): X=186.0,Y=-0.5 (should be at baseline 0?)\n\n\t* Q (U+0051): X=420.0,Y=1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=332.0,Y=721.0 (should be at cap-height 722?)\n\n\t* r (U+0072): X=291.5,Y=501.0 (should be at x-height 503?)\n\n\t* t (U+0074): X=155.0,Y=0.5 (should be at baseline 0?)\n\n\t* onesuperior (U+00B9): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=312.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=58.0,Y=2.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=610.0,Y=720.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=253.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=155.0,Y=0.5 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=155.0,Y=0.5 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=171.0,Y=1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=79.0,Y=-1.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=552.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=414.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=58.0,Y=2.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=610.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uni021B (U+021B): X=155.0,Y=0.5 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=376.0,Y=720.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=376.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=225.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=743.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=300.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=480.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=37.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 37]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* paragraph (U+00B6) contains a short segment L<<200.0,336.0>--<190.0,336.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<278.0,83.5>-<288.0,83.0>-<300.0,83.0>>\n\n\t* ae (U+00E6) contains a short segment L<<440.0,232.0>--<440.0,231.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<440.0,232.0>--<440.0,231.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<204.0,332.0>-<204.0,326.0>-<204.0,322.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<204.0,403.0>-<204.0,398.0>-<204.0,391.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 37]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 37]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 37]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 38]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 38]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=243.0,Y=1.0 (should be at baseline 0?)\n\n\t* dollar (U+0024): X=243.0,Y=720.0 (should be at cap-height 722?)\n\n\t* d (U+0064): X=294.0,Y=1.0 (should be at baseline 0?)\n\n\t* r (U+0072): X=261.0,Y=501.5 (should be at x-height 500?)\n\n\t* onesuperior (U+00B9): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=287.0,Y=724.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=233.0,Y=1.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=177.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=177.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=215.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=215.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=193.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=193.0,Y=723.0 (should be at cap-height 722?)\n\n\t* dcaron (U+010F): X=294.0,Y=1.0 (should be at baseline 0?)\n\n\t* dcroat (U+0111): X=294.0,Y=1.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=59.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=59.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=94.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=90.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=82.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=209.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=209.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uogonek (U+0173): X=384.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=504.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=419.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=243.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=243.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=342.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=744.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=313.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=470.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=40.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 38]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* e (U+0065) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<205.0,377.0>--<195.0,377.0>>\n\n\t* ae (U+00E6) contains a short segment L<<399.0,244.0>--<399.0,237.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<507.0,-143.0>-<516.0,-143.0>-<525.0,-141.5>>\n\n\t* emacron (U+0113) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<110.0,244.0>--<110.0,237.0>>\n\n\t* oe (U+0153) contains a short segment L<<455.0,244.0>--<455.0,237.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<364.0,-143.0>-<373.0,-143.0>-<382.0,-141.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<382.0,-141.5>-<391.0,-140.0>-<404.0,-137.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<317.0,-12.0>-<310.0,-12.0>-<304.0,-12.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<419.0,-143.0>-<428.0,-143.0>-<437.0,-141.5>> \n\n\t* aeacute (U+01FD) contains a short segment L<<399.0,244.0>--<399.0,237.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 38]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 38]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 38]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 39]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 39]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=309.0,Y=721.0 (should be at cap-height 722?)\n\n\t* dollar (U+0024): X=283.0,Y=2.0 (should be at baseline 0?)\n\n\t* one (U+0031): X=316.0,Y=724.0 (should be at cap-height 722?)\n\n\t* one (U+0031): X=372.0,Y=724.0 (should be at cap-height 722?)\n\n\t* at (U+0040): X=82.0,Y=2.0 (should be at baseline 0?)\n\n\t* t (U+0074): X=120.0,Y=2.0 (should be at baseline 0?)\n\n\t* onesuperior (U+00B9): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=380.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=645.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=26.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=120.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=120.0,Y=2.0 (should be at baseline 0?)\n\n\t* tbar (U+0167): X=140.0,Y=2.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=108.0,Y=1.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=489.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=601.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=645.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=26.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni021B (U+021B): X=120.0,Y=2.0 (should be at baseline 0?)\n\n\t* Germandbls (U+1E9E): X=280.0,Y=-1.5 (should be at baseline 0?)\n\n\t* uni2080 (U+2080): X=285.5,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=23.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=275.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=275.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=262.0,Y=-0.5 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=812.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=378.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=503.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=69.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 39]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* paragraph (U+00B6) contains a short segment L<<207.0,343.0>--<197.0,343.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<240.0,-12.0>-<235.0,-12.0>-<230.0,-12.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<349.0,-176.0>-<339.0,-180.0>-<327.5,-183.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<206.0,407.0>-<205.0,402.0>-<204.0,396.0>> \n\n\t* peso (U+20B1) contains a short segment B<<592.0,525.0>-<592.0,521.0>-<592.0,516.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 39]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 39]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 39]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message: 'All glyphs have the recommended amount of contours',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* J (U+004A): X=1.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=113.0,Y=-1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=-40.5,Y=-0.5 (should be at baseline 0?)\n\n\t* oslash (U+00F8): X=-21.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=-40.5,Y=-0.5 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=-40.5,Y=-0.5 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=-40.5,Y=-0.5 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=-40.5,Y=-0.5 (should be at baseline 0?)\n\n\t* IJ (U+0132): X=162.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Jcircumflex (U+0134): X=1.0,Y=-2.0 (should be at baseline 0?)\n\n\t* oslashacute (U+01FF): X=-21.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2085 (U+2085): X=-28.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2085 (U+2085): X=34.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2086 (U+2086): X=-14.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=174.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=174.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* six (U+0036) contains a short segment L<<120.0,390.0>--<120.0,390.0>>\n\n\t* nine (U+0039) contains a short segment L<<241.0,331.0>--<241.0,331.0>>\n\n\t* at (U+0040) contains a short segment B<<419.5,103.5>-<426.0,89.0>-<441.0,89.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<42.0,366.0>--<47.0,366.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<279.0,709.0>--<267.0,709.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<154.0,-79.0>--<145.0,-79.0>>\n\n\t* braceright (U+007D) contains a short segment L<<202.0,316.0>--<197.0,316.0>>\n\n\t* braceright (U+007D) contains a short segment L<<-35.0,-27.0>--<-23.0,-27.0>>\n\n\t* braceright (U+007D) contains a short segment L<<90.0,761.0>--<99.0,761.0>>\n\n\t* paragraph (U+00B6) contains a short segment L<<213.0,367.0>--<206.0,367.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<119.0,58.0>-<128.0,54.0>-<136.5,51.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<136.5,51.0>-<145.0,48.0>-<154.0,48.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<242.0,-111.0>-<250.0,-111.0>-<257.5,-108.5>>\n\n\t* Aogonek (U+0104) contains a short segment B<<257.5,-108.5>-<265.0,-106.0>-<271.0,-103.0>>\n\n\t* Eng (U+014A) contains a short segment B<<118.0,-102.0>-<128.0,-104.0>-<139.5,-106.0>>\n\n\t* Eng (U+014A) contains a short segment B<<139.5,-106.0>-<151.0,-108.0>-<161.0,-108.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<157.0,-111.0>-<165.0,-111.0>-<172.5,-108.5>>\n\n\t* Uogonek (U+0172) contains a short segment B<<172.5,-108.5>-<180.0,-106.0>-<186.0,-103.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<232.0,-111.0>-<240.0,-111.0>-<247.5,-108.5>>\n\n\t* uogonek (U+0173) contains a short segment B<<247.5,-108.5>-<255.0,-106.0>-<261.0,-103.0>>\n\n\t* baht (U+0E3F) contains a short segment L<<213.0,722.0>--<214.0,722.0>>\n\n\t* Euro (U+20AC) contains a short segment L<<156.0,396.0>--<155.0,389.0>> \n\n\t* peso (U+20B1) contains a short segment B<<399.0,556.0>-<399.0,553.0>-<399.0,549.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Euro (U+20AC): L<<156.0,396.0>--<155.0,389.0>> -> L<<155.0,389.0>--<149.0,351.0>> \n\n\t* baht (U+0E3F): L<<113.0,722.0>--<213.0,722.0>> -> L<<213.0,722.0>--<214.0,722.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<241.0,273.0>--<303.0,662.0>>/L<<303.0,662.0>--<144.0,273.0>> = 13.176009608626973\n\n\t* AEacute (U+01FC): L<<241.0,273.0>--<303.0,662.0>>/L<<303.0,662.0>--<144.0,273.0>> = 13.176009608626973\n\n\t* M (U+004D): L<<155.0,0.0>--<166.0,616.0>>/L<<166.0,616.0>--<68.0,0.0>> = 8.016452614687275\n\n\t* M (U+004D): L<<302.0,0.0>--<400.0,616.0>>/L<<400.0,616.0>--<208.0,0.0>> = 8.272163305491398\n\n\t* W (U+0057): L<<153.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<275.0,722.0>> = 12.585106564523912\n\n\t* W (U+0057): L<<263.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<130.0,0.0>> = 13.43995874149094\n\n\t* W (U+0057): L<<347.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<469.0,722.0>> = 12.62743983989336\n\n\t* Wacute (U+1E82): L<<153.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<275.0,722.0>> = 12.585106564523912\n\n\t* Wacute (U+1E82): L<<263.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<130.0,0.0>> = 13.43995874149094\n\n\t* Wacute (U+1E82): L<<347.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<469.0,722.0>> = 12.62743983989336\n\n\t* Wcircumflex (U+0174): L<<153.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<275.0,722.0>> = 12.585106564523912\n\n\t* Wcircumflex (U+0174): L<<263.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<130.0,0.0>> = 13.43995874149094\n\n\t* Wcircumflex (U+0174): L<<347.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<469.0,722.0>> = 12.62743983989336\n\n\t* Wdieresis (U+1E84): L<<153.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<275.0,722.0>> = 12.585106564523912\n\n\t* Wdieresis (U+1E84): L<<263.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<130.0,0.0>> = 13.43995874149094\n\n\t* Wdieresis (U+1E84): L<<347.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<469.0,722.0>> = 12.62743983989336\n\n\t* Wgrave (U+1E80): L<<153.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<275.0,722.0>> = 12.585106564523912\n\n\t* Wgrave (U+1E80): L<<263.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<130.0,0.0>> = 13.43995874149094\n\n\t* Wgrave (U+1E80): L<<347.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<469.0,722.0>> = 12.62743983989336\n\n\t* four (U+0034): L<<163.0,242.0>--<220.0,602.0>>/L<<220.0,602.0>--<75.0,242.0>> = 12.94133704664139\n\n\t* naira (U+20A6): L<<209.0,0.0>--<178.0,581.0>>/L<<178.0,581.0>--<86.0,0.0>> = 12.052138780472214\n\n\t* naira (U+20A6): L<<231.0,722.0>--<253.0,279.0>>/L<<253.0,279.0>--<323.0,722.0>> = 11.822320966960772\n\n\t* trademark (U+2122): L<<334.0,427.0>--<322.0,683.0>>/L<<322.0,683.0>--<282.0,427.0>> = 11.564434309989204\n\n\t* trademark (U+2122): L<<421.0,427.0>--<461.0,683.0>>/L<<461.0,683.0>--<369.0,427.0>> = 10.886509526271405\n\n\t* won (U+20A9): L<<170.0,722.0>--<133.0,203.0>>/L<<133.0,203.0>--<261.0,722.0>> = 9.7764989211318\n\n\t* won (U+20A9): L<<235.0,0.0>--<270.0,531.0>>/L<<270.0,531.0>--<140.0,0.0>> = 9.985527074569585 \n\n\t* won (U+20A9): L<<341.0,722.0>--<305.0,203.0>>/L<<305.0,203.0>--<431.0,722.0>> = 9.678033141233824 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 41]],
                    ],
                    logs: [
                        {
                            message:
                                'This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: peso\tContours detected: 3\tExpected: 1, 2 or 4\n [code: contour-count]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'WARN',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 41]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=272.0,Y=1.0 (should be at baseline 0?)\n\n\t* r (U+0072): X=300.5,Y=502.0 (should be at x-height 500?)\n\n\t* onesuperior (U+00B9): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=371.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=246.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=246.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=284.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=284.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=262.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=262.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aogonek (U+0105): X=313.0,Y=2.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=128.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=128.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=278.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=278.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=489.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=578.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=312.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=312.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=416.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=259.5,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2080 (U+2080): X=274.5,Y=1.5 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=196.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=813.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=383.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=499.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=68.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 41]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* paragraph (U+00B6) contains a short segment L<<220.0,350.0>--<211.0,350.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<197.0,412.0>-<195.0,400.0>-<193.0,388.0>>\n\n\t* peso (U+20B1) contains a short segment L<<71.0,476.0>--<70.0,476.0>> \n\n\t* peso (U+20B1) contains a short segment L<<673.0,509.0>--<674.0,509.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 41]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 41]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 41]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 42]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 42]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=353.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=353.0,Y=-1.0 (should be at baseline 0?)\n\n\t* comma (U+002C): X=66.0,Y=-1.0 (should be at baseline 0?)\n\n\t* semicolon (U+003B): X=66.0,Y=-1.0 (should be at baseline 0?)\n\n\t* J (U+004A): X=7.0,Y=1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=172.0,Y=723.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=124.0,Y=-2.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=86.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=86.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=111.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=111.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=98.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=98.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=23.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=23.0,Y=724.0 (should be at cap-height 722?)\n\n\t* IJ (U+0132): X=133.0,Y=1.0 (should be at baseline 0?)\n\n\t* Jcircumflex (U+0134): X=7.0,Y=1.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=111.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=111.0,Y=724.0 (should be at cap-height 722?)\n\n\t* florin (U+0192): X=252.0,Y=721.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=262.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=262.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=138.0,Y=720.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=138.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotesinglbase (U+201A): X=66.0,Y=-1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=66.0,Y=-1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=138.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2086 (U+2086): X=173.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2086 (U+2086): X=173.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 42]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* M (U+004D) contains a short segment L<<173.0,0.0>--<202.0,0.0>>\n\n\t* Eng (U+014A) contains a short segment B<<186.0,-135.0>-<178.0,-135.0>-<169.0,-134.0>-<160.0,-133.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<141.0,0.0>--<146.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<104.0,0.0>--<115.0,0.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<108.0,374.0>-<108.0,380.0>-<108.0,386.0>-<108.0,392.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 42]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 42]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* Eng (U+014A): L<<233.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<98.0,722.0>> = 13.937073026911046\n\n\t* Eng (U+014A): L<<78.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<234.0,20.0>> = 13.929028436793404\n\n\t* G (U+0047): B<<149.0,-8.0>-<195.0,-8.0>-<220.0,29.0>-<232.0,108.0>>/L<<232.0,108.0>--<237.0,0.0>> = 11.28782109849254\n\n\t* Gbreve (U+011E): B<<149.0,-8.0>-<195.0,-8.0>-<220.0,29.0>-<232.0,108.0>>/L<<232.0,108.0>--<237.0,0.0>> = 11.28782109849254\n\n\t* Gcircumflex (U+011C): B<<149.0,-8.0>-<195.0,-8.0>-<220.0,29.0>-<232.0,108.0>>/L<<232.0,108.0>--<237.0,0.0>> = 11.28782109849254\n\n\t* Gcommaaccent (U+0122): B<<149.0,-8.0>-<195.0,-8.0>-<220.0,29.0>-<232.0,108.0>>/L<<232.0,108.0>--<237.0,0.0>> = 11.28782109849254\n\n\t* Gdotaccent (U+0120): B<<149.0,-8.0>-<195.0,-8.0>-<220.0,29.0>-<232.0,108.0>>/L<<232.0,108.0>--<237.0,0.0>> = 11.28782109849254\n\n\t* M (U+004D): L<<202.0,0.0>--<300.0,635.0>>/L<<300.0,635.0>--<300.0,0.0>> = 8.773281313666025\n\n\t* M (U+004D): L<<78.0,0.0>--<78.0,635.0>>/L<<78.0,635.0>--<173.0,0.0>> = 8.508703316270283\n\n\t* N (U+004E): L<<233.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<98.0,722.0>> = 13.937073026911046\n\n\t* N (U+004E): L<<78.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<239.0,0.0>> = 13.932333934561301\n\n\t* Nacute (U+0143): L<<233.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<98.0,722.0>> = 13.937073026911046\n\n\t* Nacute (U+0143): L<<78.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<239.0,0.0>> = 13.932333934561301\n\n\t* Ncaron (U+0147): L<<233.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<98.0,722.0>> = 13.937073026911046\n\n\t* Ncaron (U+0147): L<<78.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<239.0,0.0>> = 13.932333934561301\n\n\t* Ncommaaccent (U+0145): L<<233.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<98.0,722.0>> = 13.937073026911046\n\n\t* Ncommaaccent (U+0145): L<<78.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<239.0,0.0>> = 13.932333934561301\n\n\t* Ntilde (U+00D1): L<<233.0,722.0>--<233.0,178.0>>/L<<233.0,178.0>--<98.0,722.0>> = 13.937073026911046\n\n\t* Ntilde (U+00D1): L<<78.0,0.0>--<78.0,649.0>>/L<<78.0,649.0>--<239.0,0.0>> = 13.932333934561301\n\n\t* W (U+0057): L<<125.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<256.0,0.0>> = 11.965509515089952\n\n\t* W (U+0057): L<<169.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<54.0,722.0>> = 11.057229599161321\n\n\t* W (U+0057): L<<333.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<215.0,722.0>> = 11.343988449273166\n\n\t* Wacute (U+1E82): L<<125.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<256.0,0.0>> = 11.965509515089952\n\n\t* Wacute (U+1E82): L<<169.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<54.0,722.0>> = 11.057229599161321\n\n\t* Wacute (U+1E82): L<<333.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<215.0,722.0>> = 11.343988449273166\n\n\t* Wcircumflex (U+0174): L<<125.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<256.0,0.0>> = 11.965509515089952\n\n\t* Wcircumflex (U+0174): L<<169.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<54.0,722.0>> = 11.057229599161321\n\n\t* Wcircumflex (U+0174): L<<333.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<215.0,722.0>> = 11.343988449273166\n\n\t* Wdieresis (U+1E84): L<<125.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<256.0,0.0>> = 11.965509515089952\n\n\t* Wdieresis (U+1E84): L<<169.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<54.0,722.0>> = 11.057229599161321\n\n\t* Wdieresis (U+1E84): L<<333.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<215.0,722.0>> = 11.343988449273166\n\n\t* Wgrave (U+1E80): L<<125.0,0.0>--<191.0,625.0>>/L<<191.0,625.0>--<256.0,0.0>> = 11.965509515089952\n\n\t* Wgrave (U+1E80): L<<169.0,722.0>--<106.0,128.0>>/L<<106.0,128.0>--<54.0,722.0>> = 11.057229599161321\n\n\t* Wgrave (U+1E80): L<<333.0,722.0>--<279.0,128.0>>/L<<279.0,128.0>--<215.0,722.0>> = 11.343988449273166\n\n\t* eth (U+00F0): B<<117.0,642.0>-<151.0,598.0>-<177.0,544.0>-<194.0,484.0>>/B<<194.0,484.0>-<179.0,512.0>-<160.0,528.0>-<134.0,528.0>> = 12.359396162458998\n\n\t* four (U+0034): L<<45.0,232.0>--<156.0,677.0>>/L<<156.0,677.0>--<156.0,232.0>> = 14.00594427481588\n\n\t* naira (U+20A6): L<<101.0,0.0>--<101.0,649.0>>/L<<101.0,649.0>--<232.0,0.0>> = 11.411761358832946\n\n\t* naira (U+20A6): L<<226.0,722.0>--<226.0,200.0>>/L<<226.0,200.0>--<122.0,722.0>> = 11.267710094402245\n\n\t* onequarter (U+00BC): L<<276.0,132.0>--<329.0,352.0>>/L<<329.0,352.0>--<329.0,132.0>> = 13.544973367945516\n\n\t* threequarters (U+00BE): L<<278.0,132.0>--<331.0,352.0>>/L<<331.0,352.0>--<331.0,132.0>> = 13.544973367945516\n\n\t* trademark (U+2122): L<<204.0,427.0>--<204.0,693.0>>/L<<204.0,693.0>--<256.0,427.0>> = 11.061182461591784\n\n\t* trademark (U+2122): L<<279.0,427.0>--<331.0,693.0>>/L<<331.0,693.0>--<331.0,427.0>> = 11.061182461591784\n\n\t* uni2074 (U+2074): L<<45.0,454.0>--<98.0,674.0>>/L<<98.0,674.0>--<98.0,454.0>> = 13.544973367945516\n\n\t* uni2084 (U+2084): L<<45.0,12.0>--<98.0,232.0>>/L<<98.0,232.0>--<98.0,12.0>> = 13.544973367945516\n\n\t* won (U+20A9): L<<127.0,0.0>--<179.0,606.0>>/L<<179.0,606.0>--<229.0,0.0>> = 9.621146496256879\n\n\t* won (U+20A9): L<<159.0,722.0>--<110.0,140.0>>/L<<110.0,140.0>--<70.0,722.0>> = 8.744193391660843 \n\n\t* won (U+20A9): L<<287.0,722.0>--<247.0,140.0>>/L<<247.0,140.0>--<198.0,722.0>> = 8.744193391660843 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 42]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 43]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 43]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* one (U+0031): X=297.0,Y=724.0 (should be at cap-height 722?)\n\n\t* one (U+0031): X=241.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=296.0,Y=723.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=242.0,Y=1.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=527.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=419.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=361.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=361.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=185.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=131.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=310.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=744.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=40.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=474.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 43]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<484.0,277.0>--<484.0,257.0>>\n\n\t* Aogonek (U+0104) contains a short segment L<<480.0,0.0>--<488.0,0.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<484.0,277.0>--<484.0,257.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<484.0,277.0>--<484.0,257.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<484.0,277.0>--<484.0,257.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<484.0,277.0>--<484.0,257.0>> \n\n\t* Uogonek (U+0172) contains a short segment B<<312.0,-12.0>-<316.0,-12.0>-<319.0,-12.0>-<323.0,-12.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 43]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 43]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 43]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 44]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 44]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=602.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=602.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=307.0,Y=723.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=167.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=279.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=381.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=446.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=287.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=332.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=159.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=303.0,Y=2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=41.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=113.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2083 (U+2083): X=303.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 44]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<379.0,252.0>--<379.0,233.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<379.0,252.0>--<379.0,233.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<379.0,252.0>--<379.0,233.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<379.0,252.0>--<379.0,233.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<379.0,252.0>--<379.0,233.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<52.0,359.0>-<52.0,353.0>-<52.0,347.0>-<52.0,341.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 44]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 44]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<183.0,0.0>--<183.0,508.0>>/L<<183.0,508.0>--<293.0,0.0>> = 12.217940503474646\n\n\t* M (U+004D): L<<387.0,0.0>--<498.0,508.0>>/L<<498.0,508.0>--<498.0,0.0>> = 12.325632037685109\n\n\t* trademark (U+2122): L<<360.0,396.0>--<360.0,628.0>>/L<<360.0,628.0>--<416.0,396.0>> = 13.570434385161475 \n\n\t* trademark (U+2122): L<<474.0,396.0>--<528.0,628.0>>/L<<528.0,628.0>--<528.0,396.0>> = 13.102789941262442 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 44]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 45]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 45]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=258.0,Y=-2.0 (should be at baseline 0?)\n\n\t* dollar (U+0024): X=372.0,Y=720.0 (should be at cap-height 722?)\n\n\t* dollar (U+0024): X=327.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=236.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=211.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=236.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=211.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=236.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=211.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=244.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=244.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=282.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=282.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=262.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=262.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=129.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=129.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=276.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=276.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Uring (U+016E): X=387.0,Y=941.0 (should be at ascender 940?)\n\n\t* Uogonek (U+0172): X=356.0,Y=2.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=501.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=320.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=320.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=395.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=236.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=211.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=236.0,Y=723.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=211.0,Y=723.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 45]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* M (U+004D) contains a short segment L<<296.0,0.0>--<328.0,0.0>>\n\n\t* Ccedilla (U+00C7) contains a short segment B<<262.0,-11.0>-<269.0,-12.0>-<276.0,-12.0>-<283.0,-12.0>>\n\n\t* ccedilla (U+00E7) contains a short segment B<<197.0,-11.0>-<203.0,-12.0>-<208.0,-12.0>-<214.0,-12.0>>\n\n\t* scedilla (U+015F) contains a short segment B<<180.0,-12.0>-<185.0,-12.0>-<190.0,-12.0>-<195.0,-12.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<240.0,0.0>--<247.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<199.0,0.0>--<207.0,0.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<157.0,-9.0>-<160.0,-9.0>-<162.0,-9.0>-<165.0,-9.0>>\n\n\t* naira (U+20A6) contains a short segment L<<425.0,0.0>--<454.0,0.0>> \n\n\t* peseta (U+20A7) contains a short segment B<<594.0,549.0>-<594.0,551.0>-<594.0,554.0>-<594.0,556.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 45]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 45]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 45]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 46]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 46]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=308.0,Y=720.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* onesuperior (U+00B9): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=394.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=449.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=473.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=132.0,Y=-1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=45.0,Y=-1.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=626.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=482.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=346.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=281.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=278.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=209.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=365.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=808.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=68.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=510.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 46]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<483.0,267.0>--<481.0,250.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<238.0,-12.0>-<242.0,-12.0>-<245.0,-12.0>-<249.0,-12.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<483.0,267.0>--<481.0,250.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<483.0,267.0>--<481.0,250.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<483.0,267.0>--<481.0,250.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<483.0,267.0>--<481.0,250.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<188.0,-12.0>-<191.0,-12.0>-<194.0,-12.0>-<197.0,-12.0>> \n\n\t* uogonek (U+0173) contains a short segment L<<329.0,-9.0>--<343.0,-9.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 46]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 46]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 46]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 47]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 47]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* f (U+0066): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=122.0,Y=1.0 (should be at baseline 0?)\n\n\t* Ccedilla (U+00C7): X=145.0,Y=-2.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=150.0,Y=1.0 (should be at baseline 0?)\n\n\t* ccedilla (U+00E7): X=130.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=292.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2085 (U+2085): X=81.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2085 (U+2085): X=18.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 47]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<25.0,316.0>--<33.0,316.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<208.0,-27.0>--<196.0,-27.0>>\n\n\t* braceright (U+007D) contains a short segment L<<193.0,366.0>--<185.0,366.0>>\n\n\t* braceright (U+007D) contains a short segment L<<10.0,709.0>--<22.0,709.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<172.0,-8.0>-<176.0,-8.0>-<181.0,-8.0>-<185.0,-7.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment L<<139.0,-6.0>--<142.0,-6.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<135.0,380.0>-<135.0,386.0>-<135.0,391.0>-<135.0,396.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 47]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 47]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<109.0,0.0>--<109.0,616.0>>/L<<109.0,616.0>--<196.0,0.0>> = 8.038929333453607\n\n\t* M (U+004D): L<<249.0,0.0>--<343.0,616.0>>/L<<343.0,616.0>--<343.0,0.0>> = 8.676255294422235\n\n\t* W (U+0057): L<<171.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<304.0,0.0>> = 13.763436197621006\n\n\t* W (U+0057): L<<206.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<84.0,722.0>> = 12.91328053006938\n\n\t* W (U+0057): L<<400.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<278.0,722.0>> = 12.91328053006938\n\n\t* Wacute (U+1E82): L<<171.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<304.0,0.0>> = 13.763436197621006\n\n\t* Wacute (U+1E82): L<<206.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<84.0,722.0>> = 12.91328053006938\n\n\t* Wacute (U+1E82): L<<400.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<278.0,722.0>> = 12.91328053006938\n\n\t* Wcircumflex (U+0174): L<<171.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<304.0,0.0>> = 13.763436197621006\n\n\t* Wcircumflex (U+0174): L<<206.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<84.0,722.0>> = 12.91328053006938\n\n\t* Wcircumflex (U+0174): L<<400.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<278.0,722.0>> = 12.91328053006938\n\n\t* Wdieresis (U+1E84): L<<171.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<304.0,0.0>> = 13.763436197621006\n\n\t* Wdieresis (U+1E84): L<<206.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<84.0,722.0>> = 12.91328053006938\n\n\t* Wdieresis (U+1E84): L<<400.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<278.0,722.0>> = 12.91328053006938\n\n\t* Wgrave (U+1E80): L<<171.0,0.0>--<237.0,551.0>>/L<<237.0,551.0>--<304.0,0.0>> = 13.763436197621006\n\n\t* Wgrave (U+1E80): L<<206.0,722.0>--<142.0,183.0>>/L<<142.0,183.0>--<84.0,722.0>> = 12.91328053006938\n\n\t* Wgrave (U+1E80): L<<400.0,722.0>--<342.0,183.0>>/L<<342.0,183.0>--<278.0,722.0>> = 12.91328053006938\n\n\t* four (U+0034): L<<74.0,242.0>--<165.0,612.0>>/L<<165.0,612.0>--<165.0,242.0>> = 13.817419148634897\n\n\t* naira (U+20A6): L<<127.0,0.0>--<127.0,571.0>>/L<<127.0,571.0>--<250.0,0.0>> = 12.1564169857229\n\n\t* naira (U+20A6): L<<250.0,722.0>--<250.0,289.0>>/L<<250.0,289.0>--<158.0,722.0>> = 11.995316726454712\n\n\t* trademark (U+2122): L<<255.0,427.0>--<255.0,683.0>>/L<<255.0,683.0>--<307.0,427.0>> = 11.481991354748077\n\n\t* trademark (U+2122): L<<342.0,427.0>--<394.0,683.0>>/L<<394.0,683.0>--<394.0,427.0>> = 11.481991354748077\n\n\t* won (U+20A9): L<<179.0,0.0>--<226.0,531.0>>/L<<226.0,531.0>--<274.0,0.0>> = 10.223437038066319\n\n\t* won (U+20A9): L<<190.0,722.0>--<144.0,203.0>>/L<<144.0,203.0>--<99.0,722.0>> = 10.020452327929783 \n\n\t* won (U+20A9): L<<360.0,722.0>--<316.0,203.0>>/L<<316.0,203.0>--<270.0,722.0>> = 9.91086154252091 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 47]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 48]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 48]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=470.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=470.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=161.0,Y=1.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=277.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=214.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=150.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=72.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=8.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=245.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=222.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=30.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=7.0,Y=2.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=420.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=17.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=398.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=118.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=420.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=17.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=151.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=106.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=25.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=212.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=323.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 48]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<22.0,298.0>--<30.0,298.0>>\n\n\t* braceright (U+007D) contains a short segment L<<230.0,384.0>--<222.0,384.0>> \n\n\t* Eng (U+014A) contains a short segment B<<238.0,-78.0>-<229.0,-78.0>-<224.0,-78.0>-<214.0,-76.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 48]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 48]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<173.0,270.0>--<260.0,621.0>>/L<<260.0,621.0>--<260.0,270.0>> = 13.920960364920726\n\n\t* AEacute (U+01FC): L<<173.0,270.0>--<260.0,621.0>>/L<<260.0,621.0>--<260.0,270.0>> = 13.920960364920726\n\n\t* M (U+004D): L<<141.0,0.0>--<141.0,533.0>>/L<<141.0,533.0>--<217.0,0.0>> = 8.115052241680186\n\n\t* M (U+004D): L<<295.0,0.0>--<375.0,533.0>>/L<<375.0,533.0>--<375.0,0.0>> = 8.53602210346667\n\n\t* W (U+0057): L<<215.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<326.0,0.0>> = 13.818316364937123\n\n\t* W (U+0057): L<<230.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<132.0,722.0>> = 12.456243808909337\n\n\t* W (U+0057): L<<429.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<332.0,722.0>> = 12.33010806468864\n\n\t* Wacute (U+1E82): L<<215.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<326.0,0.0>> = 13.818316364937123\n\n\t* Wacute (U+1E82): L<<230.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<132.0,722.0>> = 12.456243808909337\n\n\t* Wacute (U+1E82): L<<429.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<332.0,722.0>> = 12.33010806468864\n\n\t* Wcircumflex (U+0174): L<<215.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<326.0,0.0>> = 13.818316364937123\n\n\t* Wcircumflex (U+0174): L<<230.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<132.0,722.0>> = 12.456243808909337\n\n\t* Wcircumflex (U+0174): L<<429.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<332.0,722.0>> = 12.33010806468864\n\n\t* Wdieresis (U+1E84): L<<215.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<326.0,0.0>> = 13.818316364937123\n\n\t* Wdieresis (U+1E84): L<<230.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<132.0,722.0>> = 12.456243808909337\n\n\t* Wdieresis (U+1E84): L<<429.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<332.0,722.0>> = 12.33010806468864\n\n\t* Wgrave (U+1E80): L<<215.0,0.0>--<268.0,458.0>>/L<<268.0,458.0>--<326.0,0.0>> = 13.818316364937123\n\n\t* Wgrave (U+1E80): L<<230.0,722.0>--<181.0,273.0>>/L<<181.0,273.0>--<132.0,722.0>> = 12.456243808909337\n\n\t* Wgrave (U+1E80): L<<429.0,722.0>--<381.0,273.0>>/L<<381.0,273.0>--<332.0,722.0>> = 12.33010806468864\n\n\t* trademark (U+2122): L<<263.0,420.0>--<263.0,656.0>>/L<<263.0,656.0>--<307.0,420.0>> = 10.561010691196365\n\n\t* trademark (U+2122): L<<350.0,420.0>--<393.0,656.0>>/L<<393.0,656.0>--<393.0,420.0>> = 10.326209547385703\n\n\t* won (U+20A9): L<<210.0,0.0>--<250.0,448.0>>/L<<250.0,448.0>--<292.0,0.0>> = 10.457990295213316\n\n\t* won (U+20A9): L<<214.0,722.0>--<173.0,283.0>>/L<<173.0,283.0>--<136.0,722.0>> = 10.15325253947916 \n\n\t* won (U+20A9): L<<382.0,722.0>--<346.0,282.0>>/L<<346.0,282.0>--<310.0,722.0>> = 9.35483571776353 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 48]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* cent (U+00A2): X=297.0,Y=2.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=325.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=600.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=482.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=325.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=325.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=600.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=482.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=325.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=345.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=620.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=502.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=345.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=167.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=442.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=324.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=167.0,Y=941.0 (should be at ascender 940?)\n\n\t* tcommaaccent (U+0163): X=120.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=319.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=594.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=476.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=319.0,Y=941.0 (should be at ascender 940?) \n\n\t* baht (U+0E3F): X=327.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<381.0,243.0>--<379.0,229.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<294.0,423.0>-<294.0,428.0>-<294.0,433.0>-<294.0,438.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<92.0,436.0>-<92.0,432.0>-<92.0,427.0>-<92.0,423.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<105.0,290.0>-<105.0,285.0>-<105.0,281.0>-<105.0,276.0>>\n\n\t* Eogonek (U+0118) contains a short segment B<<390.0,-77.0>-<382.0,-79.0>-<376.0,-80.0>-<371.0,-80.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<381.0,243.0>--<379.0,229.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<381.0,243.0>--<379.0,229.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<381.0,243.0>--<379.0,229.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<381.0,243.0>--<379.0,229.0>>\n\n\t* Eng (U+014A) contains a short segment B<<293.0,-41.0>-<288.0,-41.0>-<282.0,-40.0>-<273.0,-39.0>> \n\n\t* Uogonek (U+0172) contains a short segment B<<323.0,-77.0>-<315.0,-79.0>-<309.0,-80.0>-<304.0,-80.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* oslash (U+00F8): L<<189.0,235.0>--<190.0,240.0>> -> L<<190.0,240.0>--<197.0,287.0>> \n\n\t* oslashacute (U+01FF): L<<189.0,235.0>--<190.0,240.0>> -> L<<190.0,240.0>--<197.0,287.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<158.0,0.0>--<230.0,458.0>>/L<<230.0,458.0>--<257.0,0.0>> = 12.307872269398718\n\n\t* M (U+004D): L<<366.0,0.0>--<536.0,458.0>>/L<<536.0,458.0>--<464.0,0.0>> = 11.429792134541216\n\n\t* trademark (U+2122): L<<402.0,391.0>--<437.0,612.0>>/L<<437.0,612.0>--<454.0,391.0>> = 13.397956400834769 \n\n\t* trademark (U+2122): L<<516.0,391.0>--<601.0,612.0>>/L<<601.0,612.0>--<565.0,391.0>> = 11.785524801712718 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 50]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 50]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* cent (U+00A2): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=139.0,Y=-2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=357.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=471.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=705.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=138.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=298.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=39.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 50]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<478.0,257.0>--<476.0,244.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<273.0,418.0>-<273.0,422.0>-<273.0,425.0>-<273.0,429.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<122.0,430.0>-<122.0,426.0>-<122.0,422.0>-<122.0,418.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<246.0,-12.0>-<250.0,-12.0>-<254.0,-12.0>-<258.0,-12.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<478.0,257.0>--<476.0,244.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<478.0,257.0>--<476.0,244.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<478.0,257.0>--<476.0,244.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<478.0,257.0>--<476.0,244.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<204.0,-12.0>-<205.0,-12.0>-<207.0,-12.0>-<209.0,-12.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<243.0,331.0>-<243.0,332.0>-<243.0,333.0>-<243.0,334.0>> \n\n\t* peso (U+20B1) contains a short segment B<<670.0,509.0>-<670.0,514.0>-<670.0,519.0>-<670.0,523.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 50]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 50]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 50]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 51]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 51]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=580.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=580.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=293.0,Y=723.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=294.0,Y=1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=166.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=265.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2088 (U+2088): X=304.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=304.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=107.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=107.0,Y=-1.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=91.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 51]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<376.0,259.0>--<376.0,237.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<376.0,259.0>--<376.0,237.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<376.0,259.0>--<376.0,237.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<376.0,259.0>--<376.0,237.0>> \n\n\t* Gcommaaccent (U+0122) contains a short segment L<<376.0,259.0>--<376.0,237.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 51]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 51]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<169.0,0.0>--<169.0,547.0>>/L<<169.0,547.0>--<288.0,0.0>> = 12.273470719251376\n\n\t* M (U+004D): L<<371.0,0.0>--<491.0,547.0>>/L<<491.0,547.0>--<491.0,0.0>> = 12.37344475211061\n\n\t* trademark (U+2122): L<<343.0,401.0>--<343.0,643.0>>/L<<343.0,643.0>--<402.0,401.0>> = 13.701510492346522 \n\n\t* trademark (U+2122): L<<456.0,401.0>--<514.0,643.0>>/L<<514.0,643.0>--<514.0,401.0>> = 13.477822753241302 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 51]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=489.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=489.0,Y=-2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=335.0,Y=721.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=3.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=367.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=512.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=405.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=3.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=250.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=30.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=225.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=225.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* sterling (U+00A3) contains a short segment B<<191.0,405.0>-<191.0,412.0>-<191.0,418.0>-<191.0,423.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<184.0,-10.0>-<186.0,-10.0>-<189.0,-10.0>-<191.0,-10.0>>\n\n\t* Iogonek (U+012E) contains a short segment L<<24.0,-4.0>--<29.0,-4.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<201.0,0.0>--<217.0,0.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<141.0,-9.0>-<143.0,-9.0>-<146.0,-9.0>-<148.0,-9.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<180.0,393.0>-<180.0,396.0>-<181.0,399.0>-<181.0,402.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* peso (U+20B1): L<<547.0,458.0>--<550.0,477.0>> -> L<<550.0,477.0>--<560.0,544.0>> \n\n\t* peso (U+20B1): L<<69.0,544.0>--<58.0,477.0>> -> L<<58.0,477.0>--<55.0,458.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<292.0,0.0>--<536.0,636.0>>/L<<536.0,636.0>--<435.0,0.0>> = 11.965694091207004\n\n\t* M (U+004D): L<<99.0,0.0>--<200.0,636.0>>/L<<200.0,636.0>--<238.0,0.0>> = 12.442774663428873 \n\n\t* trademark (U+2122): L<<443.0,413.0>--<551.0,677.0>>/L<<551.0,677.0>--<510.0,413.0>> = 13.42133643613923 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 53]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 53]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=514.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=514.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=350.0,Y=720.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=125.0,Y=2.0 (should be at baseline 0?)\n\n\t* oslash (U+00F8): X=-12.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=417.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tcaron (U+0165): X=303.0,Y=724.0 (should be at cap-height 722?)\n\n\t* oslashacute (U+01FF): X=-12.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=243.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=243.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 53]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* sterling (U+00A3) contains a short segment B<<218.0,410.0>-<218.0,416.0>-<218.0,422.0>-<218.0,427.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<106.0,427.0>-<106.0,421.0>-<106.0,416.0>-<106.0,410.0>>\n\n\t* Aogonek (U+0104) contains a short segment L<<335.0,-3.0>--<341.0,-3.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<195.0,-10.0>-<198.0,-10.0>-<202.0,-10.0>-<205.0,-10.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<155.0,-9.0>-<157.0,-9.0>-<158.0,-9.0>-<159.0,-9.0>>\n\n\t* uogonek (U+0173) contains a short segment L<<266.0,-7.0>--<282.0,-7.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<192.0,328.0>-<193.0,334.0>-<194.0,339.0>-<195.0,345.0>> \n\n\t* peso (U+20B1) contains a short segment B<<534.0,530.0>-<534.0,534.0>-<534.0,537.0>-<534.0,540.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 53]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 53]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<114.0,0.0>--<207.0,590.0>>/L<<207.0,590.0>--<243.0,0.0>> = 12.449350278610689\n\n\t* M (U+004D): L<<311.0,0.0>--<536.0,590.0>>/L<<536.0,590.0>--<442.0,0.0>> = 11.822248902828317 \n\n\t* trademark (U+2122): L<<461.0,407.0>--<564.0,660.0>>/L<<564.0,660.0>--<524.0,407.0>> = 13.167701575243628 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 53]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 54]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 54]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=561.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=561.0,Y=-1.0 (should be at baseline 0?)\n\n\t* at (U+0040): X=595.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=273.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=358.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=350.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=403.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=121.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=257.0,Y=2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=0.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=67.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=113.0,Y=-1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=309.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=166.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 54]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<379.0,252.0>--<376.0,233.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<267.0,418.0>-<267.0,423.0>-<267.0,429.0>-<267.0,434.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<97.0,433.0>-<97.0,428.0>-<97.0,423.0>-<97.0,418.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<379.0,252.0>--<376.0,233.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<379.0,252.0>--<376.0,233.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<379.0,252.0>--<376.0,233.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<379.0,252.0>--<376.0,233.0>> \n\n\t* Uogonek (U+0172) contains a short segment B<<309.0,-87.0>-<301.0,-89.0>-<294.0,-91.0>-<287.0,-91.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 54]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 54]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<142.0,0.0>--<222.0,503.0>>/L<<222.0,503.0>--<252.0,0.0>> = 12.450157884406833\n\n\t* M (U+004D): L<<347.0,0.0>--<536.0,503.0>>/L<<536.0,503.0>--<456.0,0.0>> = 11.556527408919404\n\n\t* trademark (U+2122): L<<383.0,396.0>--<420.0,628.0>>/L<<420.0,628.0>--<439.0,396.0>> = 13.74325681761742 \n\n\t* trademark (U+2122): L<<497.0,396.0>--<588.0,628.0>>/L<<588.0,628.0>--<551.0,396.0>> = 12.355787771723229 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 54]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=477.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=477.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=326.0,Y=721.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=217.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=217.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=217.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=305.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=208.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=208.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=237.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=237.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=220.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=220.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aogonek (U+0105): X=239.0,Y=1.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=112.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=112.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=25.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=26.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=21.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=93.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=234.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=234.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uogonek (U+0173): X=267.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tilde (U+02DC): X=318.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=318.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=231.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotesinglbase (U+201A): X=82.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=82.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=221.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=217.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=217.0,Y=724.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=179.0,Y=724.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* Ccedilla (U+00C7) contains a short segment B<<208.0,-10.0>-<210.0,-10.0>-<211.0,-10.0>-<213.0,-10.0>>\n\n\t* ccedilla (U+00E7) contains a short segment B<<163.0,-10.0>-<165.0,-10.0>-<167.0,-10.0>-<169.0,-10.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<174.0,-10.0>-<179.0,-10.0>-<183.0,-10.0>-<188.0,-9.0>>\n\n\t* Iogonek (U+012E) contains a short segment L<<25.0,-2.0>--<26.0,-2.0>>\n\n\t* Scedilla (U+015E) contains a short segment L<<179.0,-10.0>--<181.0,-10.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<186.0,0.0>--<198.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<131.0,0.0>--<146.0,0.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<130.0,-8.0>-<132.0,-8.0>-<133.0,-8.0>-<135.0,-8.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<168.0,389.0>-<169.0,394.0>-<170.0,398.0>-<170.0,403.0>>\n\n\t* peso (U+20B1) contains a short segment L<<544.0,507.0>--<544.0,508.0>> \n\n\t* peso (U+20B1) contains a short segment L<<544.0,508.0>--<545.0,513.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* peso (U+20B1): L<<544.0,508.0>--<545.0,513.0>> -> L<<545.0,513.0>--<552.0,560.0>> \n\n\t* peso (U+20B1): L<<73.0,560.0>--<65.0,508.0>> -> L<<65.0,508.0>--<57.0,460.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<271.0,0.0>--<520.0,647.0>>/L<<520.0,647.0>--<418.0,0.0>> = 12.090394739400807\n\n\t* M (U+004D): L<<83.0,0.0>--<186.0,647.0>>/L<<186.0,647.0>--<227.0,0.0>> = 12.671322218682986 \n\n\t* trademark (U+2122): L<<413.0,415.0>--<525.0,685.0>>/L<<525.0,685.0>--<483.0,415.0>> = 13.687583442745158 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 56]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 56]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=429.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=429.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=236.0,Y=-2.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=174.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=109.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=32.0,Y=2.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=-33.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=204.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=180.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=-12.0,Y=2.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=-33.0,Y=2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=210.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Ccedilla (U+00C7): X=134.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=210.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=210.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=61.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2089 (U+2089): X=-18.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=230.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=341.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 56]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<29.0,298.0>--<39.0,298.0>>\n\n\t* braceright (U+007D) contains a short segment L<<249.0,384.0>--<239.0,384.0>>\n\n\t* Eng (U+014A) contains a short segment B<<185.0,-78.0>-<177.0,-78.0>-<169.0,-77.0>-<161.0,-75.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<56.0,246.0>-<56.0,241.0>-<56.0,235.0>-<56.0,230.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 56]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 56]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<177.0,270.0>--<318.0,629.0>>/L<<318.0,629.0>--<262.0,270.0>> = 12.576745496018571\n\n\t* AEacute (U+01FC): L<<177.0,270.0>--<318.0,629.0>>/L<<318.0,629.0>--<262.0,270.0>> = 12.576745496018571\n\n\t* M (U+004D): L<<100.0,0.0>--<185.0,533.0>>/L<<185.0,533.0>--<176.0,0.0>> = 8.093547710025952\n\n\t* M (U+004D): L<<254.0,0.0>--<419.0,533.0>>/L<<419.0,533.0>--<334.0,0.0>> = 8.139950142678249\n\n\t* W (U+0057): L<<174.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<285.0,0.0>> = 13.506237479962104\n\n\t* W (U+0057): L<<297.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<199.0,722.0>> = 12.16620891570391\n\n\t* W (U+0057): L<<496.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<399.0,722.0>> = 12.046910965736274\n\n\t* Wacute (U+1E82): L<<174.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<285.0,0.0>> = 13.506237479962104\n\n\t* Wacute (U+1E82): L<<297.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<199.0,722.0>> = 12.16620891570391\n\n\t* Wacute (U+1E82): L<<496.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<399.0,722.0>> = 12.046910965736274\n\n\t* Wcircumflex (U+0174): L<<174.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<285.0,0.0>> = 13.506237479962104\n\n\t* Wcircumflex (U+0174): L<<297.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<199.0,722.0>> = 12.16620891570391\n\n\t* Wcircumflex (U+0174): L<<496.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<399.0,722.0>> = 12.046910965736274\n\n\t* Wdieresis (U+1E84): L<<174.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<285.0,0.0>> = 13.506237479962104\n\n\t* Wdieresis (U+1E84): L<<297.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<199.0,722.0>> = 12.16620891570391\n\n\t* Wdieresis (U+1E84): L<<496.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<399.0,722.0>> = 12.046910965736274\n\n\t* Wgrave (U+1E80): L<<174.0,0.0>--<300.0,458.0>>/L<<300.0,458.0>--<285.0,0.0>> = 13.506237479962104\n\n\t* Wgrave (U+1E80): L<<297.0,722.0>--<178.0,273.0>>/L<<178.0,273.0>--<199.0,722.0>> = 12.16620891570391\n\n\t* Wgrave (U+1E80): L<<496.0,722.0>--<378.0,273.0>>/L<<378.0,273.0>--<399.0,722.0>> = 12.046910965736274\n\n\t* trademark (U+2122): L<<289.0,420.0>--<326.0,656.0>>/L<<326.0,656.0>--<333.0,420.0>> = 10.609233822577973\n\n\t* trademark (U+2122): L<<376.0,420.0>--<456.0,656.0>>/L<<456.0,656.0>--<419.0,420.0>> = 9.815506994140506\n\n\t* won (U+20A9): L<<173.0,0.0>--<283.0,448.0>>/L<<283.0,448.0>--<255.0,0.0>> = 10.218918802126382\n\n\t* won (U+20A9): L<<284.0,722.0>--<174.0,283.0>>/L<<174.0,283.0>--<206.0,722.0>> = 9.897864410045745 \n\n\t* won (U+20A9): L<<452.0,722.0>--<347.0,282.0>>/L<<347.0,282.0>--<380.0,722.0>> = 9.13268173906718 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 56]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 57]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 57]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* at (U+0040): X=478.0,Y=2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=223.0,Y=724.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=225.0,Y=-1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=125.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=109.0,Y=-1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=324.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=93.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2083 (U+2083): X=19.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 57]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<24.0,307.0>--<31.0,307.0>> \n\n\t* braceright (U+007D) contains a short segment L<<211.0,375.0>--<204.0,375.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 57]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 57]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<157.0,271.0>--<249.0,635.0>>/L<<249.0,635.0>--<249.0,271.0>> = 14.184294248270799\n\n\t* AEacute (U+01FC): L<<157.0,271.0>--<249.0,635.0>>/L<<249.0,635.0>--<249.0,271.0>> = 14.184294248270799\n\n\t* M (U+004D): L<<125.0,0.0>--<125.0,575.0>>/L<<125.0,575.0>--<207.0,0.0>> = 8.116151592436747\n\n\t* M (U+004D): L<<272.0,0.0>--<359.0,575.0>>/L<<359.0,575.0>--<359.0,0.0>> = 8.603840707873099\n\n\t* W (U+0057): L<<193.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<315.0,0.0>> = 13.802030578276192\n\n\t* W (U+0057): L<<218.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<108.0,722.0>> = 12.705791617430796\n\n\t* W (U+0057): L<<414.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<305.0,722.0>> = 12.590950612672513\n\n\t* Wacute (U+1E82): L<<193.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<315.0,0.0>> = 13.802030578276192\n\n\t* Wacute (U+1E82): L<<218.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<108.0,722.0>> = 12.705791617430796\n\n\t* Wacute (U+1E82): L<<414.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<305.0,722.0>> = 12.590950612672513\n\n\t* Wcircumflex (U+0174): L<<193.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<315.0,0.0>> = 13.802030578276192\n\n\t* Wcircumflex (U+0174): L<<218.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<108.0,722.0>> = 12.705791617430796\n\n\t* Wcircumflex (U+0174): L<<414.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<305.0,722.0>> = 12.590950612672513\n\n\t* Wdieresis (U+1E84): L<<193.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<315.0,0.0>> = 13.802030578276192\n\n\t* Wdieresis (U+1E84): L<<218.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<108.0,722.0>> = 12.705791617430796\n\n\t* Wdieresis (U+1E84): L<<414.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<305.0,722.0>> = 12.590950612672513\n\n\t* Wgrave (U+1E80): L<<193.0,0.0>--<253.0,504.0>>/L<<253.0,504.0>--<315.0,0.0>> = 13.802030578276192\n\n\t* Wgrave (U+1E80): L<<218.0,722.0>--<162.0,228.0>>/L<<162.0,228.0>--<108.0,722.0>> = 12.705791617430796\n\n\t* Wgrave (U+1E80): L<<414.0,722.0>--<362.0,228.0>>/L<<362.0,228.0>--<305.0,722.0>> = 12.590950612672513\n\n\t* naira (U+20A6): L<<145.0,0.0>--<145.0,515.0>>/L<<145.0,515.0>--<266.0,0.0>> = 13.221915376546848\n\n\t* naira (U+20A6): L<<261.0,722.0>--<261.0,335.0>>/L<<261.0,335.0>--<172.0,722.0>> = 12.951358378457568\n\n\t* trademark (U+2122): L<<259.0,423.0>--<259.0,670.0>>/L<<259.0,670.0>--<307.0,423.0>> = 10.997331946321593\n\n\t* trademark (U+2122): L<<346.0,423.0>--<393.0,670.0>>/L<<393.0,670.0>--<393.0,423.0>> = 10.77363818777617\n\n\t* won (U+20A9): L<<195.0,0.0>--<238.0,490.0>>/L<<238.0,490.0>--<283.0,0.0>> = 10.262288392288713\n\n\t* won (U+20A9): L<<202.0,722.0>--<158.0,243.0>>/L<<158.0,243.0>--<117.0,722.0>> = 10.140656326673257 \n\n\t* won (U+20A9): L<<371.0,722.0>--<331.0,243.0>>/L<<331.0,243.0>--<290.0,722.0>> = 9.665847824296105 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 57]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 58]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 58]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=517.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=517.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=253.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=144.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=106.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=144.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=106.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=144.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=106.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=221.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=141.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=141.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=170.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=170.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=153.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=153.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aogonek (U+0105): X=281.0,Y=-2.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=45.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=45.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=167.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=167.0,Y=723.0 (should be at cap-height 722?)\n\n\t* florin (U+0192): X=358.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=251.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=251.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=144.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=106.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=144.0,Y=724.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=106.0,Y=724.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 58]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<224.0,0.0>--<239.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<172.0,0.0>--<187.0,0.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<233.0,-10.0>-<235.0,-10.0>-<237.0,-10.0>-<239.0,-10.0>> \n\n\t* uni20B9 (U+20B9) contains a short segment L<<266.0,531.0>--<266.0,530.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 58]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 58]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<123.0,0.0>--<123.0,647.0>>/L<<123.0,647.0>--<268.0,0.0>> = 12.631908133557197 \n\n\t* M (U+004D): L<<311.0,0.0>--<458.0,647.0>>/L<<458.0,647.0>--<458.0,0.0>> = 12.800438436224821 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 58]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 59]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 59]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* g (U+0067): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=139.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=259.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=115.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=115.0,Y=2.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=222.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=370.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 59]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* R (U+0052) contains a short segment L<<210.0,295.0>--<226.0,295.0>>\n\n\t* e (U+0065) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<20.0,281.0>--<27.0,281.0>>\n\n\t* braceright (U+007D) contains a short segment L<<264.0,401.0>--<257.0,401.0>>\n\n\t* germandbls (U+00DF) contains a short segment B<<231.0,115.0>-<225.0,115.0>-<220.0,116.0>-<212.0,118.0>>\n\n\t* ae (U+00E6) contains a short segment L<<381.0,320.0>--<381.0,321.0>>\n\n\t* egrave (U+00E8) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* eacute (U+00E9) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* ecircumflex (U+00EA) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* edieresis (U+00EB) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<466.0,-74.0>-<460.0,-76.0>-<455.0,-77.0>-<450.0,-77.0>>\n\n\t* emacron (U+0113) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* ebreve (U+0115) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* edotaccent (U+0117) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* Eogonek (U+0118) contains a short segment B<<361.0,-74.0>-<355.0,-76.0>-<350.0,-77.0>-<345.0,-77.0>>\n\n\t* eogonek (U+0119) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* ecaron (U+011B) contains a short segment L<<176.0,320.0>--<176.0,321.0>>\n\n\t* oe (U+0153) contains a short segment L<<419.0,320.0>--<419.0,321.0>>\n\n\t* Racute (U+0154) contains a short segment L<<210.0,295.0>--<226.0,295.0>>\n\n\t* Rcommaaccent (U+0156) contains a short segment L<<210.0,295.0>--<226.0,295.0>>\n\n\t* Rcaron (U+0158) contains a short segment L<<210.0,295.0>--<226.0,295.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<311.0,-74.0>-<305.0,-76.0>-<300.0,-77.0>-<295.0,-77.0>>\n\n\t* uogonek (U+0173) contains a short segment B<<434.0,-74.0>-<428.0,-76.0>-<423.0,-77.0>-<418.0,-77.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<381.0,320.0>--<381.0,321.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<34.0,376.0>-<34.0,371.0>-<34.0,366.0>-<34.0,361.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<34.0,361.0>-<34.0,356.0>-<34.0,351.0>-<34.0,346.0>> \n\n\t* peso (U+20B1) contains a short segment B<<501.0,481.0>-<501.0,486.0>-<501.0,491.0>-<501.0,495.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 59]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 59]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<203.0,267.0>--<279.0,584.0>>/L<<279.0,584.0>--<279.0,267.0>> = 13.48206050226687\n\n\t* AEacute (U+01FC): L<<203.0,267.0>--<279.0,584.0>>/L<<279.0,584.0>--<279.0,267.0>> = 13.48206050226687\n\n\t* M (U+004D): L<<171.0,0.0>--<171.0,455.0>>/L<<171.0,455.0>--<237.0,0.0>> = 8.2534704983513\n\n\t* M (U+004D): L<<338.0,0.0>--<405.0,455.0>>/L<<405.0,455.0>--<405.0,0.0>> = 8.376761627763987\n\n\t* W (U+0057): L<<252.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<178.0,722.0>> = 11.607397546892575\n\n\t* W (U+0057): L<<257.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<346.0,0.0>> = 13.714878684894954\n\n\t* W (U+0057): L<<456.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<383.0,722.0>> = 11.420996560924731\n\n\t* Wacute (U+1E82): L<<252.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<178.0,722.0>> = 11.607397546892575\n\n\t* Wacute (U+1E82): L<<257.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<346.0,0.0>> = 13.714878684894954\n\n\t* Wacute (U+1E82): L<<456.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<383.0,722.0>> = 11.420996560924731\n\n\t* Wcircumflex (U+0174): L<<252.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<178.0,722.0>> = 11.607397546892575\n\n\t* Wcircumflex (U+0174): L<<257.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<346.0,0.0>> = 13.714878684894954\n\n\t* Wcircumflex (U+0174): L<<456.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<383.0,722.0>> = 11.420996560924731\n\n\t* Wdieresis (U+1E84): L<<252.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<178.0,722.0>> = 11.607397546892575\n\n\t* Wdieresis (U+1E84): L<<257.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<346.0,0.0>> = 13.714878684894954\n\n\t* Wdieresis (U+1E84): L<<456.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<383.0,722.0>> = 11.420996560924731\n\n\t* Wgrave (U+1E80): L<<252.0,722.0>--<218.0,358.0>>/L<<218.0,358.0>--<178.0,722.0>> = 11.607397546892575\n\n\t* Wgrave (U+1E80): L<<257.0,0.0>--<298.0,370.0>>/L<<298.0,370.0>--<346.0,0.0>> = 13.714878684894954\n\n\t* Wgrave (U+1E80): L<<456.0,722.0>--<418.0,357.0>>/L<<418.0,357.0>--<383.0,722.0>> = 11.420996560924731\n\n\t* trademark (U+2122): L<<270.0,413.0>--<270.0,631.0>>/L<<270.0,631.0>--<307.0,413.0>> = 9.632718075968034\n\n\t* trademark (U+2122): L<<357.0,413.0>--<392.0,631.0>>/L<<392.0,631.0>--<392.0,413.0>> = 9.12102599453198\n\n\t* won (U+20A9): L<<237.0,722.0>--<200.0,358.0>>/L<<200.0,358.0>--<170.0,722.0>> = 10.515617249758645\n\n\t* won (U+20A9): L<<240.0,0.0>--<272.0,370.0>>/L<<272.0,370.0>--<309.0,0.0>> = 10.653603856113174 \n\n\t* won (U+20A9): L<<403.0,722.0>--<374.0,357.0>>/L<<374.0,357.0>--<347.0,722.0>> = 8.773337209527071 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 59]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 60]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 60]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* f (U+0066): X=243.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=127.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=104.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=127.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=104.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=127.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=104.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=208.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=130.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=130.0,Y=724.0 (should be at cap-height 722?)\n\n\t* aring (U+00E5): X=174.0,Y=720.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=162.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=162.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=145.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=145.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=41.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=41.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=66.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=159.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=159.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uring (U+016F): X=203.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uogonek (U+0173): X=302.0,Y=1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=341.0,Y=721.0 (should be at cap-height 722?)\n\n\t* ring (U+02DA): X=300.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=256.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=256.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=248.0,Y=2.0 (should be at baseline 0?)\n\n\t* quotesinglbase (U+201A): X=94.0,Y=-1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=94.0,Y=-1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=206.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=127.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=104.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=127.0,Y=724.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=104.0,Y=724.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 60]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* asterisk (U+002A) contains a short segment L<<180.0,624.0>--<180.0,622.0>>\n\n\t* asterisk (U+002A) contains a short segment L<<128.0,628.0>--<129.0,630.0>>\n\n\t* asterisk (U+002A) contains a short segment L<<146.0,543.0>--<144.0,542.0>>\n\n\t* asterisk (U+002A) contains a short segment L<<107.0,579.0>--<106.0,580.0>>\n\n\t* M (U+004D) contains a short segment L<<255.0,0.0>--<285.0,0.0>>\n\n\t* Ccedilla (U+00C7) contains a short segment B<<230.0,-10.0>-<231.0,-10.0>-<232.0,-10.0>-<233.0,-10.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<210.0,0.0>--<217.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<172.0,0.0>--<182.0,0.0>> \n\n\t* Uogonek (U+0172) contains a short segment B<<220.0,-10.0>-<223.0,-10.0>-<226.0,-10.0>-<229.0,-10.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 60]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 60]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<104.0,0.0>--<104.0,661.0>>/L<<104.0,661.0>--<255.0,0.0>> = 12.867940501498474\n\n\t* M (U+004D): L<<285.0,0.0>--<437.0,661.0>>/L<<437.0,661.0>--<437.0,0.0>> = 12.95029472576656 \n\n\t* eth (U+00F0): B<<177.0,637.0>-<222.0,591.0>-<259.0,532.0>-<282.0,461.0>>/B<<282.0,461.0>-<259.0,498.0>-<228.0,520.0>-<186.0,520.0>> = 13.916574700689777 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 60]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* comma (U+002C): X=25.0,Y=-1.0 (should be at baseline 0?)\n\n\t* semicolon (U+003B): X=25.0,Y=-1.0 (should be at baseline 0?)\n\n\t* paragraph (U+00B6): X=231.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Ccedilla (U+00C7): X=88.0,Y=-1.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=153.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=153.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=178.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=178.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=165.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=165.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=90.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=90.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=1.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=51.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=178.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=178.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Uogonek (U+0172): X=161.0,Y=1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=325.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=329.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=329.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=211.0,Y=720.0 (should be at cap-height 722?) \n\n\t* baht (U+0E3F): X=97.0,Y=1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* M (U+004D) contains a short segment L<<132.0,0.0>--<161.0,0.0>>\n\n\t* Ccedilla (U+00C7) contains a short segment B<<113.0,-8.0>-<115.0,-8.0>-<116.0,-8.0>-<118.0,-8.0>>\n\n\t* ccedilla (U+00E7) contains a short segment B<<92.0,-8.0>-<95.0,-8.0>-<97.0,-8.0>-<100.0,-8.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<106.0,-8.0>-<109.0,-8.0>-<111.0,-8.0>-<114.0,-8.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<99.0,0.0>--<105.0,0.0>> \n\n\t* Tcommaaccent (U+0162) contains a short segment L<<63.0,0.0>--<70.0,0.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* paragraph (U+00B6): L<<398.0,722.0>--<292.0,722.0>> -> L<<292.0,722.0>--<231.0,723.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<104.0,255.0>--<282.0,687.0>>/L<<282.0,687.0>--<214.0,255.0>> = 13.448093329824001\n\n\t* AEacute (U+01FC): L<<104.0,255.0>--<282.0,687.0>>/L<<282.0,687.0>--<214.0,255.0>> = 13.448093329824001\n\n\t* Eng (U+014A): L<<306.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<171.0,722.0>> = 13.97639586911254\n\n\t* Eng (U+014A): L<<37.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<196.0,19.0>> = 13.985871104659793\n\n\t* G (U+0047): B<<113.0,-8.0>-<162.0,-8.0>-<192.0,48.0>-<207.0,101.0>>/L<<207.0,101.0>--<196.0,0.0>> = 9.586878054232836\n\n\t* Gbreve (U+011E): B<<113.0,-8.0>-<162.0,-8.0>-<192.0,48.0>-<207.0,101.0>>/L<<207.0,101.0>--<196.0,0.0>> = 9.586878054232836\n\n\t* Gcircumflex (U+011C): B<<113.0,-8.0>-<162.0,-8.0>-<192.0,48.0>-<207.0,101.0>>/L<<207.0,101.0>--<196.0,0.0>> = 9.586878054232836\n\n\t* Gcommaaccent (U+0122): B<<113.0,-8.0>-<162.0,-8.0>-<192.0,48.0>-<207.0,101.0>>/L<<207.0,101.0>--<196.0,0.0>> = 9.586878054232836\n\n\t* Gdotaccent (U+0120): B<<113.0,-8.0>-<162.0,-8.0>-<192.0,48.0>-<207.0,101.0>>/L<<207.0,101.0>--<196.0,0.0>> = 9.586878054232836\n\n\t* M (U+004D): L<<161.0,0.0>--<360.0,635.0>>/L<<360.0,635.0>--<259.0,0.0>> = 8.362768869809175\n\n\t* M (U+004D): L<<37.0,0.0>--<138.0,635.0>>/L<<138.0,635.0>--<132.0,0.0>> = 8.496121407581132\n\n\t* N (U+004E): L<<306.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<171.0,722.0>> = 13.97639586911254\n\n\t* N (U+004E): L<<37.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<198.0,0.0>> = 14.016680805676431\n\n\t* Nacute (U+0143): L<<306.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<171.0,722.0>> = 13.97639586911254\n\n\t* Nacute (U+0143): L<<37.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<198.0,0.0>> = 14.016680805676431\n\n\t* Ncaron (U+0147): L<<306.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<171.0,722.0>> = 13.97639586911254\n\n\t* Ncaron (U+0147): L<<37.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<198.0,0.0>> = 14.016680805676431\n\n\t* Ncommaaccent (U+0145): L<<306.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<171.0,722.0>> = 13.97639586911254\n\n\t* Ncommaaccent (U+0145): L<<37.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<198.0,0.0>> = 14.016680805676431\n\n\t* Ntilde (U+00D1): L<<306.0,722.0>--<219.0,172.0>>/L<<219.0,172.0>--<171.0,722.0>> = 13.97639586911254\n\n\t* Ntilde (U+00D1): L<<37.0,0.0>--<141.0,654.0>>/L<<141.0,654.0>--<198.0,0.0>> = 14.016680805676431\n\n\t* W (U+0057): L<<240.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<125.0,722.0>> = 10.760782576323393\n\n\t* W (U+0057): L<<404.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<286.0,722.0>> = 11.099573105048746\n\n\t* W (U+0057): L<<84.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<215.0,0.0>> = 11.674856427669592\n\n\t* Wacute (U+1E82): L<<240.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<125.0,722.0>> = 10.760782576323393\n\n\t* Wacute (U+1E82): L<<404.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<286.0,722.0>> = 11.099573105048746\n\n\t* Wacute (U+1E82): L<<84.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<215.0,0.0>> = 11.674856427669592\n\n\t* Wcircumflex (U+0174): L<<240.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<125.0,722.0>> = 10.760782576323393\n\n\t* Wcircumflex (U+0174): L<<404.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<286.0,722.0>> = 11.099573105048746\n\n\t* Wcircumflex (U+0174): L<<84.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<215.0,0.0>> = 11.674856427669592\n\n\t* Wdieresis (U+1E84): L<<240.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<125.0,722.0>> = 10.760782576323393\n\n\t* Wdieresis (U+1E84): L<<404.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<286.0,722.0>> = 11.099573105048746\n\n\t* Wdieresis (U+1E84): L<<84.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<215.0,0.0>> = 11.674856427669592\n\n\t* Wgrave (U+1E80): L<<240.0,722.0>--<83.0,128.0>>/L<<83.0,128.0>--<125.0,722.0>> = 10.760782576323393\n\n\t* Wgrave (U+1E80): L<<404.0,722.0>--<256.0,128.0>>/L<<256.0,128.0>--<286.0,722.0>> = 11.099573105048746\n\n\t* Wgrave (U+1E80): L<<84.0,0.0>--<249.0,625.0>>/L<<249.0,625.0>--<215.0,0.0>> = 11.674856427669592\n\n\t* aogonek (U+0105): B<<70.0,-8.0>-<108.0,-8.0>-<139.0,22.0>-<153.0,54.0>>/B<<153.0,54.0>-<151.0,42.0>-<148.0,21.0>-<148.0,3.0>> = 14.167055522631172\n\n\t* four (U+0034): L<<44.0,232.0>--<220.0,661.0>>/L<<220.0,661.0>--<152.0,232.0>> = 13.29929012602368\n\n\t* naira (U+20A6): L<<299.0,722.0>--<215.0,187.0>>/L<<215.0,187.0>--<195.0,722.0>> = 11.064026024100079\n\n\t* naira (U+20A6): L<<60.0,0.0>--<164.0,658.0>>/L<<164.0,658.0>--<191.0,0.0>> = 11.331293738145234\n\n\t* onequarter (U+00BC): L<<263.0,132.0>--<349.0,346.0>>/L<<349.0,346.0>--<315.0,132.0>> = 12.866060191013302\n\n\t* ordfeminine (U+00AA): B<<98.0,341.0>-<127.0,341.0>-<150.0,363.0>-<161.0,387.0>>/B<<161.0,387.0>-<159.0,376.0>-<157.0,360.0>-<156.0,347.0>> = 14.318718317397543\n\n\t* threequarters (U+00BE): L<<268.0,132.0>--<354.0,346.0>>/L<<354.0,346.0>--<320.0,132.0>> = 12.866060191013302\n\n\t* trademark (U+2122): L<<231.0,427.0>--<273.0,693.0>>/L<<273.0,693.0>--<283.0,427.0>> = 11.125589403996846\n\n\t* trademark (U+2122): L<<306.0,427.0>--<400.0,693.0>>/L<<400.0,693.0>--<358.0,427.0>> = 10.489938994467316\n\n\t* uni2074 (U+2074): L<<78.0,454.0>--<164.0,668.0>>/L<<164.0,668.0>--<130.0,454.0>> = 12.866060191013302\n\n\t* uni2084 (U+2084): L<<8.0,12.0>--<94.0,226.0>>/L<<94.0,226.0>--<60.0,12.0>> = 12.866060191013302\n\n\t* won (U+20A9): L<<233.0,722.0>--<90.0,140.0>>/L<<90.0,140.0>--<141.0,722.0>> = 8.796399998694842\n\n\t* won (U+20A9): L<<360.0,722.0>--<228.0,140.0>>/L<<228.0,140.0>--<271.0,722.0>> = 8.553217334693652 \n\n\t* won (U+20A9): L<<86.0,0.0>--<233.0,600.0>>/L<<233.0,600.0>--<188.0,0.0>> = 9.47714735664722 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 62]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 62]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* bracketleft (U+005B): X=329.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=226.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=118.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=15.0,Y=1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=368.0,Y=720.0 (should be at cap-height 722?)\n\n\t* braceleft (U+007B): X=367.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=322.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=60.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=15.0,Y=1.0 (should be at baseline 0?)\n\n\t* questiondown (U+00BF): X=544.0,Y=2.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=283.0,Y=2.0 (should be at baseline 0?)\n\n\t* Uring (U+016E): X=356.0,Y=720.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=418.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=418.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=682.0,Y=721.0 (should be at cap-height 722?) \n\n\t* Germandbls (U+1E9E): X=40.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 62]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* question (U+003F) contains a short segment L<<361.0,260.0>--<361.0,267.0>>\n\n\t* G (U+0047) contains a short segment L<<469.0,238.0>--<469.0,229.0>>\n\n\t* g (U+0067) contains a short segment B<<509.0,354.0>-<509.0,357.0>-<509.0,359.0>-<509.0,361.0>>\n\n\t* questiondown (U+00BF) contains a short segment L<<198.0,250.0>--<198.0,243.0>>\n\n\t* ae (U+00E6) contains a short segment L<<829.0,220.0>--<829.0,237.0>>\n\n\t* Eogonek (U+0118) contains a short segment B<<529.0,-81.0>-<520.0,-83.0>-<513.0,-84.0>-<506.0,-84.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<469.0,238.0>--<469.0,229.0>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<509.0,354.0>-<509.0,357.0>-<509.0,359.0>-<509.0,361.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<469.0,238.0>--<469.0,229.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<509.0,354.0>-<509.0,357.0>-<509.0,359.0>-<509.0,361.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<469.0,238.0>--<469.0,229.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<509.0,354.0>-<509.0,357.0>-<509.0,359.0>-<509.0,361.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<469.0,238.0>--<469.0,229.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<509.0,354.0>-<509.0,357.0>-<509.0,359.0>-<509.0,361.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<444.0,-81.0>-<435.0,-83.0>-<428.0,-84.0>-<421.0,-84.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<829.0,220.0>--<829.0,237.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<55.0,355.0>-<55.0,353.0>-<55.0,350.0>-<55.0,348.0>> \n\n\t* peso (U+20B1) contains a short segment B<<709.0,471.0>-<709.0,477.0>-<709.0,483.0>-<709.0,489.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 62]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 62]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 62]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 63]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 63]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=530.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=530.0,Y=-2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=261.0,Y=723.0 (should be at cap-height 722?)\n\n\t* y (U+0079): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=196.0,Y=1.0 (should be at baseline 0?)\n\n\t* yacute (U+00FD): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=134.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ycircumflex (U+0177): X=163.0,Y=-1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=372.0,Y=720.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=441.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=338.0,Y=723.0 (should be at cap-height 722?) \n\n\t* ygrave (U+1EF3): X=163.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 63]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* Aogonek (U+0104) contains a short segment L<<365.0,-6.0>--<366.0,-6.0>>\n\n\t* Iogonek (U+012E) contains a short segment L<<65.0,-8.0>--<68.0,-8.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment L<<177.0,-9.0>--<178.0,-9.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<157.0,323.0>-<157.0,330.0>-<157.0,337.0>-<157.0,344.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 63]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 63]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<139.0,0.0>--<139.0,636.0>>/L<<139.0,636.0>--<279.0,0.0>> = 12.414292646085597\n\n\t* M (U+004D): L<<333.0,0.0>--<476.0,636.0>>/L<<476.0,636.0>--<476.0,0.0>> = 12.671808525817601\n\n\t* trademark (U+2122): L<<305.0,413.0>--<305.0,677.0>>/L<<305.0,677.0>--<372.0,413.0>> = 14.240323742940625 \n\n\t* trademark (U+2122): L<<418.0,413.0>--<485.0,677.0>>/L<<485.0,677.0>--<485.0,413.0>> = 14.240323742940625 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 63]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 64]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 64]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* f (U+0066): X=324.0,Y=723.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=168.0,Y=1.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=231.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=491.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=373.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=231.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=231.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=491.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=373.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=231.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=252.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=512.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=394.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=252.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=73.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=333.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=215.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=73.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=225.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=485.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=367.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=225.0,Y=941.0 (should be at ascender 940?)\n\n\t* uni2083 (U+2083): X=6.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=319.0,Y=1.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=213.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 64]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<382.0,243.0>--<382.0,228.0>>\n\n\t* g (U+0067) contains a short segment B<<453.0,359.0>-<453.0,365.0>-<453.0,371.0>-<452.0,377.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<25.0,271.0>--<39.0,271.0>>\n\n\t* braceright (U+007D) contains a short segment L<<308.0,391.0>--<294.0,391.0>>\n\n\t* Eogonek (U+0118) contains a short segment B<<445.0,-77.0>-<438.0,-79.0>-<432.0,-80.0>-<426.0,-80.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<382.0,243.0>--<382.0,228.0>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<453.0,359.0>-<453.0,365.0>-<453.0,371.0>-<452.0,377.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<382.0,243.0>--<382.0,228.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<453.0,359.0>-<453.0,365.0>-<453.0,371.0>-<452.0,377.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<382.0,243.0>--<382.0,228.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<453.0,359.0>-<453.0,365.0>-<453.0,371.0>-<452.0,377.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<382.0,243.0>--<382.0,228.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<453.0,359.0>-<453.0,365.0>-<453.0,371.0>-<452.0,377.0>>\n\n\t* Eng (U+014A) contains a short segment B<<338.0,-41.0>-<332.0,-41.0>-<328.0,-41.0>-<320.0,-39.0>>\n\n\t* eng (U+014B) contains a short segment B<<250.0,-41.0>-<244.0,-41.0>-<240.0,-41.0>-<233.0,-39.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<378.0,-77.0>-<370.0,-79.0>-<364.0,-80.0>-<358.0,-80.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<45.0,358.0>-<45.0,354.0>-<45.0,350.0>-<45.0,347.0>> \n\n\t* peso (U+20B1) contains a short segment B<<605.0,476.0>-<605.0,482.0>-<605.0,487.0>-<605.0,492.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 64]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 64]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<198.0,0.0>--<198.0,464.0>>/L<<198.0,464.0>--<298.0,0.0>> = 12.16220351968183\n\n\t* M (U+004D): L<<407.0,0.0>--<506.0,464.0>>/L<<506.0,464.0>--<506.0,0.0>> = 12.044149894960034\n\n\t* trademark (U+2122): L<<379.0,391.0>--<379.0,612.0>>/L<<379.0,612.0>--<431.0,391.0>> = 13.24051991518721 \n\n\t* trademark (U+2122): L<<493.0,391.0>--<543.0,612.0>>/L<<543.0,612.0>--<543.0,391.0>> = 12.748225610237627 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 64]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have semi-vertical/semi-horizontal lines:\n\n\t* ordfeminine (U+00AA): L<<23.0,600.0>--<163.0,599.0>> [code: found-semi-vertical]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 65]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 65]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* Q (U+0051): X=205.0,Y=-2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=189.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=104.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=104.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=125.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=125.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=113.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=113.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=30.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=30.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tcommaaccent (U+0163): X=99.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=125.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=125.0,Y=723.0 (should be at cap-height 722?)\n\n\t* florin (U+0192): X=274.0,Y=721.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=259.0,Y=723.0 (should be at cap-height 722?) \n\n\t* tilde (U+02DC): X=259.0,Y=723.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 65]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<32.0,321.0>--<42.0,321.0>>\n\n\t* braceright (U+007D) contains a short segment L<<190.0,361.0>--<180.0,361.0>>\n\n\t* iogonek (U+012F) contains a short segment L<<40.0,-7.0>--<41.0,-7.0>>\n\n\t* Lslash (U+0141) contains a short segment L<<153.0,462.0>--<147.0,455.0>>\n\n\t* Lslash (U+0141) contains a short segment L<<147.0,455.0>--<147.0,465.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<107.0,0.0>--<120.0,0.0>>\n\n\t* baht (U+0E3F) contains a short segment B<<140.0,722.0>-<137.0,722.0>-<134.0,722.0>-<131.0,722.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<123.0,330.0>-<123.0,335.0>-<123.0,340.0>-<123.0,345.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<123.0,377.0>-<123.0,383.0>-<123.0,389.0>-<123.0,394.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 65]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 65]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<228.0,0.0>--<324.0,625.0>>/L<<324.0,625.0>--<324.0,0.0>> = 8.732384270873432\n\n\t* M (U+004D): L<<95.0,0.0>--<95.0,625.0>>/L<<95.0,625.0>--<186.0,0.0>> = 8.284053921443984\n\n\t* W (U+0057): L<<150.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<282.0,0.0>> = 12.895699959626839\n\n\t* W (U+0057): L<<189.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<71.0,722.0>> = 11.943382758451724\n\n\t* W (U+0057): L<<370.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<250.0,722.0>> = 12.14431331256616\n\n\t* Wacute (U+1E82): L<<150.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<282.0,0.0>> = 12.895699959626839\n\n\t* Wacute (U+1E82): L<<189.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<71.0,722.0>> = 11.943382758451724\n\n\t* Wacute (U+1E82): L<<370.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<250.0,722.0>> = 12.14431331256616\n\n\t* Wcircumflex (U+0174): L<<150.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<282.0,0.0>> = 12.895699959626839\n\n\t* Wcircumflex (U+0174): L<<189.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<71.0,722.0>> = 11.943382758451724\n\n\t* Wcircumflex (U+0174): L<<370.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<250.0,722.0>> = 12.14431331256616\n\n\t* Wdieresis (U+1E84): L<<150.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<282.0,0.0>> = 12.895699959626839\n\n\t* Wdieresis (U+1E84): L<<189.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<71.0,722.0>> = 11.943382758451724\n\n\t* Wdieresis (U+1E84): L<<370.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<250.0,722.0>> = 12.14431331256616\n\n\t* Wgrave (U+1E80): L<<150.0,0.0>--<216.0,584.0>>/L<<216.0,584.0>--<282.0,0.0>> = 12.895699959626839\n\n\t* Wgrave (U+1E80): L<<189.0,722.0>--<126.0,158.0>>/L<<126.0,158.0>--<71.0,722.0>> = 11.943382758451724\n\n\t* Wgrave (U+1E80): L<<370.0,722.0>--<314.0,158.0>>/L<<314.0,158.0>--<250.0,722.0>> = 12.14431331256616\n\n\t* asterisk (U+002A): L<<153.0,677.0>--<154.0,688.0>>/L<<154.0,688.0>--<150.0,647.0>> = 0.37776889622800824\n\n\t* four (U+0034): L<<61.0,238.0>--<161.0,641.0>>/L<<161.0,641.0>--<161.0,238.0>> = 13.935842087901696\n\n\t* naira (U+20A6): L<<115.0,0.0>--<115.0,606.0>>/L<<115.0,606.0>--<242.0,0.0>> = 11.836233035572075\n\n\t* naira (U+20A6): L<<239.0,722.0>--<239.0,249.0>>/L<<239.0,249.0>--<142.0,722.0>> = 11.589194825602867\n\n\t* trademark (U+2122): L<<232.0,427.0>--<232.0,688.0>>/L<<232.0,688.0>--<284.0,427.0>> = 11.267710094402245\n\n\t* trademark (U+2122): L<<314.0,427.0>--<366.0,688.0>>/L<<366.0,688.0>--<366.0,427.0>> = 11.267710094402245\n\n\t* won (U+20A9): L<<156.0,0.0>--<205.0,565.0>>/L<<205.0,565.0>--<254.0,0.0>> = 9.913225084796007\n\n\t* won (U+20A9): L<<176.0,722.0>--<129.0,175.0>>/L<<129.0,175.0>--<86.0,722.0>> = 9.405788094199899 \n\n\t* won (U+20A9): L<<327.0,722.0>--<285.0,175.0>>/L<<285.0,175.0>--<238.0,722.0>> = 9.301671166816673 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 65]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=555.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=555.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=336.0,Y=1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=277.0,Y=723.0 (should be at cap-height 722?)\n\n\t* y (U+0079): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=271.0,Y=-1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=165.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=497.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=38.0,Y=-1.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=209.0,Y=2.0 (should be at baseline 0?)\n\n\t* yacute (U+00FD): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* tcaron (U+0165): X=342.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tcaron (U+0165): X=233.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ycircumflex (U+0177): X=163.0,Y=2.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=497.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=38.0,Y=-1.0 (should be at baseline 0?) \n\n\t* ygrave (U+1EF3): X=163.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* uogonek (U+0173) contains a short segment L<<309.0,-8.0>--<326.0,-8.0>>\n\n\t* Euro (U+20AC) contains a short segment L<<180.0,389.0>--<180.0,397.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<180.0,329.0>-<180.0,330.0>-<180.0,332.0>-<180.0,334.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Euro (U+20AC): L<<180.0,334.0>--<180.0,389.0>> -> L<<180.0,389.0>--<180.0,397.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<154.0,0.0>--<154.0,592.0>>/L<<154.0,592.0>--<283.0,0.0>> = 12.292897311398544\n\n\t* M (U+004D): L<<352.0,0.0>--<483.0,592.0>>/L<<483.0,592.0>--<483.0,0.0>> = 12.477559261715635\n\n\t* trademark (U+2122): L<<324.0,407.0>--<324.0,660.0>>/L<<324.0,660.0>--<387.0,407.0>> = 13.982945083753037 \n\n\t* trademark (U+2122): L<<437.0,407.0>--<499.0,660.0>>/L<<499.0,660.0>--<499.0,407.0>> = 13.769505266889137 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 67]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 67]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* Q (U+0051): X=420.0,Y=1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=332.0,Y=721.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=312.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=610.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=58.0,Y=2.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=253.0,Y=1.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=79.0,Y=-1.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=552.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=414.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=610.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=58.0,Y=2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=376.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=376.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=225.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=203.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=134.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=300.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=743.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=37.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=480.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 67]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<480.0,267.0>--<480.0,250.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<480.0,267.0>--<480.0,250.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<480.0,267.0>--<480.0,250.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<480.0,267.0>--<480.0,250.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<480.0,267.0>--<480.0,250.0>>\n\n\t* uogonek (U+0173) contains a short segment L<<372.0,-9.0>--<387.0,-9.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<204.0,391.0>-<204.0,395.0>-<204.0,399.0>-<204.0,403.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<204.0,322.0>-<204.0,325.0>-<204.0,328.0>-<204.0,332.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 67]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 67]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 67]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 68]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 68]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=283.0,Y=2.0 (should be at baseline 0?)\n\n\t* dollar (U+0024): X=309.0,Y=721.0 (should be at cap-height 722?)\n\n\t* one (U+0031): X=372.0,Y=724.0 (should be at cap-height 722?)\n\n\t* one (U+0031): X=316.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=380.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslash (U+00D8): X=26.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Oslash (U+00D8): X=645.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tcommaaccent (U+0163): X=126.0,Y=-1.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=601.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=489.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Oslashacute (U+01FE): X=26.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Oslashacute (U+01FE): X=645.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=23.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=275.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=275.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=260.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=378.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=812.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=69.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=503.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 68]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<488.0,277.0>--<485.0,257.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<230.0,-12.0>-<233.0,-12.0>-<237.0,-12.0>-<240.0,-12.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<488.0,277.0>--<485.0,257.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<488.0,277.0>--<485.0,257.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<488.0,277.0>--<485.0,257.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<488.0,277.0>--<485.0,257.0>>\n\n\t* Iogonek (U+012E) contains a short segment L<<50.0,0.0>--<63.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<267.0,0.0>--<285.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<195.0,0.0>--<214.0,0.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<174.0,-12.0>-<177.0,-12.0>-<181.0,-12.0>-<185.0,-12.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<204.0,396.0>-<205.0,400.0>-<205.0,403.0>-<206.0,407.0>> \n\n\t* peso (U+20B1) contains a short segment B<<592.0,516.0>-<592.0,519.0>-<592.0,522.0>-<592.0,525.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 68]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 68]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 68]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 69]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 69]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=243.0,Y=720.0 (should be at cap-height 722?)\n\n\t* dollar (U+0024): X=243.0,Y=1.0 (should be at baseline 0?)\n\n\t* onesuperior (U+00B9): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=287.0,Y=724.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=233.0,Y=1.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=177.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=177.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=215.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=215.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=193.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=193.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=59.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=59.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=90.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=94.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=82.0,Y=-2.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=209.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=209.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uogonek (U+0173): X=384.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aeacute (U+01FD): X=504.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=419.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=243.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=243.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=342.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=133.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=313.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=744.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=40.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=470.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 69]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* Aogonek (U+0104) contains a short segment L<<482.0,0.0>--<483.0,0.0>>\n\n\t* Iogonek (U+012E) contains a short segment L<<90.0,-2.0>--<94.0,-2.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<293.0,0.0>--<308.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<237.0,0.0>--<253.0,0.0>> \n\n\t* Uogonek (U+0172) contains a short segment B<<304.0,-12.0>-<308.0,-12.0>-<313.0,-12.0>-<317.0,-12.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 69]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 69]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 69]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 70]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 70]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* j (U+006A): X=7.0,Y=2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=161.0,Y=1.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=365.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=659.0,Y=942.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=546.0,Y=942.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=365.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=375.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=669.0,Y=942.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=556.0,Y=942.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=375.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=387.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=681.0,Y=942.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=568.0,Y=942.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=387.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=174.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=468.0,Y=942.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=355.0,Y=942.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=174.0,Y=941.0 (should be at ascender 940?)\n\n\t* ij (U+0133): X=285.0,Y=2.0 (should be at baseline 0?)\n\n\t* jcircumflex (U+0135): X=7.0,Y=2.0 (should be at baseline 0?)\n\n\t* Eng (U+014A): X=438.0,Y=2.0 (should be at baseline 0?)\n\n\t* eng (U+014B): X=311.0,Y=2.0 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=368.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=662.0,Y=942.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=549.0,Y=942.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=368.0,Y=941.0 (should be at ascender 940?)\n\n\t* uni0237 (U+0237): X=7.0,Y=2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=366.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=481.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=729.0,Y=721.0 (should be at cap-height 722?) \n\n\t* Germandbls (U+1E9E): X=127.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 70]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<474.0,248.0>--<472.0,238.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<254.0,-12.0>-<258.0,-12.0>-<261.0,-12.0>-<265.0,-12.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<474.0,248.0>--<472.0,238.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<474.0,248.0>--<472.0,238.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<474.0,248.0>--<472.0,238.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<474.0,248.0>--<472.0,238.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<216.0,-12.0>-<218.0,-12.0>-<219.0,-12.0>-<220.0,-12.0>> \n\n\t* peso (U+20B1) contains a short segment B<<702.0,498.0>-<702.0,503.0>-<702.0,507.0>-<702.0,512.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 70]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 70]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 70]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 71]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 71]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=272.0,Y=1.0 (should be at baseline 0?)\n\n\t* onesuperior (U+00B9): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=371.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=246.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=246.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=284.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=284.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=262.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=262.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aogonek (U+0105): X=313.0,Y=2.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=128.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=128.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=278.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=278.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=578.0,Y=723.0 (should be at cap-height 722?)\n\n\t* aeacute (U+01FD): X=489.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=312.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=312.0,Y=723.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=416.0,Y=720.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=196.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=249.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=208.0,Y=724.0 (should be at cap-height 722?)\n\n\t* arrowSE (U+2198): X=383.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSE (U+2198): X=813.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowSW (U+2199): X=68.0,Y=-1.0 (should be at baseline 0?) \n\n\t* arrowSW (U+2199): X=499.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 71]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* Ccedilla (U+00C7) contains a short segment B<<282.0,-12.0>-<285.0,-12.0>-<287.0,-12.0>-<290.0,-12.0>>\n\n\t* ccedilla (U+00E7) contains a short segment B<<210.0,-12.0>-<213.0,-12.0>-<215.0,-12.0>-<218.0,-12.0>>\n\n\t* Iogonek (U+012E) contains a short segment L<<50.0,0.0>--<53.0,0.0>>\n\n\t* Scedilla (U+015E) contains a short segment B<<241.0,-12.0>-<245.0,-12.0>-<248.0,-12.0>-<251.0,-12.0>>\n\n\t* scedilla (U+015F) contains a short segment B<<193.0,-12.0>-<195.0,-12.0>-<197.0,-12.0>-<199.0,-12.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<255.0,0.0>--<268.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<197.0,0.0>--<211.0,0.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment B<<166.0,-11.0>-<169.0,-11.0>-<173.0,-11.0>-<176.0,-11.0>>\n\n\t* baht (U+0E3F) contains a short segment L<<302.0,0.0>--<304.0,0.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<193.0,388.0>-<194.0,396.0>-<196.0,404.0>-<197.0,412.0>>\n\n\t* peso (U+20B1) contains a short segment L<<674.0,509.0>--<673.0,509.0>> \n\n\t* peso (U+20B1) contains a short segment L<<70.0,476.0>--<71.0,476.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 71]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 71]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 71]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* Q (U+0051): X=113.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Ccedilla (U+00C7): X=111.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ccedilla (U+00E7): X=97.0,Y=-1.0 (should be at baseline 0?)\n\n\t* oslash (U+00F8): X=-21.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=68.0,Y=2.0 (should be at baseline 0?)\n\n\t* oslashacute (U+01FF): X=-21.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2085 (U+2085): X=34.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2085 (U+2085): X=-28.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2086 (U+2086): X=-14.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=174.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=174.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<34.0,316.0>--<45.0,316.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<163.0,-27.0>--<151.0,-27.0>>\n\n\t* braceright (U+007D) contains a short segment L<<210.0,366.0>--<199.0,366.0>>\n\n\t* braceright (U+007D) contains a short segment L<<81.0,709.0>--<93.0,709.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<133.0,0.0>--<148.0,0.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment L<<107.0,-6.0>--<111.0,-6.0>>\n\n\t* Euro (U+20AC) contains a short segment L<<155.0,389.0>--<156.0,396.0>> \n\n\t* peso (U+20B1) contains a short segment B<<399.0,549.0>-<399.0,551.0>-<399.0,554.0>-<399.0,556.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Euro (U+20AC): L<<149.0,351.0>--<155.0,389.0>> -> L<<155.0,389.0>--<156.0,396.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<144.0,273.0>--<303.0,662.0>>/L<<303.0,662.0>--<241.0,273.0>> = 13.176009608626945\n\n\t* AEacute (U+01FC): L<<144.0,273.0>--<303.0,662.0>>/L<<303.0,662.0>--<241.0,273.0>> = 13.176009608626945\n\n\t* M (U+004D): L<<208.0,0.0>--<400.0,616.0>>/L<<400.0,616.0>--<302.0,0.0>> = 8.272163305491443\n\n\t* M (U+004D): L<<68.0,0.0>--<166.0,616.0>>/L<<166.0,616.0>--<155.0,0.0>> = 8.016452614687275\n\n\t* W (U+0057): L<<130.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<263.0,0.0>> = 13.439958741490967\n\n\t* W (U+0057): L<<275.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<153.0,722.0>> = 12.585106564523912\n\n\t* W (U+0057): L<<469.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<347.0,722.0>> = 12.62743983989336\n\n\t* Wacute (U+1E82): L<<130.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<263.0,0.0>> = 13.439958741490967\n\n\t* Wacute (U+1E82): L<<275.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<153.0,722.0>> = 12.585106564523912\n\n\t* Wacute (U+1E82): L<<469.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<347.0,722.0>> = 12.62743983989336\n\n\t* Wcircumflex (U+0174): L<<130.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<263.0,0.0>> = 13.439958741490967\n\n\t* Wcircumflex (U+0174): L<<275.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<153.0,722.0>> = 12.585106564523912\n\n\t* Wcircumflex (U+0174): L<<469.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<347.0,722.0>> = 12.62743983989336\n\n\t* Wdieresis (U+1E84): L<<130.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<263.0,0.0>> = 13.439958741490967\n\n\t* Wdieresis (U+1E84): L<<275.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<153.0,722.0>> = 12.585106564523912\n\n\t* Wdieresis (U+1E84): L<<469.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<347.0,722.0>> = 12.62743983989336\n\n\t* Wgrave (U+1E80): L<<130.0,0.0>--<283.0,551.0>>/L<<283.0,551.0>--<263.0,0.0>> = 13.439958741490967\n\n\t* Wgrave (U+1E80): L<<275.0,722.0>--<126.0,183.0>>/L<<126.0,183.0>--<153.0,722.0>> = 12.585106564523912\n\n\t* Wgrave (U+1E80): L<<469.0,722.0>--<326.0,183.0>>/L<<326.0,183.0>--<347.0,722.0>> = 12.62743983989336\n\n\t* four (U+0034): L<<75.0,242.0>--<220.0,602.0>>/L<<220.0,602.0>--<163.0,242.0>> = 12.941337046641362\n\n\t* naira (U+20A6): L<<323.0,722.0>--<253.0,279.0>>/L<<253.0,279.0>--<231.0,722.0>> = 11.822320966960772\n\n\t* naira (U+20A6): L<<86.0,0.0>--<178.0,581.0>>/L<<178.0,581.0>--<209.0,0.0>> = 12.052138780472214\n\n\t* trademark (U+2122): L<<282.0,427.0>--<322.0,683.0>>/L<<322.0,683.0>--<334.0,427.0>> = 11.564434309989204\n\n\t* trademark (U+2122): L<<369.0,427.0>--<461.0,683.0>>/L<<461.0,683.0>--<421.0,427.0>> = 10.886509526271405\n\n\t* won (U+20A9): L<<140.0,0.0>--<270.0,531.0>>/L<<270.0,531.0>--<235.0,0.0>> = 9.985527074569585\n\n\t* won (U+20A9): L<<261.0,722.0>--<133.0,203.0>>/L<<133.0,203.0>--<170.0,722.0>> = 9.7764989211318 \n\n\t* won (U+20A9): L<<431.0,722.0>--<305.0,203.0>>/L<<305.0,203.0>--<341.0,722.0>> = 9.678033141233861 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=334.0,Y=-2.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=334.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=107.0,Y=-2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=136.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Ccedilla (U+00C7): X=101.0,Y=-1.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=170.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=170.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ccedilla (U+00E7): X=84.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ntilde (U+00F1): X=191.0,Y=723.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=191.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=179.0,Y=723.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=179.0,Y=723.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=200.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=259.0,Y=-1.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=96.0,Y=723.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=96.0,Y=723.0 (should be at cap-height 722?)\n\n\t* iogonek (U+012F): X=-1.0,Y=-1.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=191.0,Y=723.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=191.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uogonek (U+0173): X=189.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tilde (U+02DC): X=325.0,Y=723.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=325.0,Y=723.0 (should be at cap-height 722?)\n\n\t* quotesinglbase (U+201A): X=48.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=48.0,Y=1.0 (should be at baseline 0?)\n\n\t* quotedblbase (U+201E): X=146.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=153.0,Y=-2.0 (should be at baseline 0?) \n\n\t* uni2088 (U+2088): X=153.0,Y=-2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* sterling (U+00A3) contains a short segment B<<148.0,394.0>-<148.0,399.0>-<148.0,403.0>-<148.0,407.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<91.0,408.0>-<91.0,403.0>-<91.0,399.0>-<91.0,394.0>>\n\n\t* Ccedilla (U+00C7) contains a short segment B<<133.0,-8.0>-<134.0,-8.0>-<134.0,-8.0>-<135.0,-8.0>>\n\n\t* ccedilla (U+00E7) contains a short segment B<<116.0,-8.0>-<117.0,-8.0>-<119.0,-8.0>-<120.0,-8.0>>\n\n\t* Lslash (U+0141) contains a short segment L<<185.0,462.0>--<178.0,455.0>>\n\n\t* Lslash (U+0141) contains a short segment L<<178.0,455.0>--<180.0,465.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<117.0,0.0>--<129.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<66.0,0.0>--<81.0,0.0>>\n\n\t* baht (U+0E3F) contains a short segment B<<213.0,722.0>-<209.0,722.0>-<204.0,722.0>-<200.0,722.0>>\n\n\t* peseta (U+20A7) contains a short segment B<<372.0,553.0>-<372.0,554.0>-<372.0,555.0>-<372.0,557.0>> \n\n\t* Euro (U+20AC) contains a short segment L<<144.0,390.0>--<145.0,394.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Euro (U+20AC): L<<138.0,355.0>--<144.0,390.0>> -> L<<144.0,390.0>--<145.0,394.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<126.0,265.0>--<293.0,674.0>>/L<<293.0,674.0>--<229.0,265.0>> = 13.31735120396611\n\n\t* AEacute (U+01FC): L<<126.0,265.0>--<293.0,674.0>>/L<<293.0,674.0>--<229.0,265.0>> = 13.31735120396611\n\n\t* G (U+0047): B<<127.0,-8.0>-<175.0,-8.0>-<208.0,35.0>-<227.0,92.0>>/L<<227.0,92.0>--<220.0,0.0>> = 14.083870871348083\n\n\t* Gbreve (U+011E): B<<127.0,-8.0>-<175.0,-8.0>-<208.0,35.0>-<227.0,92.0>>/L<<227.0,92.0>--<220.0,0.0>> = 14.083870871348083\n\n\t* Gcircumflex (U+011C): B<<127.0,-8.0>-<175.0,-8.0>-<208.0,35.0>-<227.0,92.0>>/L<<227.0,92.0>--<220.0,0.0>> = 14.083870871348083\n\n\t* Gcommaaccent (U+0122): B<<127.0,-8.0>-<175.0,-8.0>-<208.0,35.0>-<227.0,92.0>>/L<<227.0,92.0>--<220.0,0.0>> = 14.083870871348083\n\n\t* Gdotaccent (U+0120): B<<127.0,-8.0>-<175.0,-8.0>-<208.0,35.0>-<227.0,92.0>>/L<<227.0,92.0>--<220.0,0.0>> = 14.083870871348083\n\n\t* M (U+004D): L<<187.0,0.0>--<382.0,625.0>>/L<<382.0,625.0>--<283.0,0.0>> = 8.327052092246626\n\n\t* M (U+004D): L<<54.0,0.0>--<153.0,625.0>>/L<<153.0,625.0>--<145.0,0.0>> = 8.267523755942987\n\n\t* W (U+0057): L<<109.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<241.0,0.0>> = 12.583147336067777\n\n\t* W (U+0057): L<<259.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<140.0,722.0>> = 11.734465007872998\n\n\t* W (U+0057): L<<440.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<320.0,722.0>> = 11.880005445926896\n\n\t* Wacute (U+1E82): L<<109.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<241.0,0.0>> = 12.583147336067777\n\n\t* Wacute (U+1E82): L<<259.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<140.0,722.0>> = 11.734465007872998\n\n\t* Wacute (U+1E82): L<<440.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<320.0,722.0>> = 11.880005445926896\n\n\t* Wcircumflex (U+0174): L<<109.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<241.0,0.0>> = 12.583147336067777\n\n\t* Wcircumflex (U+0174): L<<259.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<140.0,722.0>> = 11.734465007872998\n\n\t* Wcircumflex (U+0174): L<<440.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<320.0,722.0>> = 11.880005445926896\n\n\t* Wdieresis (U+1E84): L<<109.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<241.0,0.0>> = 12.583147336067777\n\n\t* Wdieresis (U+1E84): L<<259.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<140.0,722.0>> = 11.734465007872998\n\n\t* Wdieresis (U+1E84): L<<440.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<320.0,722.0>> = 11.880005445926896\n\n\t* Wgrave (U+1E80): L<<109.0,0.0>--<268.0,584.0>>/L<<268.0,584.0>--<241.0,0.0>> = 12.583147336067777\n\n\t* Wgrave (U+1E80): L<<259.0,722.0>--<107.0,158.0>>/L<<107.0,158.0>--<140.0,722.0>> = 11.734465007872998\n\n\t* Wgrave (U+1E80): L<<440.0,722.0>--<295.0,158.0>>/L<<295.0,158.0>--<320.0,722.0>> = 11.880005445926896\n\n\t* four (U+0034): L<<61.0,238.0>--<220.0,629.0>>/L<<220.0,629.0>--<158.0,238.0>> = 13.118851498529795\n\n\t* naira (U+20A6): L<<312.0,722.0>--<236.0,238.0>>/L<<236.0,238.0>--<215.0,722.0>> = 11.408404112930848\n\n\t* naira (U+20A6): L<<74.0,0.0>--<172.0,616.0>>/L<<172.0,616.0>--<201.0,0.0>> = 11.73485894052247\n\n\t* onequarter (U+00BC): L<<298.0,137.0>--<377.0,324.0>>/L<<377.0,324.0>--<347.0,137.0>> = 13.787932829520054\n\n\t* threequarters (U+00BE): L<<309.0,137.0>--<388.0,324.0>>/L<<388.0,324.0>--<358.0,137.0>> = 13.787932829520054\n\n\t* trademark (U+2122): L<<259.0,427.0>--<300.0,688.0>>/L<<300.0,688.0>--<311.0,427.0>> = 11.340866024777961\n\n\t* trademark (U+2122): L<<341.0,427.0>--<434.0,688.0>>/L<<434.0,688.0>--<393.0,427.0>> = 10.684564116976007\n\n\t* uni2074 (U+2074): L<<89.0,459.0>--<168.0,646.0>>/L<<168.0,646.0>--<138.0,459.0>> = 13.787932829520054\n\n\t* uni2084 (U+2084): L<<19.0,17.0>--<98.0,204.0>>/L<<98.0,204.0>--<68.0,17.0>> = 13.787932829520054\n\n\t* won (U+20A9): L<<116.0,0.0>--<253.0,562.0>>/L<<253.0,562.0>--<214.0,0.0>> = 9.730242319695103\n\n\t* won (U+20A9): L<<248.0,722.0>--<114.0,175.0>>/L<<114.0,175.0>--<157.0,722.0>> = 9.270006216072394 \n\n\t* won (U+20A9): L<<399.0,722.0>--<270.0,175.0>>/L<<270.0,175.0>--<310.0,722.0>> = 9.087332823672032 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 74]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 74]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=464.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=464.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=260.0,Y=-1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=233.0,Y=2.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=296.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ccedilla (U+00E7): X=115.0,Y=1.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=242.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=295.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=199.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=236.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=-13.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=52.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=-16.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=38.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=213.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=267.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=225.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=225.0,Y=2.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=239.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=367.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 74]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<27.0,290.0>--<36.0,290.0>>\n\n\t* braceright (U+007D) contains a short segment L<<266.0,392.0>--<257.0,392.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<243.0,290.0>-<243.0,296.0>-<243.0,302.0>-<243.0,308.0>>\n\n\t* Eng (U+014A) contains a short segment B<<196.0,-65.0>-<191.0,-65.0>-<185.0,-64.0>-<180.0,-63.0>>\n\n\t* eng (U+014B) contains a short segment B<<160.0,-65.0>-<156.0,-65.0>-<149.0,-64.0>-<145.0,-63.0>> \n\n\t* Uogonek (U+0172) contains a short segment B<<236.0,-81.0>-<230.0,-83.0>-<224.0,-85.0>-<218.0,-85.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 74]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 74]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<191.0,269.0>--<325.0,614.0>>/L<<325.0,614.0>--<270.0,269.0>> = 12.168570466309797\n\n\t* AEacute (U+01FC): L<<191.0,269.0>--<325.0,614.0>>/L<<325.0,614.0>--<270.0,269.0>> = 12.168570466309797\n\n\t* M (U+004D): L<<114.0,0.0>--<193.0,496.0>>/L<<193.0,496.0>--<185.0,0.0>> = 8.125679355914215\n\n\t* M (U+004D): L<<274.0,0.0>--<427.0,496.0>>/L<<427.0,496.0>--<348.0,0.0>> = 8.093582001111622\n\n\t* W (U+0057): L<<194.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<294.0,0.0>> = 13.376447353049914\n\n\t* W (U+0057): L<<306.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<220.0,722.0>> = 11.730073686117539\n\n\t* W (U+0057): L<<508.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<422.0,722.0>> = 11.685857208815024\n\n\t* Wacute (U+1E82): L<<194.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<294.0,0.0>> = 13.376447353049914\n\n\t* Wacute (U+1E82): L<<306.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<220.0,722.0>> = 11.730073686117539\n\n\t* Wacute (U+1E82): L<<508.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<422.0,722.0>> = 11.685857208815024\n\n\t* Wcircumflex (U+0174): L<<194.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<294.0,0.0>> = 13.376447353049914\n\n\t* Wcircumflex (U+0174): L<<306.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<220.0,722.0>> = 11.730073686117539\n\n\t* Wcircumflex (U+0174): L<<508.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<422.0,722.0>> = 11.685857208815024\n\n\t* Wdieresis (U+1E84): L<<194.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<294.0,0.0>> = 13.376447353049914\n\n\t* Wdieresis (U+1E84): L<<306.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<220.0,722.0>> = 11.730073686117539\n\n\t* Wdieresis (U+1E84): L<<508.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<422.0,722.0>> = 11.685857208815024\n\n\t* Wgrave (U+1E80): L<<194.0,0.0>--<307.0,417.0>>/L<<307.0,417.0>--<294.0,0.0>> = 13.376447353049914\n\n\t* Wgrave (U+1E80): L<<306.0,722.0>--<200.0,313.0>>/L<<200.0,313.0>--<220.0,722.0>> = 11.730073686117539\n\n\t* Wgrave (U+1E80): L<<508.0,722.0>--<400.0,312.0>>/L<<400.0,312.0>--<422.0,722.0>> = 11.685857208815024\n\n\t* trademark (U+2122): L<<292.0,417.0>--<328.0,644.0>>/L<<328.0,644.0>--<333.0,417.0>> = 10.273323889624214\n\n\t* trademark (U+2122): L<<379.0,417.0>--<454.0,644.0>>/L<<454.0,644.0>--<418.0,417.0>> = 9.271866689515553\n\n\t* won (U+20A9): L<<188.0,0.0>--<289.0,411.0>>/L<<289.0,411.0>--<264.0,0.0>> = 10.325548933596686\n\n\t* won (U+20A9): L<<294.0,722.0>--<192.0,318.0>>/L<<192.0,318.0>--<221.0,722.0>> = 10.063870737610458 \n\n\t* won (U+20A9): L<<461.0,722.0>--<365.0,317.0>>/L<<365.0,317.0>--<397.0,722.0>> = 8.817418039351436 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 74]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 75]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 75]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* g (U+0067): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=101.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=214.0,Y=1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=89.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=75.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=75.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=249.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=397.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 75]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* g (U+0067) contains a short segment B<<412.0,379.0>-<412.0,383.0>-<412.0,386.0>-<412.0,390.0>>\n\n\t* braceleft (U+007B) contains a short segment L<<24.0,281.0>--<33.0,281.0>>\n\n\t* braceright (U+007D) contains a short segment L<<286.0,401.0>--<277.0,401.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<87.0,297.0>-<87.0,293.0>-<87.0,288.0>-<87.0,284.0>>\n\n\t* Aogonek (U+0104) contains a short segment B<<412.0,-73.0>-<406.0,-75.0>-<401.0,-76.0>-<397.0,-76.0>>\n\n\t* aogonek (U+0105) contains a short segment B<<347.0,-73.0>-<341.0,-75.0>-<336.0,-76.0>-<332.0,-76.0>>\n\n\t* Eogonek (U+0118) contains a short segment B<<303.0,-73.0>-<297.0,-75.0>-<292.0,-76.0>-<288.0,-76.0>>\n\n\t* gcircumflex (U+011D) contains a short segment B<<412.0,379.0>-<412.0,383.0>-<412.0,386.0>-<412.0,390.0>>\n\n\t* gbreve (U+011F) contains a short segment B<<412.0,379.0>-<412.0,383.0>-<412.0,386.0>-<412.0,390.0>>\n\n\t* gdotaccent (U+0121) contains a short segment B<<412.0,379.0>-<412.0,383.0>-<412.0,386.0>-<412.0,390.0>>\n\n\t* gcommaaccent (U+0123) contains a short segment B<<412.0,379.0>-<412.0,383.0>-<412.0,386.0>-<412.0,390.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<254.0,-73.0>-<248.0,-75.0>-<243.0,-76.0>-<239.0,-76.0>> \n\n\t* uogonek (U+0173) contains a short segment B<<379.0,-73.0>-<373.0,-75.0>-<368.0,-76.0>-<364.0,-76.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 75]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 75]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<207.0,267.0>--<332.0,593.0>>/L<<332.0,593.0>--<280.0,267.0>> = 11.915745020760903\n\n\t* AEacute (U+01FC): L<<207.0,267.0>--<332.0,593.0>>/L<<332.0,593.0>--<280.0,267.0>> = 11.915745020760903\n\n\t* M (U+004D): L<<130.0,0.0>--<202.0,455.0>>/L<<202.0,455.0>--<196.0,0.0>> = 8.236519850791057\n\n\t* M (U+004D): L<<297.0,0.0>--<436.0,455.0>>/L<<436.0,455.0>--<364.0,0.0>> = 7.995599217471609\n\n\t* W (U+0057): L<<216.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<305.0,0.0>> = 13.421120853146205\n\n\t* W (U+0057): L<<317.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<243.0,722.0>> = 11.362284692395885\n\n\t* W (U+0057): L<<521.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<448.0,722.0>> = 11.13964746135827\n\n\t* Wacute (U+1E82): L<<216.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<305.0,0.0>> = 13.421120853146205\n\n\t* Wacute (U+1E82): L<<317.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<243.0,722.0>> = 11.362284692395885\n\n\t* Wacute (U+1E82): L<<521.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<448.0,722.0>> = 11.13964746135827\n\n\t* Wcircumflex (U+0174): L<<216.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<305.0,0.0>> = 13.421120853146205\n\n\t* Wcircumflex (U+0174): L<<317.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<243.0,722.0>> = 11.362284692395885\n\n\t* Wcircumflex (U+0174): L<<521.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<448.0,722.0>> = 11.13964746135827\n\n\t* Wdieresis (U+1E84): L<<216.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<305.0,0.0>> = 13.421120853146205\n\n\t* Wdieresis (U+1E84): L<<317.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<243.0,722.0>> = 11.362284692395885\n\n\t* Wdieresis (U+1E84): L<<521.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<448.0,722.0>> = 11.13964746135827\n\n\t* Wgrave (U+1E80): L<<216.0,0.0>--<316.0,370.0>>/L<<316.0,370.0>--<305.0,0.0>> = 13.421120853146205\n\n\t* Wgrave (U+1E80): L<<317.0,722.0>--<226.0,358.0>>/L<<226.0,358.0>--<243.0,722.0>> = 11.362284692395885\n\n\t* Wgrave (U+1E80): L<<521.0,722.0>--<426.0,357.0>>/L<<426.0,357.0>--<448.0,722.0>> = 11.13964746135827\n\n\t* r (U+0072): B<<358.0,530.0>-<295.0,530.0>-<251.0,506.0>-<222.0,437.0>>/L<<222.0,437.0>--<236.0,522.0>> = 13.443542217849336\n\n\t* racute (U+0155): B<<358.0,530.0>-<295.0,530.0>-<251.0,506.0>-<222.0,437.0>>/L<<222.0,437.0>--<236.0,522.0>> = 13.443542217849336\n\n\t* rcaron (U+0159): B<<358.0,530.0>-<295.0,530.0>-<251.0,506.0>-<222.0,437.0>>/L<<222.0,437.0>--<236.0,522.0>> = 13.443542217849336\n\n\t* rcommaaccent (U+0157): B<<358.0,530.0>-<295.0,530.0>-<251.0,506.0>-<222.0,437.0>>/L<<222.0,437.0>--<236.0,522.0>> = 13.443542217849336\n\n\t* trademark (U+2122): L<<295.0,413.0>--<330.0,631.0>>/L<<330.0,631.0>--<332.0,413.0>> = 9.64666060098961\n\n\t* trademark (U+2122): L<<382.0,413.0>--<452.0,631.0>>/L<<452.0,631.0>--<417.0,413.0>> = 8.680846056958863\n\n\t* won (U+20A9): L<<205.0,0.0>--<296.0,370.0>>/L<<296.0,370.0>--<274.0,0.0>> = 10.414649377573145\n\n\t* won (U+20A9): L<<306.0,722.0>--<212.0,358.0>>/L<<212.0,358.0>--<239.0,722.0>> = 10.23762204103771 \n\n\t* won (U+20A9): L<<472.0,722.0>--<386.0,357.0>>/L<<386.0,357.0>--<416.0,722.0>> = 8.559336963235705 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 75]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 76]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 76]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=253.0,Y=723.0 (should be at cap-height 722?)\n\n\t* dollar (U+0024): X=253.0,Y=-2.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=313.0,Y=723.0 (should be at cap-height 722?)\n\n\t* y (U+0079): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* onesuperior (U+00B9): X=161.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=136.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=161.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=136.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=161.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=136.0,Y=723.0 (should be at cap-height 722?)\n\n\t* germandbls (U+00DF): X=222.0,Y=1.0 (should be at baseline 0?)\n\n\t* atilde (U+00E3): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=174.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=212.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=212.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=192.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=192.0,Y=724.0 (should be at cap-height 722?)\n\n\t* yacute (U+00FD): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* ydieresis (U+00FF): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* eogonek (U+0119): X=306.0,Y=-2.0 (should be at baseline 0?)\n\n\t* itilde (U+0129): X=59.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=59.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Iogonek (U+012E): X=90.0,Y=1.0 (should be at baseline 0?)\n\n\t* utilde (U+0169): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=206.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Uring (U+016E): X=294.0,Y=941.0 (should be at ascender 940?)\n\n\t* ycircumflex (U+0177): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=430.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=250.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=250.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ygrave (U+1EF3): X=203.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=161.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=136.0,Y=723.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=161.0,Y=723.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=136.0,Y=723.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 76]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* M (U+004D) contains a short segment L<<336.0,0.0>--<368.0,0.0>>\n\n\t* Ccedilla (U+00C7) contains a short segment B<<302.0,-12.0>-<306.0,-12.0>-<309.0,-12.0>-<312.0,-12.0>>\n\n\t* ae (U+00E6) contains a short segment B<<332.0,254.0>-<332.0,254.0>-<332.0,252.0>-<332.0,250.0>>\n\n\t* ccedilla (U+00E7) contains a short segment B<<237.0,-12.0>-<239.0,-12.0>-<240.0,-12.0>-<242.0,-12.0>>\n\n\t* Scedilla (U+015E) contains a short segment L<<266.0,-12.0>--<268.0,-12.0>>\n\n\t* scedilla (U+015F) contains a short segment L<<220.0,-12.0>--<225.0,-12.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<279.0,0.0>--<287.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<239.0,0.0>--<249.0,0.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<294.0,-12.0>-<299.0,-12.0>-<305.0,-12.0>-<310.0,-11.0>>\n\n\t* aeacute (U+01FD) contains a short segment B<<332.0,254.0>-<332.0,254.0>-<332.0,252.0>-<332.0,250.0>>\n\n\t* baht (U+0E3F) contains a short segment L<<319.0,0.0>--<324.0,0.0>> \n\n\t* uni20B9 (U+20B9) contains a short segment L<<345.0,531.0>--<345.0,530.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 76]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 76]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 76]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 77]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 77]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* at (U+0040): X=458.0,Y=2.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=117.0,Y=1.0 (should be at baseline 0?)\n\n\t* Ccedilla (U+00C7): X=122.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ccedilla (U+00E7): X=103.0,Y=-1.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=73.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2083 (U+2083): X=48.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2083 (U+2083): X=-25.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 77]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<31.0,307.0>--<42.0,307.0>>\n\n\t* braceright (U+007D) contains a short segment L<<230.0,375.0>--<219.0,375.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<186.0,406.0>-<186.0,409.0>-<186.0,412.0>-<186.0,415.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<84.0,416.0>-<84.0,413.0>-<84.0,409.0>-<84.0,406.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<151.0,-9.0>-<154.0,-9.0>-<157.0,-9.0>-<160.0,-9.0>>\n\n\t* uogonek (U+0173) contains a short segment L<<203.0,-6.0>--<220.0,-6.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<168.0,336.0>-<168.0,339.0>-<169.0,341.0>-<169.0,344.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 77]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 77]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<160.0,271.0>--<310.0,644.0>>/L<<310.0,644.0>--<251.0,271.0>> = 12.91886573485628\n\n\t* AEacute (U+01FC): L<<160.0,271.0>--<310.0,644.0>>/L<<310.0,644.0>--<251.0,271.0>> = 12.91886573485628\n\n\t* M (U+004D): L<<231.0,0.0>--<409.0,575.0>>/L<<409.0,575.0>--<318.0,0.0>> = 8.207613219003091\n\n\t* M (U+004D): L<<84.0,0.0>--<175.0,575.0>>/L<<175.0,575.0>--<166.0,0.0>> = 8.096362767085473\n\n\t* W (U+0057): L<<152.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<274.0,0.0>> = 13.486655085432934\n\n\t* W (U+0057): L<<286.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<176.0,722.0>> = 12.395163918463904\n\n\t* W (U+0057): L<<482.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<373.0,722.0>> = 12.3093778647886\n\n\t* Wacute (U+1E82): L<<152.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<274.0,0.0>> = 13.486655085432934\n\n\t* Wacute (U+1E82): L<<286.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<176.0,722.0>> = 12.395163918463904\n\n\t* Wacute (U+1E82): L<<482.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<373.0,722.0>> = 12.3093778647886\n\n\t* Wcircumflex (U+0174): L<<152.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<274.0,0.0>> = 13.486655085432934\n\n\t* Wcircumflex (U+0174): L<<286.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<176.0,722.0>> = 12.395163918463904\n\n\t* Wcircumflex (U+0174): L<<482.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<373.0,722.0>> = 12.3093778647886\n\n\t* Wdieresis (U+1E84): L<<152.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<274.0,0.0>> = 13.486655085432934\n\n\t* Wdieresis (U+1E84): L<<286.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<176.0,722.0>> = 12.395163918463904\n\n\t* Wdieresis (U+1E84): L<<482.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<373.0,722.0>> = 12.3093778647886\n\n\t* Wgrave (U+1E80): L<<152.0,0.0>--<291.0,504.0>>/L<<291.0,504.0>--<274.0,0.0>> = 13.486655085432934\n\n\t* Wgrave (U+1E80): L<<286.0,722.0>--<152.0,228.0>>/L<<152.0,228.0>--<176.0,722.0>> = 12.395163918463904\n\n\t* Wgrave (U+1E80): L<<482.0,722.0>--<352.0,228.0>>/L<<352.0,228.0>--<373.0,722.0>> = 12.3093778647886\n\n\t* four (U+0034): L<<89.0,250.0>--<226.0,573.0>>/L<<226.0,573.0>--<175.0,250.0>> = 14.011534587327978\n\n\t* naira (U+20A6): L<<104.0,0.0>--<187.0,525.0>>/L<<187.0,525.0>--<226.0,0.0>> = 13.232289238698645\n\n\t* naira (U+20A6): L<<334.0,722.0>--<272.0,325.0>>/L<<272.0,325.0>--<244.0,722.0>> = 12.910588158944263\n\n\t* trademark (U+2122): L<<285.0,423.0>--<324.0,670.0>>/L<<324.0,670.0>--<333.0,423.0>> = 11.059403890467182\n\n\t* trademark (U+2122): L<<372.0,423.0>--<459.0,670.0>>/L<<459.0,670.0>--<420.0,423.0>> = 10.430999122959385\n\n\t* won (U+20A9): L<<157.0,0.0>--<277.0,490.0>>/L<<277.0,490.0>--<245.0,0.0>> = 10.024325753612938\n\n\t* won (U+20A9): L<<273.0,722.0>--<153.0,243.0>>/L<<153.0,243.0>--<188.0,722.0>> = 9.8852725535169 \n\n\t* won (U+20A9): L<<442.0,722.0>--<326.0,243.0>>/L<<326.0,243.0>--<360.0,722.0>> = 9.553185812730547 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 77]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 78]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 78]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=505.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=505.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Q (U+0051): X=301.0,Y=2.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* Aring (U+00C5): X=216.0,Y=724.0 (should be at cap-height 722?)\n\n\t* aogonek (U+0105): X=238.0,Y=-2.0 (should be at baseline 0?)\n\n\t* aogonek (U+0105): X=282.0,Y=-2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=428.0,Y=1.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=25.0,Y=-2.0 (should be at baseline 0?)\n\n\t* iogonek (U+012F): X=85.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=255.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uogonek (U+0173): X=314.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=106.0,Y=-1.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=106.0,Y=-1.0 (should be at baseline 0?)\n\n\t* arrowdown (U+2193): X=217.0,Y=721.0 (should be at cap-height 722?) \n\n\t* arrowdown (U+2193): X=345.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 78]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* braceleft (U+007B) contains a short segment L<<21.0,290.0>--<29.0,290.0>>\n\n\t* braceright (U+007D) contains a short segment L<<246.0,392.0>--<238.0,392.0>>\n\n\t* Eng (U+014A) contains a short segment B<<245.0,-65.0>-<240.0,-65.0>-<237.0,-65.0>-<231.0,-64.0>>\n\n\t* eng (U+014B) contains a short segment B<<209.0,-65.0>-<205.0,-65.0>-<201.0,-65.0>-<196.0,-64.0>> \n\n\t* Uogonek (U+0172) contains a short segment B<<295.0,-82.0>-<287.0,-85.0>-<281.0,-86.0>-<275.0,-86.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 78]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 78]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* AE (U+00C6): L<<187.0,269.0>--<269.0,604.0>>/L<<269.0,604.0>--<269.0,269.0>> = 13.754199011525623\n\n\t* AEacute (U+01FC): L<<187.0,269.0>--<269.0,604.0>>/L<<269.0,604.0>--<269.0,269.0>> = 13.754199011525623\n\n\t* M (U+004D): L<<155.0,0.0>--<155.0,496.0>>/L<<155.0,496.0>--<226.0,0.0>> = 8.146273897478473\n\n\t* M (U+004D): L<<315.0,0.0>--<389.0,496.0>>/L<<389.0,496.0>--<389.0,0.0>> = 8.485570762675497\n\n\t* W (U+0057): L<<235.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<335.0,0.0>> = 13.674019650782396\n\n\t* W (U+0057): L<<240.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<154.0,722.0>> = 12.003356816475677\n\n\t* W (U+0057): L<<442.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<356.0,722.0>> = 11.974293586128676\n\n\t* Wacute (U+1E82): L<<235.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<335.0,0.0>> = 13.674019650782396\n\n\t* Wacute (U+1E82): L<<240.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<154.0,722.0>> = 12.003356816475677\n\n\t* Wacute (U+1E82): L<<442.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<356.0,722.0>> = 11.974293586128676\n\n\t* Wcircumflex (U+0174): L<<235.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<335.0,0.0>> = 13.674019650782396\n\n\t* Wcircumflex (U+0174): L<<240.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<154.0,722.0>> = 12.003356816475677\n\n\t* Wcircumflex (U+0174): L<<442.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<356.0,722.0>> = 11.974293586128676\n\n\t* Wdieresis (U+1E84): L<<235.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<335.0,0.0>> = 13.674019650782396\n\n\t* Wdieresis (U+1E84): L<<240.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<154.0,722.0>> = 12.003356816475677\n\n\t* Wdieresis (U+1E84): L<<442.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<356.0,722.0>> = 11.974293586128676\n\n\t* Wgrave (U+1E80): L<<235.0,0.0>--<282.0,417.0>>/L<<282.0,417.0>--<335.0,0.0>> = 13.674019650782396\n\n\t* Wgrave (U+1E80): L<<240.0,722.0>--<198.0,313.0>>/L<<198.0,313.0>--<154.0,722.0>> = 12.003356816475677\n\n\t* Wgrave (U+1E80): L<<442.0,722.0>--<398.0,312.0>>/L<<398.0,312.0>--<356.0,722.0>> = 11.974293586128676\n\n\t* trademark (U+2122): L<<266.0,417.0>--<266.0,644.0>>/L<<266.0,644.0>--<307.0,417.0>> = 10.238197666512953\n\n\t* trademark (U+2122): L<<353.0,417.0>--<393.0,644.0>>/L<<393.0,644.0>--<393.0,417.0>> = 9.993580259268231\n\n\t* won (U+20A9): L<<224.0,0.0>--<260.0,411.0>>/L<<260.0,411.0>--<300.0,0.0>> = 10.564557714869808\n\n\t* won (U+20A9): L<<225.0,722.0>--<186.0,318.0>>/L<<186.0,318.0>--<152.0,722.0>> = 10.32452874019058 \n\n\t* won (U+20A9): L<<392.0,722.0>--<359.0,317.0>>/L<<359.0,317.0>--<327.0,722.0>> = 9.175942411370093 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 78]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 79]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 79]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* ampersand (U+0026): X=539.0,Y=-1.0 (should be at baseline 0?)\n\n\t* ampersand (U+0026): X=539.0,Y=-1.0 (should be at baseline 0?)\n\n\t* f (U+0066): X=366.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=346.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aogonek (U+0104): X=343.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Aogonek (U+0104): X=374.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=7.0,Y=-2.0 (should be at baseline 0?)\n\n\t* Iogonek (U+012E): X=56.0,Y=-2.0 (should be at baseline 0?)\n\n\t* tcommaaccent (U+0163): X=108.0,Y=-1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=293.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=50.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 79]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* sterling (U+00A3) contains a short segment B<<244.0,414.0>-<244.0,420.0>-<244.0,425.0>-<244.0,430.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<101.0,430.0>-<101.0,425.0>-<101.0,419.0>-<101.0,414.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<205.0,-11.0>-<210.0,-11.0>-<214.0,-11.0>-<219.0,-10.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment L<<169.0,-10.0>--<170.0,-10.0>> \n\n\t* peso (U+20B1) contains a short segment B<<570.0,519.0>-<570.0,522.0>-<570.0,525.0>-<570.0,528.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 79]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 79]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* M (U+004D): L<<129.0,0.0>--<215.0,544.0>>/L<<215.0,544.0>--<248.0,0.0>> = 12.454852439691491\n\n\t* M (U+004D): L<<330.0,0.0>--<536.0,544.0>>/L<<536.0,544.0>--<450.0,0.0>> = 11.757054534252838\n\n\t* trademark (U+2122): L<<367.0,401.0>--<405.0,643.0>>/L<<405.0,643.0>--<426.0,401.0>> = 13.883512378070918 \n\n\t* trademark (U+2122): L<<480.0,401.0>--<577.0,643.0>>/L<<577.0,643.0>--<538.0,401.0>> = 12.68731530400583 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 79]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 80]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 80]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* f (U+0066): X=344.0,Y=721.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=336.0,Y=-1.0 (should be at baseline 0?)\n\n\t* germandbls (U+00DF): X=263.0,Y=2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=390.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=390.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=632.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=64.0,Y=721.0 (should be at cap-height 722?)\n\n\t* uni2083 (U+2083): X=339.0,Y=-2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=116.0,Y=2.0 (should be at baseline 0?)\n\n\t* uni2088 (U+2088): X=116.0,Y=2.0 (should be at baseline 0?) \n\n\t* uni2089 (U+2089): X=76.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 80]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<476.0,257.0>--<476.0,243.0>>\n\n\t* Q (U+0051) contains a short segment B<<350.0,-12.0>-<355.0,-12.0>-<360.0,-12.0>-<366.0,-12.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<476.0,257.0>--<476.0,243.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<476.0,257.0>--<476.0,243.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<476.0,257.0>--<476.0,243.0>> \n\n\t* Gcommaaccent (U+0122) contains a short segment L<<476.0,257.0>--<476.0,243.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 80]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 80]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 80]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 81]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 81]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* f (U+0066): X=355.0,Y=721.0 (should be at cap-height 722?)\n\n\t* g (U+0067): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* g (U+0067): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* j (U+006A): X=47.0,Y=2.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=354.0,Y=1.0 (should be at baseline 0?)\n\n\t* Atilde (U+00C3): X=269.0,Y=941.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=549.0,Y=942.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=436.0,Y=942.0 (should be at ascender 940?)\n\n\t* Atilde (U+00C3): X=269.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=279.0,Y=941.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=559.0,Y=942.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=446.0,Y=942.0 (should be at ascender 940?)\n\n\t* Ntilde (U+00D1): X=279.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=291.0,Y=941.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=571.0,Y=942.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=458.0,Y=942.0 (should be at ascender 940?)\n\n\t* Otilde (U+00D5): X=291.0,Y=941.0 (should be at ascender 940?)\n\n\t* germandbls (U+00DF): X=272.0,Y=2.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcircumflex (U+011D): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gbreve (U+011F): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gdotaccent (U+0121): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* gcommaaccent (U+0123): X=566.0,Y=-1.0 (should be at baseline 0?)\n\n\t* Itilde (U+0128): X=78.0,Y=941.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=358.0,Y=942.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=245.0,Y=942.0 (should be at ascender 940?)\n\n\t* Itilde (U+0128): X=78.0,Y=941.0 (should be at ascender 940?)\n\n\t* ij (U+0133): X=325.0,Y=2.0 (should be at baseline 0?)\n\n\t* jcircumflex (U+0135): X=47.0,Y=2.0 (should be at baseline 0?)\n\n\t* Eng (U+014A): X=478.0,Y=2.0 (should be at baseline 0?)\n\n\t* eng (U+014B): X=351.0,Y=2.0 (should be at baseline 0?)\n\n\t* Utilde (U+0168): X=272.0,Y=941.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=552.0,Y=942.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=439.0,Y=942.0 (should be at ascender 940?)\n\n\t* Utilde (U+0168): X=272.0,Y=941.0 (should be at ascender 940?)\n\n\t* uni0237 (U+0237): X=47.0,Y=2.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=403.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=403.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=655.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=53.0,Y=721.0 (should be at cap-height 722?) \n\n\t* uni2083 (U+2083): X=354.0,Y=1.0 (should be at baseline 0?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 81]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<473.0,248.0>--<473.0,236.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<473.0,248.0>--<473.0,236.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<473.0,248.0>--<473.0,236.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<473.0,248.0>--<473.0,236.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<473.0,248.0>--<473.0,236.0>> \n\n\t* Euro (U+20AC) contains a short segment B<<64.0,357.0>-<64.0,351.0>-<64.0,345.0>-<64.0,339.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 81]],
                    ],
                    logs: [
                        { message: 'No colinear vectors found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 81]],
                    ],
                    logs: [
                        { message: 'No jaggy segments found.', status: 'PASS', traceback: null },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 81]],
                    ],
                    logs: [
                        {
                            message: 'No semi-horizontal/semi-vertical lines found.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'PASS',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* dollar (U+0024): X=181.0,Y=2.0 (should be at baseline 0?)\n\n\t* dollar (U+0024): X=252.0,Y=720.0 (should be at cap-height 722?)\n\n\t* f (U+0066): X=317.0,Y=721.0 (should be at cap-height 722?)\n\n\t* cent (U+00A2): X=122.0,Y=-1.0 (should be at baseline 0?)\n\n\t* paragraph (U+00B6): X=258.0,Y=723.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=202.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onesuperior (U+00B9): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=202.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onequarter (U+00BC): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=202.0,Y=724.0 (should be at cap-height 722?)\n\n\t* onehalf (U+00BD): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* Aring (U+00C5): X=292.0,Y=723.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=199.0,Y=724.0 (should be at cap-height 722?)\n\n\t* atilde (U+00E3): X=199.0,Y=724.0 (should be at cap-height 722?)\n\n\t* aring (U+00E5): X=239.0,Y=720.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=231.0,Y=724.0 (should be at cap-height 722?)\n\n\t* ntilde (U+00F1): X=231.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=214.0,Y=724.0 (should be at cap-height 722?)\n\n\t* otilde (U+00F5): X=214.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=110.0,Y=724.0 (should be at cap-height 722?)\n\n\t* itilde (U+0129): X=110.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=228.0,Y=724.0 (should be at cap-height 722?)\n\n\t* utilde (U+0169): X=228.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uring (U+016F): X=268.0,Y=720.0 (should be at cap-height 722?)\n\n\t* Uogonek (U+0172): X=259.0,Y=2.0 (should be at baseline 0?)\n\n\t* florin (U+0192): X=413.0,Y=720.0 (should be at cap-height 722?)\n\n\t* ring (U+02DA): X=365.0,Y=720.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=325.0,Y=724.0 (should be at cap-height 722?)\n\n\t* tilde (U+02DC): X=325.0,Y=724.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=208.0,Y=1.0 (should be at baseline 0?)\n\n\t* uni2153 (U+2153): X=202.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni2153 (U+2153): X=179.0,Y=724.0 (should be at cap-height 722?)\n\n\t* uni215B (U+215B): X=202.0,Y=724.0 (should be at cap-height 722?) \n\n\t* uni215B (U+215B): X=179.0,Y=724.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* M (U+004D) contains a short segment L<<214.0,0.0>--<245.0,0.0>>\n\n\t* Ccedilla (U+00C7) contains a short segment B<<188.0,-9.0>-<192.0,-10.0>-<197.0,-10.0>-<201.0,-10.0>>\n\n\t* ccedilla (U+00E7) contains a short segment B<<145.0,-9.0>-<149.0,-10.0>-<153.0,-10.0>-<157.0,-10.0>>\n\n\t* Scedilla (U+015E) contains a short segment B<<162.0,-10.0>-<166.0,-10.0>-<171.0,-10.0>-<175.0,-10.0>>\n\n\t* scedilla (U+015F) contains a short segment B<<131.0,-10.0>-<133.0,-10.0>-<135.0,-10.0>-<137.0,-10.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<170.0,0.0>--<176.0,0.0>>\n\n\t* Tcommaaccent (U+0162) contains a short segment L<<131.0,0.0>--<139.0,0.0>>\n\n\t* baht (U+0E3F) contains a short segment B<<281.0,722.0>-<279.0,722.0>-<278.0,722.0>-<277.0,722.0>>\n\n\t* peseta (U+20A7) contains a short segment B<<466.0,549.0>-<466.0,553.0>-<466.0,557.0>-<466.0,562.0>>\n\n\t* Euro (U+20AC) contains a short segment B<<155.0,385.0>-<156.0,392.0>-<157.0,399.0>-<159.0,406.0>>\n\n\t* peso (U+20B1) contains a short segment B<<470.0,554.0>-<470.0,558.0>-<470.0,562.0>-<470.0,566.0>> \n\n\t* uni20B9 (U+20B9) contains a short segment L<<320.0,560.0>--<320.0,559.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* paragraph (U+00B6): L<<436.0,722.0>--<317.0,722.0>> -> L<<317.0,722.0>--<258.0,723.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* G (U+0047): B<<197.0,-10.0>-<267.0,-10.0>-<315.0,47.0>-<340.0,115.0>>/L<<340.0,115.0>--<327.0,0.0>> = 13.736268305622554\n\n\t* Gbreve (U+011E): B<<197.0,-10.0>-<267.0,-10.0>-<315.0,47.0>-<340.0,115.0>>/L<<340.0,115.0>--<327.0,0.0>> = 13.736268305622554\n\n\t* Gcircumflex (U+011C): B<<197.0,-10.0>-<267.0,-10.0>-<315.0,47.0>-<340.0,115.0>>/L<<340.0,115.0>--<327.0,0.0>> = 13.736268305622554\n\n\t* Gcommaaccent (U+0122): B<<197.0,-10.0>-<267.0,-10.0>-<315.0,47.0>-<340.0,115.0>>/L<<340.0,115.0>--<327.0,0.0>> = 13.736268305622554\n\n\t* Gdotaccent (U+0120): B<<197.0,-10.0>-<267.0,-10.0>-<315.0,47.0>-<340.0,115.0>>/L<<340.0,115.0>--<327.0,0.0>> = 13.736268305622554\n\n\t* M (U+004D): L<<245.0,0.0>--<502.0,661.0>>/L<<502.0,661.0>--<397.0,0.0>> = 12.220289778392118\n\n\t* M (U+004D): L<<64.0,0.0>--<169.0,661.0>>/L<<169.0,661.0>--<214.0,0.0>> = 12.920643656569672 \n\n\t* trademark (U+2122): L<<378.0,418.0>--<494.0,695.0>>/L<<494.0,695.0>--<450.0,418.0>> = 13.696870634351301 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
                {
                    description: 'Check if each glyph has the recommended amount of contours.',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/contour_count>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Are there any misaligned on-curve points?',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_alignment_miss>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have on-curve points which have potentially incorrect y coordinates:\n\n\t* at (U+0040): X=721.0,Y=-1.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=289.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketleft (U+005B): X=186.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=78.0,Y=1.0 (should be at baseline 0?)\n\n\t* bracketright (U+005D): X=-25.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=327.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceleft (U+007B): X=279.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=19.0,Y=1.0 (should be at baseline 0?)\n\n\t* braceright (U+007D): X=-25.0,Y=1.0 (should be at baseline 0?)\n\n\t* cent (U+00A2): X=335.0,Y=-1.0 (should be at baseline 0?)\n\n\t* questiondown (U+00BF): X=505.0,Y=2.0 (should be at baseline 0?)\n\n\t* Uring (U+016E): X=454.0,Y=720.0 (should be at cap-height 722?)\n\n\t* baht (U+0E3F): X=378.0,Y=1.0 (should be at baseline 0?)\n\n\t* baht (U+0E3F): X=492.0,Y=721.0 (should be at cap-height 722?)\n\n\t* Germandbls (U+1E9E): X=756.0,Y=721.0 (should be at cap-height 722?) \n\n\t* Germandbls (U+1E9E): X=114.0,Y=721.0 (should be at cap-height 722?) [code: found-misalignments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Are any segments inordinately short?',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_short_segments>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have segments which seem very short:\n\n\t* G (U+0047) contains a short segment L<<469.0,238.0>--<468.0,231.0>>\n\n\t* sterling (U+00A3) contains a short segment B<<122.0,283.0>-<122.0,278.0>-<122.0,273.0>-<122.0,268.0>>\n\n\t* Oslash (U+00D8) contains a short segment L<<274.0,301.0>--<275.0,304.0>>\n\n\t* ae (U+00E6) contains a short segment L<<824.0,220.0>--<827.0,240.0>>\n\n\t* Eogonek (U+0118) contains a short segment B<<476.0,-81.0>-<467.0,-83.0>-<460.0,-84.0>-<453.0,-84.0>>\n\n\t* eogonek (U+0119) contains a short segment B<<262.0,-12.0>-<266.0,-12.0>-<270.0,-12.0>-<273.0,-12.0>>\n\n\t* Gcircumflex (U+011C) contains a short segment L<<469.0,238.0>--<468.0,231.0>>\n\n\t* Gbreve (U+011E) contains a short segment L<<469.0,238.0>--<468.0,231.0>>\n\n\t* Gdotaccent (U+0120) contains a short segment L<<469.0,238.0>--<468.0,231.0>>\n\n\t* Gcommaaccent (U+0122) contains a short segment L<<469.0,238.0>--<468.0,231.0>>\n\n\t* tcommaaccent (U+0163) contains a short segment L<<231.0,-12.0>--<232.0,-12.0>>\n\n\t* Uogonek (U+0172) contains a short segment B<<391.0,-81.0>-<382.0,-83.0>-<375.0,-84.0>-<368.0,-84.0>>\n\n\t* aeacute (U+01FD) contains a short segment L<<824.0,220.0>--<827.0,240.0>> \n\n\t* Oslashacute (U+01FE) contains a short segment L<<274.0,301.0>--<275.0,304.0>> [code: found-short-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do any segments have colinear vectors?',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_colinear_vectors>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have colinear vectors:\n\n\t* Oslash (U+00D8): L<<521.0,422.0>--<520.0,417.0>> -> L<<520.0,417.0>--<497.0,287.0>> \n\n\t* Oslashacute (U+01FE): L<<521.0,422.0>--<520.0,417.0>> -> L<<520.0,417.0>--<497.0,287.0>> [code: found-colinear-vectors]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any jaggy segments?',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_jaggy_segments>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs have jaggy segments:\n\n\t* g (U+0067): B<<-14.0,81.0>-<-14.0,38.0>-<13.0,5.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<-35.0,-10.0>-<-61.0,-51.0>-<-61.0,-87.0>> = 12.323822961307386\n\n\t* gbreve (U+011F): B<<-14.0,81.0>-<-14.0,38.0>-<13.0,5.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<-35.0,-10.0>-<-61.0,-51.0>-<-61.0,-87.0>> = 12.323822961307386\n\n\t* gcircumflex (U+011D): B<<-14.0,81.0>-<-14.0,38.0>-<13.0,5.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<-35.0,-10.0>-<-61.0,-51.0>-<-61.0,-87.0>> = 12.323822961307386\n\n\t* gcommaaccent (U+0123): B<<-14.0,81.0>-<-14.0,38.0>-<13.0,5.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<-35.0,-10.0>-<-61.0,-51.0>-<-61.0,-87.0>> = 12.323822961307386 \n\n\t* gdotaccent (U+0121): B<<-14.0,81.0>-<-14.0,38.0>-<13.0,5.0>-<74.0,-6.0>>/B<<74.0,-6.0>-<-35.0,-10.0>-<-61.0,-51.0>-<-61.0,-87.0>> = 12.323822961307386 [code: found-jaggy-segments]',
                            status: 'WARN',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ',
                    result: 'WARN',
                },
                {
                    description: 'Do outlines contain any semi-vertical or semi-horizontal lines?',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Outlines>',
                        '<FontBakeryCheck:com.google.fonts/check/outline_semi_vertical>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_not_italic',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        This check detects line segments which are nearly, but not quite, exactly horizontal or vertical. Sometimes such lines are created by design, but often they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright lines.\n    ',
                    result: 'SKIP',
                },
            ],
            key: ['<Section: Outlines>', null, null],
            result: { PASS: 139, SKIP: 112, WARN: 253 },
        },
        {
            checks: [
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 0]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 2]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 3]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 5]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 6]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 7]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 8]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 9]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 10]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 11]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 13]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 14]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 16]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 17]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 19]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 20]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 21]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 22]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 23]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 24]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 25]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 26]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 29]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 30]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 32]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 36]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 37]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 38]],
                    ],
                    logs: [
                        {
                            message:
                                'The following glyphs had components with scaling or rotation\nor inverted outline direction:\n\n* acute (component grave)\n* caron (component circumflex)\n* acute.cap (component grave.cap)\n* caron.cap (component circumflex.cap)\n* backslash (component slash)\n* backslash.cap (component slash.cap)\n* parenright.cap (component parenleft.cap)\n [code: transformed-components]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'FAIL',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 39]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 41]],
                    ],
                    logs: [
                        {
                            message: 'No glyphs had components with scaling or rotation',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'PASS',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 42]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 43]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 44]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 45]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 46]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 47]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 48]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 50]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 51]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 53]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 54]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 56]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 57]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 58]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 59]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 60]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 62]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 63]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 64]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 65]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 67]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 68]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 69]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 70]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 71]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 74]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 75]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 76]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 77]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 78]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 79]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 80]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 81]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
                {
                    description: 'Ensure component transforms do not perform scaling or rotation.',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Components>',
                        '<FontBakeryCheck:com.google.fonts/check/transformed_components>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message: 'Unfulfilled Conditions: is_ttf',
                            status: 'SKIP',
                            traceback: null,
                        },
                    ],
                    rationale:
                        "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    result: 'SKIP',
                },
            ],
            key: ['<Section: Components>', null, null],
            result: { FAIL: 21, PASS: 21, SKIP: 42 },
        },
        {
            checks: [
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 0]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BoldItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 0]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 130 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Medium.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 1]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 124 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 2]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Black.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 2]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 140 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 3]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Light.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 3]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 157 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-ThinItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 4]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 114 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 5]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Thin.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 5]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 155 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 6]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Regular.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 6]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 160 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 7]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-Black.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 7]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 160 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 8]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Bold.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 8]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 155 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 9]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-RegularItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 9]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 160 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 10]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-MediumItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 10]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 157 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 11]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-HeavyItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 11]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 152 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-LightItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 12]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 157 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 13]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-ThinItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 13]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 195 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 14]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-MediumItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 14]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 190 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BlackItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 15]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 150 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 16]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-BoldItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 16]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 179 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 17]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Bold.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 17]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 130 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Regular.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 18]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 119 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 19]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Thin.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 19]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 114 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 20]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Heavy.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 20]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 152 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 21]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-Regular.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 21]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 200 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 22]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-Bold.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 22]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 179 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 23]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-MediumItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 23]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 124 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 24]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-BoldItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 24]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 155 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 25]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Heavy.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 25]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 135 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 26]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-Heavy.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 26]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 170 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-BlackItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 27]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 160 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-ThinItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 28]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 155 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 29]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-BlackItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 29]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 140 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 30]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-Thin.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 30]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 195 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-LightItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 31]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 117 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 32]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-HeavyItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 32]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 135 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-Light.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 33]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 117 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Black.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 34]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 150 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCondensed-Medium.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 35]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 157 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 36]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-HeavyItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 36]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 170 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 37]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-Medium.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 37]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 190 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 38]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-Light.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 38]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 198 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 39]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-RegularItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 39]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 200 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGroteskCompressed-RegularItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 40]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 119 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 41]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/ttf/AmericanGrotesk-LightItalic.ttf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 41]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 198 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 42]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Thin.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 42]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 114 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 43]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-Regular.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 43]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 200 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 44]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Heavy.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 44]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 152 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 45]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-ThinItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 45]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 195 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 46]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-MediumItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 46]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 190 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 47]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Regular.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 47]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 119 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 48]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Bold.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 48]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 130 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BlackItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 49]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 150 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 50]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-BoldItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 50]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 179 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 51]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Bold.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 51]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 155 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-RegularItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 52]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 160 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 53]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-MediumItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 53]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 157 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 54]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-HeavyItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 54]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 152 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-LightItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 55]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 157 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 56]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BoldItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 56]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 130 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 57]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Medium.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 57]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 124 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 58]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Light.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 58]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 157 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 59]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Black.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 59]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 140 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 60]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Thin.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 60]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 155 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-ThinItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 61]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 114 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 62]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-Black.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 62]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 160 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 63]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Regular.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 63]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 160 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 64]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Black.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 64]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 150 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 65]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Light.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 65]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 117 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-Medium.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 66]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 157 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 67]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-Medium.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 67]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 190 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 68]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-RegularItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 68]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 200 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 69]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-Light.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 69]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 198 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 70]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-HeavyItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 70]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 170 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 71]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-LightItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 71]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 198 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-RegularItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 72]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 119 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-LightItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 73]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 117 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 74]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-HeavyItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 74]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 135 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 75]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-BlackItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 75]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 140 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 76]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-Thin.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 76]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 195 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 77]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-MediumItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 77]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 124 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 78]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCompressed-Heavy.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 78]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 135 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 79]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-BoldItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 79]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 155 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 80]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-Bold.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 80]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 179 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 81]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-Heavy.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 81]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 170 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGroteskCondensed-ThinItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 82]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 155 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
                {
                    description: 'Whitespace glyphs have ink?',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_ink>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message: 'There is no whitespace glyph with ink.',
                            status: 'PASS',
                            traceback: null,
                        },
                    ],
                    result: 'PASS',
                },
                {
                    description: 'Space and non-breaking space have the same width?',
                    filename: 'fonts/otf/AmericanGrotesk-BlackItalic.otf',
                    key: [
                        '<Section: Whitespace>',
                        '<FontBakeryCheck:com.google.fonts/check/whitespace_widths>',
                        [['font', 83]],
                    ],
                    logs: [
                        {
                            message:
                                'Space and non-breaking space have differing width: The space glyph named space is 160 font units wide, non-breaking space named (uni00A0) is 0 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]',
                            status: 'FAIL',
                            traceback: null,
                        },
                    ],
                    rationale:
                        '\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations\n        in documents; such as the space before punctuation in languages that do that.\n        It avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It is also\n        used by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ',
                    result: 'FAIL',
                },
            ],
            key: ['<Section: Whitespace>', null, null],
            result: { FAIL: 84, PASS: 84 },
        },
    ],
};

export default data;
